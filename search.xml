<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux重要指令回顾总结</title>
      <link href="/2019/08/19/Linux%E9%87%8D%E8%A6%81%E6%8C%87%E4%BB%A4%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/19/Linux%E9%87%8D%E8%A6%81%E6%8C%87%E4%BB%A4%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Linux常见指令总结"><a href="#Linux常见指令总结" class="headerlink" title="Linux常见指令总结"></a>Linux常见指令总结</h1><p><img src="/2019/08/19/Linux重要指令回顾总结/标题图.png" alt="标题图"></p><a id="more"></a><h2 id="如何查找特定的文件（find）"><a href="#如何查找特定的文件（find）" class="headerlink" title="如何查找特定的文件（find）"></a>如何查找特定的文件（find）</h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find path [options] params</span><br></pre></td></tr></table></figure><p><strong>作用：在指定目录下查找文件</strong></p><p>eg:</p><ul><li><strong>从当前目录下查找名为target3.java的文件</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name "target3.java" // 从当前目录下查找名为target3.java的文件，返回这个文件的路径</span><br></pre></td></tr></table></figure><ul><li><strong>进行全局查找一个文件( / Linux下的根目录)</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name  "target3.java" //在全局查找名为target3.java的文件，返回这个文件的路径</span><br></pre></td></tr></table></figure><ul><li><strong>在home目录下查找一个以<code>“target”</code>打头的文件（~ Linux下的home目录）</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "target*"</span><br></pre></td></tr></table></figure><ul><li><strong>在home目录下查找一个“target”打头的文件且不区分大小写</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -iname "targe*"</span><br></pre></td></tr></table></figure><p>输入<code>man  指令名</code>的形式获得指令名的参数选项（用法）</p><h2 id="检索文件内容（grep）"><a href="#检索文件内容（grep）" class="headerlink" title="检索文件内容（grep）"></a>检索文件内容（grep）</h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattren file</span><br></pre></td></tr></table></figure><ul><li><p>全称： Globle Regular Expression Print</p></li><li><p>作用：<strong>查找文件里符合条件的字符串</strong> </p><p>显示的结果为文件中包含目标字符串所在的行，其余行是不会显示的</p></li></ul><ul><li><strong>查找名为target开头的文件中包含 <code>moo</code>的文件</strong> </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;moo&quot; target*</span><br></pre></td></tr></table></figure><h2 id="管道操作符-（-）"><a href="#管道操作符-（-）" class="headerlink" title="管道操作符 （|）"></a>管道操作符 （|）</h2><ul><li><p>可将指令连接起来，<strong>前一个指令的输出作为后一个指令的输入</strong></p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566142159754.png" alt="管道操作符 "></p></li></ul><p>eg:</p><p>从home目录下查找一个文件名前缀为<code>target</code>的文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "target*"</span><br></pre></td></tr></table></figure><p>也可以用管道是实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ | grep "target"</span><br></pre></td></tr></table></figure><p>find ~表示输出当前目录下所有文件，作为输入输入给grep命令，让grep命令在输入文件中筛选出名字包含target的文件名并且输出来。</p><h3 id="使用管道注意的要点"><a href="#使用管道注意的要点" class="headerlink" title="使用管道注意的要点"></a>使用管道注意的要点</h3><ul><li><strong>只处理前一个命令正确的输出，不处理错误的输出。</strong></li><li><strong>右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃。</strong></li><li>sed,awk,gerp,cut,head,top,less,more,wc,join,sort,split等接收标准输入流</li></ul><h3 id="grep的使用——日志文件相关的"><a href="#grep的使用——日志文件相关的" class="headerlink" title="grep的使用——日志文件相关的"></a>grep的使用——日志文件相关的</h3><p>查找日志文件中包含<code>&#39;partial\[true\]&#39;</code>的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log</span><br></pre></td></tr></table></figure><p>将包含<code>partial\[true\]</code>行中的引擎名称打印出来 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]'</span><br></pre></td></tr></table></figure><p>将前一个的输出流做为第二个grep 的输入流 且带一个-o参数进行二次筛选</p><p>将与tomcat相关的进程信息打印出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -rf | grep tomcat</span><br></pre></td></tr></table></figure><p>也会将当前grep指令查找tomcat都打印出来，我们不需要这条信息 使用grep -v “grep”清除含有grep的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -rf | grep tomcat | grep -v "grep"</span><br></pre></td></tr></table></figure><h2 id="grep总结"><a href="#grep总结" class="headerlink" title="grep总结"></a>grep总结</h2><ul><li><code>grep &#39;partial\[true\]&#39; bac-plat-al-data.info.log</code></li><li><code>grep -o &#39;engine\[[0-9a-z]*\]&#39;</code>  使用 -o选项筛选出符合正则表达式的结果输出</li><li><code>grep -v &quot;grep&quot;</code>过滤掉包含相关字符串的内容</li></ul><h2 id="对文件内容做统计-awk"><a href="#对文件内容做统计-awk" class="headerlink" title="对文件内容做统计(awk)"></a>对文件内容做统计(awk)</h2><p><strong>awk统计指令</strong></p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] 'cmd' file</span><br></pre></td></tr></table></figure><ul><li><strong>一次读取一行文本，按输入==分割符==进行切片，切成多个组成部分</strong></li><li><strong>将切片直接保存在内建的变量中，\$1,\$2… ($0表示行的全部)</strong> <em>按列逐行进行切片</em></li><li><strong>支持对单个切片的判断，支持循环判断，默认分割符为空格</strong></li></ul><p><img src="/2019/08/19/Linux重要指令回顾总结/1566147758436.png" alt="对文件内容做统计"></p><p><strong>本文件中分为6列，我们利用awk将其按默认空格分割，且取出其第一列和第四列进行打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $1,$4&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566147889495.png" alt="1566147889495"></p><p><strong>筛选 Proto为tcp 且 Recv-Q为1的数据行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' $1== tcp &amp;&amp; $2 == 1&#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148145306.png" alt="1566148145306"></p><p>如果要显示出表头则引入内建变量<code>NR</code>即可，从awk开始执行开始后，按照<strong>记录分割符</strong>，读取数据的次数</p><p>默认记录分割符是换行符，<strong>则默认的就是读取的数据行数。</strong>表头位于第一行，则NR设置为1即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' ($1==tcp &amp;&amp; $2==1) || NR==1 &#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148499562.png" alt="1566148499562"></p><p>使用自定义分割符筛选数据</p><p>使用<code>“,”</code>进行筛选 -F是不可缺少的，意思是以什么符号去分割筛选内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F "," '&#123;print $2&#125;' test.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148623262.png" alt="1566148623262"></p><p>打印以上日志中每个引擎出现的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]' </span><br><span class="line">| awk '&#123;enginearr[$1]++&#125;END&#123;for(i in enginearr)print i "\t" enginearr[i]&#125;'</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566149012312.png" alt="1566149012312"></p><p>分析指令含义：</p><p><code>awk {enginearr[$1]++}</code> 将awk按空格分割的行的数据存储在一个数组中，且数组下标是第一列，数组中的内容是第一列出现的次数。</p><p><code>END{for(i in enginearr)print i &quot;\t&quot; enginearr[i]}</code>END表示在前面执行完之后，会执行{}中的内容。</p><p>即遍历数组，i作为数组的下标，并且打印出数组中每行的下标  + “/t” + 数组内容。即<code>$1 +&quot;\t&quot; +出现次数</code></p><p>结果如上所示。</p><h2 id="awk总结"><a href="#awk总结" class="headerlink" title="awk总结"></a>awk总结</h2><p><strong>awk特别适合处理表格等格式化好的结果，文件。</strong></p><ul><li><strong>筛选出文件内容中某些列的数据 筛选件可以是多个空格隔开即可</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;pring $1,$4&#125;' netstat.txt</span><br></pre></td></tr></table></figure><ul><li><strong>筛选出文件内容中符合某些要求的列的数据</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' ($1==tcp &amp;&amp; $2==1) || NR==1 &#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><ul><li><strong>对筛选的内容逐行做统计操作，并且列出对应的统计结果</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]' </span><br><span class="line">| awk '&#123;enginearr[$1]++&#125;END&#123;for(i in enginearr)print i "\t" enginearr[i]&#125;'</span><br></pre></td></tr></table></figure><h2 id="批量替换掉文件里的内容（sed）"><a href="#批量替换掉文件里的内容（sed）" class="headerlink" title="批量替换掉文件里的内容（sed）"></a>批量替换掉文件里的内容（sed）</h2><p>sed指令</p><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [options] 'sed command' filename</span><br></pre></td></tr></table></figure><ul><li>全名 stream editor 流编辑器</li><li>适合用于对文本的行内容进行处理（利用正则表达式）</li></ul><p><img src="/2019/08/19/Linux重要指令回顾总结/1566149874323.png" alt="1566149874323"></p><p><strong>替换文件中错误的Str开头的行，替换为String</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^Str/String/' replace.java</span><br></pre></td></tr></table></figure><p>参数解析<code>&#39;-i s/^Str/String/&#39;</code></p><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p>s: 表示要进行字符串的操作</p><p>/^Str：要替换的字符串的开头</p><p>/String：替换后的字符串</p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150237798.png" alt="1566150237798"></p><p><strong>替换每一行末尾的<code>.</code>变为分号<code>;</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/\.$/\;/'</span>  replace.java</span><br></pre></td></tr></table></figure><p>解析：</p><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p> <code>.</code>需要被转义一下为<code>\.</code>且 <code>$</code>表示以什么结尾</p><p><code>\;</code>表示转义</p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150709745.png" alt="1566150709745"></p><h2 id="sed总结"><a href="#sed总结" class="headerlink" title="sed总结"></a>sed总结</h2><ul><li>替换以什么开头的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^Str/String/' replace.java</span><br></pre></td></tr></table></figure><ul><li>替换以什么结尾的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/\.$/\;/'  replace.java</span><br></pre></td></tr></table></figure><ul><li>全文替换所有的文字出现的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/Jack/me/g' replace.java</span><br></pre></td></tr></table></figure><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p><strong>最后一个参数g表示替换全文的，不加这个参数表示则只是替换当前行第一次出现Jack的字符串</strong></p><ul><li>删除文本中的空行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/^ *$/d' replace.java</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150931800.png" alt="1566150931800"></p><p><code>/^ *&amp;</code>:以空格开头结尾 <code>d</code>表示删除</p><ul><li>删除文中满足条件的行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/Integer/d' replace.java</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566151071477.png" alt="1566151071477"></p>]]></content>
      
      
      <categories>
          
          <category> Linux常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux回炉</title>
      <link href="/2019/08/19/Linux%E5%9B%9E%E7%82%89/"/>
      <url>/2019/08/19/Linux%E5%9B%9E%E7%82%89/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Linux知识学习"><a href="#Linux知识学习" class="headerlink" title="Linux知识学习"></a>Linux知识学习</h1><h2 id="Linux体系结构"><a href="#Linux体系结构" class="headerlink" title="Linux体系结构"></a>Linux体系结构</h2><p><img src="/2019/08/19/Linux回炉/1566119979376.png" alt="Linux体系结构"></p><ul><li>体系结构主要分为用<strong>户态（用户上层活动）和内核态</strong></li></ul><a id="more"></a><ul><li><p><strong>内核：本质是一段管理计算机硬件设备的程序</strong></p><blockquote><p><em>直接管理硬件，包括<strong>CPU</strong>,<strong>硬盘接口</strong>，<strong>网络接口</strong>等等。<strong>所有的计算机操作都需要通过内核传递给硬件</strong>。</em></p><p><em>用户程序的执行必须依托于内核的资源，<strong>包括CPU资源，存储资源，IO资源等</strong>。</em></p><p><em>为了访问这些资源，内核为其必须提供相应的接口，即<strong>系统调用</strong></em></p></blockquote></li><li><p>系统调用：内核的访问接口，是一种能再简化的操作</p><blockquote><p>一个操作系统上的功能，可以看作是操作系统上的系统调用的组合的结果。</p><p>一个操作系统不可能做出超越系统调用的操作，eg:给变量分配内存空间，就需要调用很多的系统调用。</p><p>由于一个系统的操作，比如分配变量内存需要调用需多系统调用指令，这无疑是给系统程序员增加了负担，因此产生了公共函数库，将程序员从复杂的系统调用细节种解脱出来，而提出的一种有效方法。</p></blockquote></li><li><p>公共函数库：系统的调用的组合拳（实现对系统调用的封装，将简单的业务逻辑，及接口呈现给用户，方便用户调用，极大的增强了程序涉及的灵活性），对于简单的操作我们可以直接调用系统资源进行，对于复杂的操作我们可以使用公共库函数实现。根据不同的实现标准会产生，不同的标准库，ISOC标准库等。</p></li><li><p>Shell:命令解释器，可编程。下通系统调用，上通各种应用。通常充当着一种胶水的角色。来连接各个小功能程序。让不同的程序能够以一个清晰的接口协调工作，从而增强各程序的功能。</p><blockquote><p>在没有图形界面之前Shell充当了用户的界面，当用户需要运行某些应用的时候，要通过Shell输入命令，已建立运行程序，同时Shell是可编程的，它可以执行符合Shell语法的文本。这样的文本称为Shell脚本。</p></blockquote></li></ul><p>通常简短的Shell命令，可以实现强大的功能，原因就是这些Shell语句通常对系统调用做了一层封装。</p><p>为了方便用户和系统交互，通常一个Shell对应一个系统终端，终端是一个硬件设备呈现个用户的是一个命令行的一个窗口，我们可以通过这个窗口输入或着输出这个文本，这个文本直接传递给Shell，进行分析解释执行。</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>查看系统调用的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 syscalls</span><br></pre></td></tr></table></figure><p>查看系统调用说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 acct</span><br></pre></td></tr></table></figure><p><strong><code>man 2</code>查询的是系统调用，<code>man 3</code>查询的是系统的库函数</strong></p><h3 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt</span><br></pre></td></tr></table></figure><p>使用<code>which ls</code>查看在默认文件下执行ls的文件路径 <code>/bin/ls</code> </p><p>Shell解析器解析<code>ls -lrt</code>这个字符串解析首先在默认路径下去查找<code>ls</code>的文件，找到后Shell将参数<code>-lrt</code>传入到在<code></code>ls`文件中去执行。</p><ul><li>查看当前Shell版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>查看可使用的Shell</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ul><li>修改当前使用的Shell，任意切换到Shell上面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s +Shell路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-买卖股票一网打尽(转载)</title>
      <link href="/2019/06/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD(%E8%BD%AC%E8%BD%BD)/"/>
      <url>/2019/06/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD(%E8%BD%AC%E8%BD%BD)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="买卖股票问题之一网打尽-call-me-hand"><a href="#买卖股票问题之一网打尽-call-me-hand" class="headerlink" title="买卖股票问题之一网打尽:call_me_hand:"></a>买卖股票问题之一网打尽:call_me_hand:</h1><p><img src="https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png" alt="状态转移图"></p><a id="more"></a><blockquote><p>在原作者的基础上，融合自身理解的东西，写成了java版的。</p><p>原作者：labuladong</p><p>链接：<a href="https://leetcode-cn.com/problems/two-sum/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/</a><br>来源：力扣（LeetCode）</p></blockquote><p>很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。</p><p>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。</p><p>先随便抽出一道题，看看别人的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> prices[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span> s1=-prices[<span class="number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();++i) &#123;            </span><br><span class="line">    s1 = max(s1, -prices[i]);</span><br><span class="line">    s2 = max(s2, s1+prices[i]);</span><br><span class="line">    s3 = max(s3, s2-prices[i]);</span><br><span class="line">    s4 = max(s4, s3+prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(<span class="number">0</span>,s4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。</p><p>本文就来告诉你这个框架，然后带着你一道一道秒杀。</p><p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p><p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p><h2 id="一、穷举框架"><a href="#一、穷举框架" class="headerlink" title="一、穷举框架"></a>一、穷举框架</h2><p>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p><p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p><p>而这里，我们不用递归思想进行穷举，而是利用「<strong>状态</strong>」进行穷举。我们具体到每一天，看看总共有几种可能的「<strong>状态</strong>」，再找出每个「<strong>状态</strong>」对应的「<strong>选择</strong>」。<strong>我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象</strong>，你只要记住「<strong>状态</strong>」和「<strong>选择</strong>」两个词就行，下面实操一下就很容易明白了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 择优(选择<span class="number">1</span>，选择<span class="number">2</span>...)</span><br></pre></td></tr></table></figure><p>比如说这个问题<strong>，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择</strong>。</p><p>但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。</p><p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span> or <span class="number">1</span>]</span><br><span class="line"><span class="number">0</span> &lt;= i &lt;= n-<span class="number">1</span>, <span class="number">1</span> &lt;= k &lt;= K</span><br><span class="line">n 为天数，大 K 为最多交易数</span><br><span class="line">此问题共 n × K × <span class="number">2</span> 种状态，全部穷举就能搞定。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; n:</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= k &lt;= K:</span><br><span class="line">        <span class="keyword">for</span> s in &#123;<span class="number">0</span>, <span class="number">1</span>&#125;:</span><br><span class="line">            dp[i][k][s] = max(buy, sell, rest)</span><br></pre></td></tr></table></figure><p>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p><p>我们想求的最终答案是 <strong>dp[n - 1][K][0]</strong>，<em>即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</em></p><p>记住如何解释「<strong>状态</strong>」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p><h2 id="二、状态转移框架"><a href="#二、状态转移框架" class="headerlink" title="二、状态转移框架"></a>二、状态转移框架</h2><p>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。</p><p><img src="https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png" alt="状态转移图"></p><p>通过这个图可以很清楚地看到，每种状态（<strong>0 和 1</strong>）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 sell      )</span><br><span class="line"></span><br><span class="line">解释：今天我没有持有股票，有两种可能：</span><br><span class="line">要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</span><br><span class="line">要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</span><br><span class="line"></span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 buy         )</span><br><span class="line"></span><br><span class="line">解释：今天我持有着股票，有两种可能：</span><br><span class="line">要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</span><br><span class="line">要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</span><br></pre></td></tr></table></figure><p>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。<strong>而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。</strong></p><h2 id="三、初始化就解析-person-fencing"><a href="#三、初始化就解析-person-fencing" class="headerlink" title="三、初始化就解析 :person_fencing:"></a>三、初始化就解析 :person_fencing:</h2><p>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 <strong>base case(初始化)</strong>，即最简单的情况。</p><p>注意i与k的不同，表示不同的含义。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; dp[-<span class="number">1</span>][k][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">&gt; 解释：因为 i 是从 <span class="number">0</span> 开始的，所以 i = -<span class="number">1</span> 意味着还没有开始，这时候的利润当然是 <span class="number">0</span> 。</span><br><span class="line">&gt; dp[-<span class="number">1</span>][k][<span class="number">1</span>] = -infinity</span><br><span class="line">&gt; 解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。</span><br><span class="line">&gt; dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">&gt; 解释：因为 k 是从 <span class="number">1</span> 开始的，所以 k = <span class="number">0</span> 意味着根本不允许交易，这时候利润当然是 <span class="number">0</span> 。</span><br><span class="line">&gt; dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity</span><br><span class="line">&gt; 解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>把上面的状态转移方程总结一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base <span class="keyword">case</span>：</span><br><span class="line">dp[-<span class="number">1</span>][k][<span class="number">0</span>] = dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">dp[-<span class="number">1</span>][k][<span class="number">1</span>] = dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity</span><br></pre></td></tr></table></figure><blockquote><p>状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])<span class="comment">//维持，前一天卖出--当天无股票</span></span><br><span class="line">&gt; dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])<span class="comment">//维持，前一天买入--当前有股票</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p><p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p></blockquote><p>==<strong>由上知i = 0时转状态转移方程初始化如下：</strong>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">显然 i = <span class="number">0</span> 时 dp[i-<span class="number">1</span>] 是不合法的。这是因为我们没有对 i 的 base <span class="keyword">case</span> 进行处理。可以这样处理：</span><br><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]) </span><br><span class="line">= max(<span class="number">0</span>,-infinity + prices[i]) = <span class="number">0</span></span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">= max(-infinity, <span class="number">0</span>-prices[i]) = -prices[i]</span><br></pre></td></tr></table></figure><h2 id="四、秒杀题目-hatching-chick"><a href="#四、秒杀题目-hatching-chick" class="headerlink" title="四、秒杀题目:hatching_chick:"></a>四、秒杀题目:hatching_chick:</h2><h3 id="第一题，k-1"><a href="#第一题，k-1" class="headerlink" title="第一题，k = 1"></a><strong>第一题，k = 1</strong></h3><p>直接套状态转移方程，根据 base case，可以做一些化简：  <strong><code>dp[i-1][0][0] = 0</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">1</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] - prices[i]) </span><br><span class="line">            = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br><span class="line">解释：k = <span class="number">0</span> 的 base <span class="keyword">case</span>，所以 dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">现在发现 k 都是 <span class="number">1</span>，不会改变，即 k 对状态转移已经没有影响了。</span><br><span class="line">可以进行进一步化简去掉所有 k：</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br></pre></td></tr></table></figure><p>直接写出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = prices.length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>显然 <code>i = 0</code> 时 <code>dp[i-1]</code>是不合法的。这是因为我们没有对 <code>i</code> 的 base case 进行处理。可以这样处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][0] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][0], dp[-1][1] + prices[i])</span></span><br><span class="line">        <span class="comment">// = max(0, -infinity + prices[i]) = 0</span></span><br><span class="line">        dp[i][<span class="number">1</span>] = -prices[i];</span><br><span class="line">        <span class="comment">//解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][1] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][1], dp[-1][0] - prices[i])</span></span><br><span class="line">        <span class="comment">// = max(-infinity, 0 - prices[i]) </span></span><br><span class="line">        <span class="comment">// = -prices[i]</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，<strong>新状态只和相邻的一个状态有关</strong>，其实不用整个 dp 数组，<strong>只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k == 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit_k_1</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="comment">// base case: dp[-1][0] = 0, dp[-1][1] = -infinity</span></span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span></span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        <span class="comment">// dp[i][1] = max(dp[i-1][1], -prices[i])</span></span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, -prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p><h3 id="第二题，k-infinity"><a href="#第二题，k-infinity" class="headerlink" title="第二题，k = +infinity"></a>第二题，k = +infinity</h3><p><strong>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。</strong>可以这样改写框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">            = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p><strong>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])<span class="comment">//卖出</span></span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i])<span class="comment">//买入</span></span><br></pre></td></tr></table></figure><p>直接翻译成代码：</p><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, temp - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题，k-infinity-with-cooldown-基于第二题"><a href="#第三题，k-infinity-with-cooldown-基于第二题" class="headerlink" title="第三题，k = +infinity with cooldown(基于第二题)"></a>第三题，k = +infinity with cooldown(基于第二题)</h3><p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])<span class="comment">//卖出</span></span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">2</span>][<span class="number">0</span>] - prices[i])<span class="comment">//买入</span></span><br></pre></td></tr></table></figure><p>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。</p><p>翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> dp_pre_0 = <span class="number">0</span>; <span class="comment">// 代表 dp[i-2][0]mai'ru</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);</span><br><span class="line">            <span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">            dp_pre_0 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者方程如下,添加另一种状态过渡期状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第i天不持有股票的情况有两种</span></span><br><span class="line"><span class="comment">//a.第i-1天也不持有股票</span></span><br><span class="line"><span class="comment">//b.第i-1天是过渡期</span></span><br><span class="line">mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//第i天持有股票有两种情况</span></span><br><span class="line"><span class="comment">//a.第i-1天也持有股票，第i天不操作，</span></span><br><span class="line"><span class="comment">//b.第i-1天不持有股票，在第i天买入</span></span><br><span class="line">mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line"><span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">mp[i][<span class="number">2</span>] = mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i];</span><br></pre></td></tr></table></figure><p>翻译代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> mp[][] = <span class="keyword">new</span> <span class="keyword">int</span> [n][<span class="number">3</span>]; <span class="comment">//由于可以无限次交易，所以只定义两个维度，第一个维度是天数，第二个维度表示是否持有股票，0表示不持有，1表示持有，2表示过渡期</span></span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//第i天不持有股票的情况有两种</span></span><br><span class="line">            <span class="comment">//a.第i-1天也不持有股票</span></span><br><span class="line">            <span class="comment">//b.第i-1天是过渡期</span></span><br><span class="line">            mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">//第i天持有股票有两种情况</span></span><br><span class="line">            <span class="comment">//a.第i-1天也持有股票，第i天不操作，</span></span><br><span class="line">            <span class="comment">//b.第i-1天不持有股票，在第i天买入</span></span><br><span class="line">            mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            <span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">            mp[i][<span class="number">2</span>] = mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后最大利润为最后一天，不持有股票或者进入冷冻期的情况</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(mp[n-<span class="number">1</span>][<span class="number">0</span>], mp[n-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四题，k-infinity-with-fee-基于第二题"><a href="#第四题，k-infinity-with-fee-基于第二题" class="headerlink" title="第四题，k = +infinity with fee(基于第二题)"></a>第四题，k = +infinity with fee(基于第二题)</h3><p>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee)<span class="comment">//设，前一天卖出交手续费（记完整一次交易）</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。</p></blockquote><p>直接翻译成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] mp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">1</span>] = - prices[<span class="number">0</span>]-fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]-fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化可以使用变量来代替数组将空间时间复杂度变为O(1)</p><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_with_fee</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题，k-2"><a href="#第五题，k-2" class="headerlink" title="第五题，k = 2"></a>第五题，k = 2</h3><p>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。</p><p><strong>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了</strong>。我们直接写代码，边写边分析原因。</p><p>原始的动态转移方程，没有可化简的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p><p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">/* 处理一下 base case*/</span> &#125;</span><br><span class="line">    dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][k][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>为什么错误？我这不是照着状态转移方程写的吗？</p><p>还记得前面总结的「<strong>穷举框架</strong>」吗？就是说我们必须穷举所有状态。<strong>其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxK = <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> [][][]mp = <span class="keyword">new</span> <span class="keyword">int</span>[n][maxK+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = maxK; k &gt; <span class="number">0</span>;k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i-<span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//处理 base case(初始化)</span></span><br><span class="line">                    mp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    mp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[i][k][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][k][<span class="number">0</span>], mp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                mp[i][k][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][k][<span class="number">1</span>], mp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举了 n × max_k × 2 个状态，正确。</span></span><br><span class="line">        <span class="keyword">return</span> mp[n-<span class="number">1</span>][maxK][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。</p><p>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">2</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">2</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> dp_i10 = <span class="number">0</span>, dp_i11 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> dp_i20 = <span class="number">0</span>, dp_i21 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            dp_i20 = Math.max(dp_i20, dp_i21 + price);</span><br><span class="line">            dp_i21 = Math.max(dp_i21, dp_i10 - price);</span><br><span class="line">            dp_i10 = Math.max(dp_i10, dp_i11 + price);</span><br><span class="line">            dp_i11 = Math.max(dp_i11, -price);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i20;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。</p><h3 id="第六题，k-any-integer"><a href="#第六题，k-any-integer" class="headerlink" title="第六题，k = any integer"></a>第六题，k = any integer</h3><p>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。<strong>但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？</strong></p><p><strong>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。</strong></p><p>直接把之前的代码重用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_any</span><span class="params">(<span class="keyword">int</span> max_k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (max_k &gt; n / <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">return</span> maxProfit_k_inf(prices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">/* 处理 base case */</span> &#125;</span><br><span class="line">            dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);     </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices==<span class="keyword">null</span> || k==<span class="number">0</span> || prices.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。代码复用</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;prices.length/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> [][][] mp = <span class="keyword">new</span> <span class="keyword">int</span> [prices.length][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = k; n &gt; <span class="number">0</span>  ; n--)&#123; <span class="comment">//交易次数</span></span><br><span class="line">                <span class="keyword">if</span>(i-<span class="number">1</span> == -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//初始化</span></span><br><span class="line">                    mp[i][n][<span class="number">0</span>] =  <span class="number">0</span>;</span><br><span class="line">                    mp[i][n][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[i][n][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][n][<span class="number">0</span>], mp[i-<span class="number">1</span>][n][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                mp[i][n][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][n][<span class="number">1</span>], mp[i-<span class="number">1</span>][n-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> mp[prices.length-<span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//买卖股票的最佳时机 II</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i-<span class="number">1</span>]&lt;prices[i])&#123;</span><br><span class="line">                max+=prices[i]-prices[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，6 道题目通过一个状态转移方程全部解决。</p><h2 id="五、最后总结-grin"><a href="#五、最后总结-grin" class="headerlink" title="五、最后总结:grin:"></a>五、最后总结:grin:</h2><p>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。</p><p>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？</p><p>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「<strong>三维 DP</strong>」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。</p><p>所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
          <category> 经典算法题分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 动态规划 Dynamic Programming </tag>
            
            <tag> 转载修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划Dynamic Programming 入门</title>
      <link href="/2019/06/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92Dynamic-Programming-%E5%85%A5%E9%97%A8/"/>
      <url>/2019/06/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92Dynamic-Programming-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划 Dynamic Programming"></a>动态规划 Dynamic Programming</h1><ol><li><strong>递推（递归+记忆化）</strong></li><li><strong>状态定义: opt[n], dp[n] ,fib[n] 定义成数组</strong></li><li><strong>状态转移方程： opt[n] = best_of(opt[n-1], opt[n-2])</strong></li><li><strong>最优子结构</strong></li></ol><a id="more"></a><h1 id="DP-vs-回溯-vs-贪心"><a href="#DP-vs-回溯-vs-贪心" class="headerlink" title="DP vs 回溯 vs 贪心"></a>DP vs 回溯 vs 贪心</h1><ul><li><strong>回溯（递归） —— 存在重新计算</strong>  假如不存在最优子结构的化，回溯（递归）就是最佳解法</li><li><strong>贪心 —— 永远局部最优</strong></li><li><strong>DP —— 记录局部最优子结构/多种记录值</strong></li></ul><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><h3 id="递归-记忆化"><a href="#递归-记忆化" class="headerlink" title="递归+记忆化"></a>递归+记忆化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> memo[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> climb_Stairs(<span class="number">0</span>, n, memo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climb_Stairs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n, <span class="keyword">int</span> memo[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> memo[i];</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i] = climb_Stairs(i + <span class="number">1</span>, n, memo) + climb_Stairs(i + <span class="number">2</span>, n, memo);</span><br><span class="line">        <span class="keyword">return</span> memo[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 memo为记忆数组 i为走过的台阶数  n为要走的台阶数</p><p>时间复杂度时O(n) </p><p>空间复杂度O(n)</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>反向递推 </p><p>不难发现，这个问题可以被分解为一些包含<strong>最优子结构的子问题</strong>，即它的最优解可以从其子问题的最优解来有效地构建，我们可以使用动态规划来解决这一问题。</p><p>第 i 阶可以由以下两种方法得到：</p><p>在第（i−1) 阶后向上爬1阶。</p><p>在第 (i−2) 阶后向上爬 2 阶。</p><p>所以到达第 i 阶的方法总数就是到第 (i−1) 阶和第 (i−2) 阶的方法数之和。</p><p>令 dp[i] 表示能到达第 i 阶的方法总数：</p><p>dp[i]=dp[i-1]+dp[i-2]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度时O(n) </p><p>空间复杂度O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 动态规划 Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode52 N Queens II</title>
      <link href="/2019/06/27/LeetCode52-N-Queens-II/"/>
      <url>/2019/06/27/LeetCode52-N-Queens-II/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Leetcode52-N-Queens-II"><a href="#Leetcode52-N-Queens-II" class="headerlink" title="Leetcode52 N Queens II"></a>Leetcode52 N Queens II</h1><ul><li><strong>位运算高效解决N皇后问题</strong></li><li><strong>DFS</strong></li><li><strong>剪枝</strong></li></ul><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><a id="more"></a><p>强力高效解法–位运算<br>通过二进制位将当前行中皇后可以去放的位置，然后一 一进行dfs</p><p><em>dfs的递归终止条件：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (row&gt;=n) &#123;  </span><br><span class="line">count++; </span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用cols pie na int型整数来分别表示列 撇 捺</li><li>(~(cols | pie | na)) 表示的时当前撇捺列中可以放以及不可以放皇后的位置</li><li>1表示可以放(空位）   0表示不可以放(对列撇捺的剪枝处理)</li></ul><blockquote><p><strong>将x最高位至第n位(含)清零     x&amp;( (1&lt;&lt;n)-1)</strong><br>添加过滤将无关位屏蔽掉 （(~(cols | pie | na))&amp;( (1&lt;&lt;n)-1)</p></blockquote><p>即：bits记录当前行所有的空位（(~(cols | pie | na))&amp;( (1&lt;&lt;n)-1)</p><ul><li>当bits大于0，则表示还有空位可以放入，则一直尝试将棋盘当前行能放的空位放满</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(bits&gt;0)&#123;</span><br><span class="line">p = bits&amp;(-bits);  //1.得到一个空位</span><br><span class="line">dfs(n, row+1, cols | p , (pie | p)&lt;&lt;1, na | p) &gt;&gt;1);//2.给下一行设置剪枝</span><br><span class="line">bits = bits &amp;(bits-1);//3.标记所站的空位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.x &amp; -x =&gt;得到最低位的1          即得到一个空位</strong><br><strong>2.row+1：切换至下一行<br>             cols | p ：下一行列不能放的位<br>            (pie | p)&lt;&lt;1：下一行撇不能放的位<br>            (na | p) &gt;&gt;1：下行捺不能放的位</strong><br><strong>3.x = x &amp; (x-1) =&gt; 清零最低为的1    即将当前所占的位标记位以占</strong></p><p>最后获取到的dfs外部变量count的总数</p><h4 id="52-N皇后-II"><a href="#52-N皇后-II" class="headerlink" title="52. N皇后 II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/" target="_blank" rel="noopener">52. N皇后 II</a></h4><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 n，返回 n 皇后不同的解决方案的数量。</p><p>示例:</p><p>输入: 4<br>输出: 2<br>解释: 4 皇后问题存在如下两个不同的解法。<br>[<br> [“.Q..”,  // 解法 1<br>  “…Q”,<br>  “Q…”,<br>  “..Q.”],</p><p> [“..Q.”,  // 解法 2<br>  “Q…”,<br>  “…Q”,<br>  “.Q..”]<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/n-queens-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/n-queens-ii</a></p><h2 id="位运算解解（最优解）"><a href="#位运算解解（最优解）" class="headerlink" title="位运算解解（最优解）"></a>位运算解解（最优解）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//计算的总数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span> cols, <span class="keyword">int</span> pie, <span class="keyword">int</span> na)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bits = (~(cols | pie | na)) &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>); <span class="comment">//得到当前所有空位</span></span><br><span class="line">        <span class="keyword">while</span> (bits &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = bits &amp; (-bits); <span class="comment">//获取最低位的1 获取空位</span></span><br><span class="line">            dfs(n, row + <span class="number">1</span>, (cols | p), (pie | p) &lt;&lt; <span class="number">1</span>, (na | p) &gt;&gt; <span class="number">1</span>); <span class="comment">//下一行继续进行dfs</span></span><br><span class="line">            bits &amp;= (bits - <span class="number">1</span>); <span class="comment">//清除最低位的1 标记空位为已占位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 动态规划典型题 </tag>
            
            <tag> LeetCode题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-位运算简记</title>
      <link href="/2019/06/24/%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AE%80%E8%AE%B0/"/>
      <url>/2019/06/24/%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="位运算简记"><a href="#位运算简记" class="headerlink" title="位运算简记"></a>位运算简记</h1><h2 id="XOR-异或"><a href="#XOR-异或" class="headerlink" title="XOR-异或"></a>XOR-异或</h2><blockquote><p>异或：相同位0，不同为1.也可以用【不进位加法】来理解</p></blockquote><p>异或操作的一些特点：</p><ul><li>x ^  0 = x</li><li>x ^ 1s = ~x   // 1s  = ~0</li><li>x ^ (~x)= 1s</li><li>x ^ x = 0</li><li>a ^ b  = c   -&gt;  a ^ c = b,  b ^ c = a   //交换ab</li><li>a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c </li></ul><a id="more"></a><h2 id="实战常用的位运算操作"><a href="#实战常用的位运算操作" class="headerlink" title="实战常用的位运算操作"></a>实战常用的位运算操作</h2><ul><li>x &amp; 1 == 1 OR ==0 判断奇偶性  等价于 （ x%2 == 1）</li><li>x = x &amp; (x-1) =&gt; 清零最低为的1 一直到x = 0</li><li>x &amp; -x =&gt;得到最低位的1</li></ul><h2 id="更为复杂的位运算操作"><a href="#更为复杂的位运算操作" class="headerlink" title="更为复杂的位运算操作"></a>更为复杂的位运算操作</h2><table><thead><tr><th>操作</th><th>运算</th></tr></thead><tbody><tr><td>将x最右边的n位清零</td><td>x &amp; (~0 &lt;&lt; n)</td></tr><tr><td>获取x的第n位值（0或1)</td><td>(x &gt;&gt; n) &amp; 1</td></tr><tr><td>获取x的第n位的幂值</td><td>x &amp; (1 &lt;&lt; (n - 1))</td></tr><tr><td>仅将第n位置为1</td><td>x \</td><td>(1&lt;&lt;n)</td></tr><tr><td>仅将第n为置为0</td><td>x &amp; ( ~(1 &lt;&lt; n))</td></tr><tr><td>将x最高位至第n位(含)清零</td><td>x&amp;( (1&lt;&lt;n)-1)</td></tr><tr><td>将第n位至第0位(含)清零</td><td>x&amp;(~((1&lt;&lt;(n+1))-1))</td></tr></tbody></table><h2 id="位运算练习"><a href="#位运算练习" class="headerlink" title="位运算练习"></a>位运算练习</h2><ul><li><p><strong>颠倒二进制位</strong></p><p>颠倒给定的 32 位无符号整数的二进制位。</p></li></ul><p>  示例 1：</p><p>  输入: 00000010100101000001111010011100<br>  输出: 00111001011110000010100101000000<br>  解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，<br>        因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。<br>  示例 2：</p><p>  输入：11111111111111111111111111111101<br>  输出：10111111111111111111111111111111<br>  解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，<br>        因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</p><p>  提示：</p><p>  请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。<br>  在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</p><p>  来源：力扣（LeetCode）<br>  链接：<a href="https://leetcode-cn.com/problems/reverse-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-bits</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = n &gt;&gt; i;</span><br><span class="line">            <span class="comment">//1.取出要反转的每一位二进制</span></span><br><span class="line">            temp &amp;= <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//2.将该二进制位放到反转后的位置</span></span><br><span class="line">            temp  &lt;&lt;= (<span class="number">31</span>-i);</span><br><span class="line">            <span class="comment">//3.将该位添加到结果上</span></span><br><span class="line">            result |= temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. 位1的个数</a></h4></li><li><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p></li></ul><p>  示例 1：</p><p>  输入：00000000000000000000000000001011<br>  输出：3<br>  解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。<br>  示例 2：</p><p>  输入：00000000000000000000000010000000<br>  输出：1<br>  解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 ‘1’。<br>  示例 3：</p><p>  输入：11111111111111111111111111111101<br>  输出：31<br>  解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p><p>  来源：力扣（LeetCode）<br>  链接：<a href="https://leetcode-cn.com/problems/number-of-1-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-1-bits</a></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            n &amp;=(n-<span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338. 比特位计数"></a><a href="https://leetcode-cn.com/problems/counting-bits/" target="_blank" rel="noopener">338. 比特位计数</a></h4><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><p>输入: 2<br>输出: [0,1,1]<br>示例 2:</p><p>输入: 5<br>输出: [0,1,1,2,1,2]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/counting-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/counting-bits</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            result[i] = result[i&gt;&gt;<span class="number">1</span>]+(i&amp;<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//result[i] = result[i&amp;(i-1)]+1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>方法1：i &amp; (i - 1)去掉i最右边的一个1；因i &amp; (i - 1）&lt; i，故result[i &amp; (i - 1)]已计算，所以i中1的个数为</p><p>result[i &amp; (i - 1)] + 1</p><p>方法2：i &gt;&gt; 1去掉i的最低位；因(i &gt;&gt; 1) &lt; i，故result[i &gt;&gt; 1]已计算，因此i中1的个数为i &gt;&gt; 1中1的个数加最后一位1的个数，即为result[i &gt;&gt; 1] + (i &amp; 1)</p></blockquote><ul><li><h4 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231. 2的幂"></a><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">231. 2的幂</a></h4><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><p>示例 1:</p><p>输入: 1<br>输出: true<br>解释: 20 = 1<br>示例 2:</p><p>输入: 16<br>输出: true<br>解释: 24 = 16<br>示例 3:</p><p>输入: 218<br>输出: false</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/power-of-two" target="_blank" rel="noopener">https://leetcode-cn.com/problems/power-of-two</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;(n&amp;(n-<span class="number">1</span>))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1.<strong>一个数是2的n次方 ，该数的比特位中则一定是且仅有一个1</strong></p><p>则判断是否是2的幂则转变位判断x中1的个数</p><p>x!=0 x&amp;(x-1)  = &gt;count++  final count = 1;</p><p>2.mod</p><p>3.logx = int</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 位运算简记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归复杂度求解</title>
      <link href="/2019/05/11/%E9%80%92%E5%BD%92%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B1%82%E8%A7%A3/"/>
      <url>/2019/05/11/%E9%80%92%E5%BD%92%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B1%82%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="26-递归的时间复杂度的求解"><a href="#26-递归的时间复杂度的求解" class="headerlink" title="[26]递归的时间复杂度的求解"></a>[26]递归的时间复杂度的求解</h1><p>递归时间复杂度的求解分为2种常规求法和递归树法</p><a id="more"></a><h2 id="常规求法"><a href="#常规求法" class="headerlink" title="常规求法"></a>常规求法</h2><h3 id="写递归代码的三部"><a href="#写递归代码的三部" class="headerlink" title="写递归代码的三部"></a>写递归代码的三部</h3><ol><li>找出递推公式</li><li>知道递推的出口</li><li>将以上两步翻译成代码</li></ol><p>常规求法就是按照递推公式去求解—-比较麻烦，考验数学的时候到了！！:sweat:</p><h2 id="递归树求法"><a href="#递归树求法" class="headerlink" title="递归树求法"></a>递归树求法</h2><p>根据写出的递推公式，以及递归的出口，画出递归树，分析每个节点的时间复杂度<em>当前行的节点个数\</em>行数</p><p>如下图：</p><p><img src="/2019/05/11/递归复杂度求解/qq数据\321830735\FileRecv\MobileFile\1552895962676.jpg" alt="1552895962676"></p><p>递归的时候时间复杂度为O(n*m) n为每行消耗的时间复杂度，m为数的高度。</p><p>即O($nlog_n$)   每行消耗的时间复杂度为O(n),树的高度为$nog_n$ 。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 递归事件复杂度求解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2019/05/11/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2019/05/11/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构"><a href="#25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构" class="headerlink" title="[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构"></a>[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构</h1><p>二叉树的插入，删除，查找操作，各个操作的事件复杂度跟树的高度成正比，理想情况下时间复杂度是O($log_n$) 。</p><p>不过二叉树查找树在频繁的动态更新过程中，可<strong>能会出现树的高度远大于$log_2n$ 情况，从而导致操作效率下降。极端情况下，二叉树会退化成为链表，时间复杂度会退化到O(n)。</strong>平衡二叉树的出现解决了这个问题。</p><p>平衡二叉树严格定义上讲：<strong>二叉树中任意一个节点的左右节点的树高度相差不能大于1</strong>.从这个定义上来看，完全二叉树，满二叉树都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。<br><a id="more"></a></p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552563697223.jpg" alt="1552563697223"></p><p>AVL数是严格按照上述所讲的定义的，即任何一个节点的左右子树的高度差不超过1，是一种高度平衡的二叉查找树。红黑树并没有严格按照上述定义</p><p>平衡二叉查找树种的”平衡”的意思就是让整棵看起来比较”对称”，比较”平衡”，不要出现左子树很高、右子树很矮就行。<strong>这个就能让整棵树的高度相对来说比较低一些，相应的插入、删除、查找等操作的效率高一些。</strong></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>如何定义一棵”红黑树”？</p><p>平衡二叉树其实很多，比如，SplayTree(伸展树)、Tree(树堆)等，</p><p><strong>红黑树的英文是”Red-Black-Tree”,简称R-B Tree。</strong>，红黑树中节点，一类被标记为黑色，一类被标记为红色，除此之外，一棵红黑树好需要满足如下要求：</p><ol><li>根节点是黑色的</li><li>每个叶子节点都是黑色的空节点（NULL),也就是说，叶子节点不存储数据； —为了简化代码实现</li><li>任何相邻的节点都不能同时为红色，也就是说，红色节点被黑色节点隔开的。</li><li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。</li></ol><p>如下图，红黑树。</p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552566548676.jpg" alt="1552566548676"></p><h2 id="红黑树的性能分析"><a href="#红黑树的性能分析" class="headerlink" title="红黑树的性能分析"></a>红黑树的性能分析</h2><p>为什么说红黑树“近似平衡”的？</p><p>平衡的意思就等价为性能不退化。“近似平衡”就等价为性能不会退化的太严重。红黑树的高度是否稳定地趋近$log_2n$就好了。</p><p>二叉树的性能由二叉树的高度来决定，我们分析以下红黑树的高度。</p><p>首先，我们来看，如果我们将红色节点从红黑树中去掉，那单纯包含黑色节点的红黑树的高度是多少呢？如下图：</p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552566521418.jpg" alt="1552566521418"></p><p>红色节点之后，有些节点就没有父节点了，它们会直接拿这些节点的祖父节点（父节点得到父节点）作为父节点。所以，之前的二叉树就变成了四叉树。</p><p>构成的四叉树是一颗完全二叉树，所以包含黑色节点的四叉树的高度，比包含向同节点个数的完全二叉树高度还要小。</p><p>即<strong>“黑色”四叉树的高度要低于完全二叉树，所以去掉红色节点的”黑树”的高度也不会超过$log_2n$。</strong></p><h2 id="我们把红色节点加回去的红黑树的树的高度是多少呢？"><a href="#我们把红色节点加回去的红黑树的树的高度是多少呢？" class="headerlink" title="我们把红色节点加回去的红黑树的树的高度是多少呢？"></a>我们把红色节点加回去的红黑树的树的高度是多少呢？</h2><p>由二叉树的<strong>第三条特性任何相邻节点不能是红色，则红色要被黑色隔开</strong>。<strong>红黑树中包含最多黑色节点的路径不会超过$log_2n$,所以加入红色节点之后，最长路径不会超过$2log_2n$，也就是说红黑树的高度近似为$2log_2n$。</strong></p><p><strong>所以红黑树的高度只是比高度平衡的AVL树的高度($log_2n$ )仅仅大了一倍，在性能上，下降的并不多。</strong>这样推导出来的节点不够精确，实际上红黑树的性能更好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Treap,Splay Tree，绝大情况下，他们的操作效率都很高，但是他们无法避免极端情况下的时间复杂度退化的情况，虽然出现概率不大，但是对于单次操作而言非常敏感的场景来说，他们并不适用。</p><p>AVL树是一种高度平衡的二叉树，所以查找的效率非常高，但是AVL树为维持这种高度平衡的树，就要付出更大的代价，每次插入之后，删除倒要调整，就比较复杂跟耗时。所以对于频繁的插入删除操作而言，使用AVL树的代价就比较高了。</p><p><strong>所以红黑树的插入删除，查找各种操作比较稳定，对于工程应用跟偏向使用这个能应对各种异常情况，为了支持工业级别的应用，我们更倾向于使用这种性能跟稳定为平衡二叉树。</strong></p><p>红黑树的实现对于初学者来说比较复杂，我们可以使用跳表代替。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树基础(下)</title>
      <link href="/2019/05/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80(%E4%B8%8B)/"/>
      <url>/2019/05/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？"><a href="#24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？" class="headerlink" title="[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？"></a>[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？</h1><p>二叉树查找树特点：支持动态数据集合的快速插入和删除，查找操作。</p><h2 id="二叉查找树-Binary-Search-Tree"><a href="#二叉查找树-Binary-Search-Tree" class="headerlink" title="二叉查找树(Binary Search Tree)"></a>二叉查找树(Binary Search Tree)</h2><p>二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。为了快速查找而生的树。这些都依赖二叉树的特殊结构。二叉查找树的要求，<strong>在树中的任意一个节点，其左子树的每个节点的值，都小于这个节点的值，而右子树节点的值都大于这个节点的值。</strong></p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉搜索树图.jpg" alt="二叉搜索树图"></p><a id="more"></a><h3 id="内置节点代码"><a href="#内置节点代码" class="headerlink" title="内置节点代码"></a>内置节点代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node left;</span><br><span class="line">    <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftData = left.data;</span><br><span class="line">        <span class="keyword">int</span> rightData = right.data;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"data="</span> + data +</span><br><span class="line">                <span class="string">", left="</span> + leftData +</span><br><span class="line">                <span class="string">", right="</span> + rightData +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉查找树的查找操作"><a href="#二叉查找树的查找操作" class="headerlink" title="二叉查找树的查找操作"></a>二叉查找树的查找操作</h2><p>首先我们先取根节点，如果要查找的数据等于我们要查找的数据那么我们就先返回。  —类似于求取二叉树的高度</p><p>如果要查找的数据小于我们要查找的数据，我们就在左子树查找。</p><p>如果要查找的数据大于我们要查找的数据，我们就在右子树查找</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树查找操作.jpg" alt="二叉树查找操作"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">find</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node p = tree;  <span class="comment">//跟节点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &gt; p.data)&#123;</span><br><span class="line">            p = p.left;   <span class="comment">//查找树小遍历左子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data &lt; p.data)&#123;</span><br><span class="line">            p = p.right;  <span class="comment">//查找树大遍历右子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//没有找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的查找树插入操作"><a href="#二叉树的查找树插入操作" class="headerlink" title="二叉树的查找树插入操作"></a>二叉树的查找树插入操作</h2><p>根查找差不多，跟查找类似，但是加了一个条件就是要插入的节点是叶子节点</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉搜索树的插入.jpg" alt="二叉搜索树的插入"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tree = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node p  = tree;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &gt; p.data) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                p.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; p.data) &#123;  <span class="comment">//data &lt; p.data</span></span><br><span class="line">            <span class="keyword">if</span>(p.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                p.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树查找树删除操作"><a href="#二叉树查找树删除操作" class="headerlink" title="二叉树查找树删除操作"></a>二叉树查找树删除操作</h2><p>删除操作分为3种情况。</p><p>第一种情况是，如果要删除的节点没有子节点，我们只需要直接将父节点中，将要删除节点指针为null。比如图中的删除节点55。</p><p>第二种情况是，如果要删除的节点只有一个子节点（只有左子节或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的字节点就可以了。比如图中的删除节点13。</p><p>第三种情况是，如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小的节点，把它替换到删除的节点上，然后再删除这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了），所以，我们可以应用上面两条规则来删除这个最小节点了。我们可以将最小节点互换，然后删除叶子节点。比如图中的删除节点18。</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树删除图.jpg" alt="二叉树删除图"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node p = tree; <span class="comment">//p指向要删除的节点，初始化指向根节点</span></span><br><span class="line">    Node pp = <span class="keyword">null</span>; <span class="comment">//pp记录的是p的父节点</span></span><br><span class="line">    <span class="comment">//查找要删除的节点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.data != data) &#123;</span><br><span class="line">        pp = p;</span><br><span class="line">        <span class="keyword">if</span> (data &gt; p.data) &#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;       <span class="comment">//没有找到 要删除的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要删除的节点有两个子节点</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123; <span class="comment">//查找右子树中最小节点</span></span><br><span class="line">        Node minp = p.right;</span><br><span class="line">        Node minpp = p;  <span class="comment">//minpp表示minp的父节点</span></span><br><span class="line">        <span class="keyword">while</span> (minp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            minpp = minp;</span><br><span class="line">            minp = minp.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到要删除节点的右子树的最小值，即右子树的最端左孩子</span></span><br><span class="line">        p.data = minp.data; <span class="comment">//将要删除的节点的值更因为最左端的值</span></span><br><span class="line">        p = minp; <span class="comment">//将要删除的节点变为最左端节点</span></span><br><span class="line">        pp = minpp; <span class="comment">//更新要删除的节点的父节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将删除操作(叶子节点) 或者要删除的节点只有一个子节点</span></span><br><span class="line">    Node child; <span class="comment">//p 的子节点</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        child = p.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        child = p.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        child = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tree = child;   <span class="comment">//要删除的节点没有父节点，则要删除的是根节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p) &#123;</span><br><span class="line">        pp.left = child;   <span class="comment">//要删除的节点只有左子树</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pp.right = child; <span class="comment">//要删除的节点只有右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉查找树的其他操作"><a href="#二叉查找树的其他操作" class="headerlink" title="二叉查找树的其他操作"></a>二叉查找树的其他操作</h2><h3 id="寻找最大，最小节点"><a href="#寻找最大，最小节点" class="headerlink" title="寻找最大，最小节点"></a>寻找最大，最小节点</h3><p>最小节点：在最左端</p><p>最大节点：在最右端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">findMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p = tree;</span><br><span class="line">    <span class="keyword">while</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">findMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p = tree;</span><br><span class="line">    <span class="keyword">while</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树时间复杂度分析"><a href="#二叉树时间复杂度分析" class="headerlink" title="二叉树时间复杂度分析"></a>二叉树时间复杂度分析</h2><p>二叉查找，插入，删除，查找操作的时间复杂度。</p><p>实际上，二叉查找树的各种操作根构造树的形态，图一第一种二叉查找树，根节点的左右子树极度不平衡，已经退化成了链表，所以查找的时间复杂度就变成了O(n)。</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树搜索树的弊端.jpg" alt="二叉树搜索树的弊端"></p><p>我们刚其实分析了一种最糟糕的情况，我们现在来分析一个最理想的情况，二叉查找树是一棵完全二叉树（或满二叉树)。这个时候，插入，删除，查找的<strong>时间复杂度都跟树的高度成正比</strong>，也就是O(height)。</p><p>满二叉树的高度等于$log_2(n+1)$ 完全二叉树的高度在[$log_2(n+1)$,$log_2n+1$]近似为完全二叉树的高度小于等于$log_2n$ 。</p><p>显然极度不平衡的二叉查找树，他的查找性能肯定不能满足我们的需求，我们需要构建一种不管怎么删除，插入数据的时候都能保持任意节点左右子树都比较平衡的二叉查找树，这就是我们下一节课要详细讲的，一种特殊的二叉查找树，平衡二叉查找树。平衡二叉查找树的高度接近$log_n$,所以插入删除，查找操作的时间复杂度也比较稳定，是O($log_n$)。</p><h2 id="散列表和二叉树辨析"><a href="#散列表和二叉树辨析" class="headerlink" title="散列表和二叉树辨析"></a>散列表和二叉树辨析</h2><p>散列表的插入，删除，查找操作的时间复杂度可以做到常量级的O(1)非常高效相比于二叉树而言，二叉树显得很没有优势。</p><p>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序，而对二叉搜索树而言，中序遍历的结果就是，O(n)的时间复杂度内，输出有序数据序列。</p><p>第二，散列表扩容耗时很多，而且当遇到散列冲突的时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，平衡二叉查找树非常稳定，时间复杂度在$Olog_n$。</p><p>第三笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但是当哈希从冲突严中的时候，常量级时间复杂度不一定比$Olog_n$小，所以时间查找速度可能不一定比$Olog_n$块，加上哈希函数耗时，也不一定就比平衡二叉查找树的效率高。</p><p>第四，散列表给设计复杂，平衡二叉树只需要考虑平衡性的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-动态SQL映射</title>
      <link href="/2019/04/21/Mybatis-%E5%8A%A8%E6%80%81SQL%E6%98%A0%E5%B0%84/"/>
      <url>/2019/04/21/Mybatis-%E5%8A%A8%E6%80%81SQL%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis动态SQL映射"><a href="#Mybatis动态SQL映射" class="headerlink" title="Mybatis动态SQL映射"></a>Mybatis动态SQL映射</h1><blockquote><p>重点：</p><ul><li>理解Mybatis的动态SQL映射原理</li><li>掌握Mybatis的动态SQL映射编写</li></ul></blockquote><a id="more"></a><h2 id="1-动态SQL简介"><a href="#1-动态SQL简介" class="headerlink" title="1.动态SQL简介"></a>1.动态SQL简介</h2><p>MyBatis的强大特性之一就是他的动态SQL。JDBC中根据不同条件拼接SQL语句繁琐。利用动态SQL就可以摆脱这种痛苦。</p><p>通常动态SQL不可能是独立的一部分，MyBatis当然使用一种强大的动态SQL语言来改进这种情形，这种语言可以被用在任意SQL映射语句中。</p><p>动态SQL元素和使用JSTL(JSP标准标签库)或其他类似基于XML的文本处理器相似。在MyBatis之前版本中，需要了解很多元素，现在MyBatis3大大提升了元素，用不到原先一半元素就可以了。MyBatis采用功能强大的基于<strong>OGNL</strong>（Object Graphic Navigation Language 对象图导航语言） 的表达式来消除其他元素。</p><p>动态SQL映射使用标记：</p><ul><li>if</li><li>choose(when,otherwise)</li><li>trim(where,set)</li><li>foreach</li></ul><h2 id="2-动态SQl标记"><a href="#2-动态SQl标记" class="headerlink" title="2.动态SQl标记"></a>2.动态SQl标记</h2><h3 id="2-1if"><a href="#2-1if" class="headerlink" title="2.1if"></a>2.1if</h3><p>动态SQL通常要做的事情是有条件地包含where子句地一部分。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndJob"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    where deptno=20</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and jon != '' "</span> &gt;</span></span><br><span class="line">         and job like #&#123;job&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多重if判断  and</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">     select</span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">     from emp</span><br><span class="line">     where deptno=20</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">         and job like #&#123;job&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">         and ename like #&#123;ename&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2where"><a href="#2-2where" class="headerlink" title="2.2where"></a>2.2where</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">      select</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">      from emp</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">                deptno = #&#123;deptno&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">             and ename like #&#123;ename&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3choose-when-otherwise"><a href="#2-3choose-when-otherwise" class="headerlink" title="2.3choose,when,otherwise"></a>2.3choose,when,otherwise</h3><p>有些时候，我们不想用条件语句，而只是想从中择出一点。针对这种情况，MyBatis提供了choose元素，它有点像Java中的switch语句</p><p>还是如上的例子，但是这次变为提供了“job”就按“job”查找，提供了”ename”就按“ename”查找，若两者都没有，就按业务情况返回所有deptno = 20的且ename是</p><p><code>JACK</code>的职务表信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--choose when otherwise 相当于SwitchCase case default--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithDeptnoAndLikeJobOrEname"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        deptno=20</span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"job!=null"</span>&gt;</span></span><br><span class="line">                and job = #&#123;job&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                and ename = #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3trim-where-set"><a href="#2-3trim-where-set" class="headerlink" title="2.3trim,where,set"></a>2.3trim,where,set</h3><p>前面几个例子已经合宜的解决了经典的动态SQL问题，现在考虑回到if示例，这次我们将<code>deptno= 20</code>也设置为动态的条件或者去掉看看会发生什么。</p><p>会在解析SQL语句时出现SQL语句异常，所以我们此时需要<code>where</code>来解决此问题，它会将where中包括的语句适当的增加删除某些多余的SQL命令，使得达到开发者预期的情况，比如去掉多余的 and，当没有符合条件时，where语句不执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">            deptno = #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            and ename like #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>where元素直到只有在一个以上if条件有值时才会添加where子句，而且，若最后内容是“AND”或者“OR”开头的，where元素也知道如何将他们去除。</p><p>如果where元素不正常处理，我们还可以通过trim元素来定制我们想要的功能。比如，和where元素等价的自定义trim元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。其功能就是在所有prefixOverrides 属性指定的内容将被移除，并且插入prefix属性中指定的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;where&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="deptno!=null"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--deptno = #&#123;deptno&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="job!=null and job!= '' "&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--and job like #&#123;job&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="ename!=null"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--and ename like #&#123;ename&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/where&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将where后的语句中所偶有以and 或者 or结尾或开头的标签都去掉--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and | or"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">            deptno = #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            and ename like #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似用于动态更新的解决方案叫做set，set元素可以被用于动态包含需要<strong>更新</strong>的列，而且舍去其他的。比如：舍去以，结尾的，并且当set元素不为空的元素中个数大于1时，在开头添加set </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateScottEmpByObjectWithSet"</span> <span class="attr">parameterType</span>=<span class="string">"com.soyanga.mybatis.entity.ScottEmp"</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        <span class="comment">&lt;!--&lt;trim prefix="set" suffixOverrides=","&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;if test="hiredate!=null"&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--hiredate = #&#123;hiredate&#125;,--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;if test="ename!=null"&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--ename = #&#123;ename&#125;,--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/trim&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"hiredate!=null"</span>&gt;</span></span><br><span class="line">                hiredate = #&#123;hiredate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                ename = #&#123;ename&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4foreach"><a href="#2-4foreach" class="headerlink" title="2.4foreach"></a>2.4foreach</h3><p>动态SQL的另外一个常用的必要操作是需要对一个集合进行遍历，通常子构建 IN 条件语句的时候。比如：</p><p>参数类型为：list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByList(List deptnos);</span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByList"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            deptno in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByList() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> deptnolist = new ArrayList<span class="tag">&lt;<span class="name">Integer</span>&gt;</span>();</span><br><span class="line">        deptnolist.add(10);</span><br><span class="line">//        deptnolist.add(20);</span><br><span class="line">//        deptnolist.add(30);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByList(deptnolist);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数类型为 ：array</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByArray(Integer[] deptnos);</span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByArray"</span> <span class="attr">parameterType</span>=<span class="string">"integer[]"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            deptno in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByArray() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByArray(new Integer[]&#123;10&#125;);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数类型为Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">    List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByMap(Map deptnoMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByMap"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                ename like #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptnos!=null"</span>&gt;</span></span><br><span class="line">                and deptno in</span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"deptnos"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                    #&#123;item&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    //TDD 测试驱动开发</span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByMap() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        Map map = new HashMap();</span><br><span class="line">        map.put("ename", "%J%");</span><br><span class="line">        map.put("deptnos", new Integer[]&#123;10,20,30&#125;);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByMap(map);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>foreach元素的功能非常强大，它允许你指定一个集合，声明可以用在元素体内的集合项和索引变量。它也允许你指定开辟匹配的字符串以及在迭代中间放置分隔符。这个元素是很智能的，因此他不会偶然地附加多余地分隔符。</p><blockquote><p>注意：你可以将任何可迭代对象（如列表，集合等)和任何的字典或者数组对象传递给foreach作为集合参数。当使用可迭代对象或者数组时，index是当前迭代的次数。item的值便是本次迭代获取的元素。当使用字典（或者Map.Entry对象的集合时），index是键，item是值。</p><p>collection 迭代输出 List时为list ,迭代输出数组时为array,迭代输出当使用字典（或者Map.Entry),为其中的存储的集合名称</p><p>open 拼接SQL左边   item    close 拼接SQL右边  separator=“,” ：分隔符为”，“</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"deptnos"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                    #&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h2><h3 id="3-1分页插件"><a href="#3-1分页插件" class="headerlink" title="3.1分页插件"></a>3.1分页插件</h3><p>在进行数据库应用程序开发的时候，经常会使用到各种各样的分页，这里又开源社区提供了一个分页插件([PageHelper][<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md]),能够制成任何复杂的表单，多表查询。" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md]),能够制成任何复杂的表单，多表查询。</a></p><p>[使用方法][<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md]" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md]</a> ：中文的插件</p><ul><li><p>添加分页插件依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Mybatis分页插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器插件</p><p>在MyBatis的配置文件中添加拦截器插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置PageHelper分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种，RowBounds方式的调用</span></span><br><span class="line">List&lt;Country&gt; list = sqlSession.selectList(<span class="string">"x.y.selectIf"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种，Mapper接口方式的调用，推荐这种使用方式。</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种，Mapper接口方式的调用，推荐这种使用方式。</span></span><br><span class="line">PageHelper.offsetPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种，参数方法调用</span></span><br><span class="line"><span class="comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Country&gt; <span class="title">selectByPageNumSize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Param(<span class="string">"user"</span>)</span> User user,</span></span><br><span class="line"><span class="function">            @<span class="title">Param</span><span class="params">(<span class="string">"pageNum"</span>)</span> <span class="keyword">int</span> pageNum, </span></span><br><span class="line"><span class="function">            @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> <span class="keyword">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置supportMethodsArguments=true</span></span><br><span class="line"><span class="comment">//在代码中直接调用：</span></span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectByPageNumSize(user, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五种，参数对象</span></span><br><span class="line"><span class="comment">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span></span><br><span class="line"><span class="comment">//有如下 User 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//其他fields</span></span><br><span class="line">    <span class="comment">//下面两个参数名和 params 配置的名字一致</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Country&gt; <span class="title">selectByPageNumSize</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span></span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectByPageNumSize(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第六种，ISelect 接口方式</span></span><br><span class="line"><span class="comment">//jdk6,7用法，创建接口</span></span><br><span class="line">Page&lt;Country&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPage(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectGroupBy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//jdk8 lambda用法</span></span><br><span class="line">Page&lt;Country&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPage(()-&gt; countryMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接返回PageInfo，注意doSelectPageInfo方法和doSelectPage</span></span><br><span class="line">pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPageInfo(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectGroupBy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对应的lambda用法</span></span><br><span class="line">pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPageInfo(() -&gt; countryMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//count查询，返回一个查询语句的count数</span></span><br><span class="line"><span class="keyword">long</span> total = PageHelper.count(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectLike(country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">total = PageHelper.count(()-&gt;countryMapper.selectLike(country));</span><br></pre></td></tr></table></figure></li></ul><p>XML中的一些特殊字符的转译符</p><p><img src="/2019/04/21/Mybatis-动态SQL映射/Users\32183\AppData\Roaming\Typora\typora-user-images\1554724202872.png" alt="1554724202872"></p><p>练习：</p><blockquote><p><img src="/2019/04/21/Mybatis-动态SQL映射/Users\32183\AppData\Roaming\Typora\typora-user-images\1554725010278.png" alt="1554725010278"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Mapper映射</title>
      <link href="/2019/04/15/Mybatis-Mapper%E6%98%A0%E5%B0%84/"/>
      <url>/2019/04/15/Mybatis-Mapper%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis的Mapper映射"><a href="#Mybatis的Mapper映射" class="headerlink" title="Mybatis的Mapper映射"></a>Mybatis的Mapper映射</h1><blockquote><p>重点</p><ol><li>掌握Mybatis的基本SQL映射</li><li>掌握Mybatis中CRUD的SQL编写</li></ol></blockquote><h2 id="1-Mapper映射概念"><a href="#1-Mapper映射概念" class="headerlink" title="1 Mapper映射概念"></a>1 Mapper映射概念</h2><p>Mapper XML文件MyBatis的真正强大在于它的映射语句，也是解决<strong>JDBC</strong>大量重复代码</p><a id="more"></a><h2 id="2-Mapper文件结构"><a href="#2-Mapper文件结构" class="headerlink" title="2 Mapper文件结构"></a>2 Mapper文件结构</h2><p>SQL映射文件有很少得到几个顶级元素（按照他们应该被定义的顺序）：</p><ul><li><p>cache-给定命名空间的缓存配置</p></li><li><p>cache-ref-其他命名空间缓存配置的引用</p></li><li><p>resultMap-最复杂也是最强的元素，用来描述如何从数据库结果集中映射</p><ul><li>java对象中的属性名   数据库列名称 跟 jdbcType属性类型 javaType类型 一一对应起来</li><li>id对应数据库的主键 </li></ul></li><li><p>sql-可以被其他语句引用的可重用语句块</p><ul><li>简化查询 可重用的语句块 </li></ul></li><li><p>insert-映射插入语句</p></li><li><p>update-映射更新语句</p></li><li><p>delete-映射删除语句</p></li><li><p>select-映射查询语句</p><p>增删改查中的id对象Mapper接口中的方法名</p></li></ul><p>参考一个完整的Mapper示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.soyanga.mybatis.mapper.ScottGroupMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ScottGroup"</span> <span class="attr">type</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"deptno"</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"dname"</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"loc"</span> <span class="attr">column</span>=<span class="string">"loc"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;select deptno="selectScottGroup" resultMap="scottGroup"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select deptno,dname,loc from scott--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--where deptno = #&#123;deptno&#125;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/select&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--SQL片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"basic_column"</span>&gt;</span></span><br><span class="line">        id,dname,loc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertScottGroup"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"deptno"</span> <span class="attr">keyColumn</span>=<span class="string">"deptno"</span>&gt;</span></span><br><span class="line">        insert into dept (deptno,loc)</span><br><span class="line">                values (#&#123;deptno&#125;,#&#123;loc&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--修改更新信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateScottInfo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteScottInfoById"</span>&gt;</span></span><br><span class="line">        delete from dept</span><br><span class="line">        where  id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultMap</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"basic_column"</span>/&gt;</span> </span><br><span class="line">        from dept where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>插入操作中的Tips:</p><p>插入信息中 useGeneratedKeys = “true”主键自增长 </p><p>keyProperty=”deptno” ：对应映射对象的属性名</p><p>keyColumn=”deptno”     对应表中主键名称</p><p>查询操作中的Tips：</p><p>id = mapper接口中得对应的查询方法，resultMap 对应的查询后的结果的类型 一般返回的都是java对应得数据库的对象的List集合</p></blockquote><h2 id="3-select命令"><a href="#3-select命令" class="headerlink" title="3 select命令"></a>3 select命令</h2><p>查询语句是MyBatis最常用的元素章之一。通常查询比修改频繁。查询方式多种</p><p>简单查询如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">paramterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">select* form person where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个语句被称作selectPerson,接收一个int(或者Integer)类型的参数，并通过HashMap类型的对象，其中键是列名，值便是结果型中的对应值。参数符#{id}MyBatis创建一个预处理的语句参数，通过JDBC这样的一个参数在SQL中会由，并被传递到一个新的预处理语句中，这跟JBC中的SQL语句中的？类作业类似。</p><h2 id="4-Insert-Update-Delete"><a href="#4-Insert-Update-Delete" class="headerlink" title="4.Insert Update Delete"></a>4.Insert Update Delete</h2><p>Insert Update Delete都属于数据变更语句，他们的基本实现类似</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag"><span class="attr">parametrType</span>=<span class="string">"domain.bolg.Author"</span></span></span><br><span class="line"><span class="tag"><span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">parametrType</span>=<span class="string">"domain.bolg.Author"</span></span></span><br><span class="line"><span class="tag"><span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br></pre></td></tr></table></figure><p>MyBatis插入时自动生成主键有两种方式</p><ul><li>数据库自动生成主键</li><li>通过SQL语句生成主键，然后使用到主键字段</li></ul><p><strong>在实际开发的项目中，主键字段通常会有一定的规则，所以该两种方式实际上，仅仅体现MyBatis的扩展能力。</strong></p><h2 id="5-sql（复用SQL语句）"><a href="#5-sql（复用SQL语句）" class="headerlink" title="5 sql（复用SQL语句）"></a>5 sql（复用SQL语句）</h2><p>sql标签可以被用来定义可重用SQL代码片段，可以包含在其他语句中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span>$&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.pssword&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"basic_column"</span>&gt;</span>        id,group_id,title,content,is_prptected,background,remind_time,create_time,modify_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL片段可以被包含在SQL语句中，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from som_table t1 cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultMap</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"basic_column"</span>/&gt;</span> </span><br><span class="line">        from dept where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-parameter-参数"><a href="#6-parameter-参数" class="headerlink" title="6 parameter(参数)"></a>6 parameter(参数)</h2><p>Mybatis的参数类型通常有两种类型：一种时基本类型，一种是引用类型。</p><h3 id="6-1基本类型"><a href="#6-1基本类型" class="headerlink" title="6.1基本类型"></a>6.1基本类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span>&gt;</span></span><br><span class="line">    select id,username,password</span><br><span class="line">    form users</span><br><span class="line">    where id = #&#123;id&#125;   参数类型为基本类型</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2引用类型"><a href="#6-2引用类型" class="headerlink" title="6.2引用类型"></a>6.2引用类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">insert into users (id,username,password) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)  </span><br><span class="line">    写的是这个对象的属性名（id,username,password）</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面User类型的参数对象传递到语句中，id,username 和password属性中然后将他们的值传入预处理语句的参数中，这点相对于语句中传参是比较好的</p><p>且User的这些属性必须要有geter setter方法。</p><h3 id="6-3字符串"><a href="#6-3字符串" class="headerlink" title="6.3字符串"></a>6.3字符串</h3><p>默认情况下，使用#{}格式的语法会导致Mybatis创建PerparedStatement参数设置参数（就像使用？）。这样做更安全，更迅速，通常也是首选做法，不会</p><p>出一些错误，想在直接在SQL语句中插入一个不转义的字符串。比如，想ORDER BY,你可以直接用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><p>这里MyBatis会修改或转义字符串。需要额外注意的是:用这种方式接受用的将其用于语句中的参数是不安全的，会导致潜在SQL注入攻击，因此不要使用这些字段，要么自行转译并检验。</p><h2 id="7-resultMap-查询结果映射"><a href="#7-resultMap-查询结果映射" class="headerlink" title="7.resultMap(查询结果映射)"></a>7.resultMap(查询结果映射)</h2><p>resultMap元素是MyBatis种最强大的元素，可以节省%90的JDBC代码量，并在一情形下允许你做一些JDBC不支持的事情。对复杂语句进行联合映射的时候，它很可能代替数千行的同等功能的代码，简化代码量的设计思想是，简单的原句不需要明确的结果映射，而复杂的语句只需要建立联系即可。</p><p>简单的映射，未指定明确的resultmap比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">select id,username,hashedPassword</span><br><span class="line">    form some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述语句只是简单的将所有的列映射到HashMap的建上，这由resultType的参数指定，然而在大部分情况下都够用，但是HashMap不是一个很好的领域模型。你的使用JavaBean或POJO(Plain Old Java Objects,普通Java对象)作为领域模型对两者都支持。</p><p>Bean映射，指定resultmap比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定user Bean</span></span><br><span class="line"><span class="keyword">package</span> com.soyanga.mode1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String hashedPassword;</span><br><span class="line">    <span class="comment">//省略getter setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于JavaBean的规范，上面这个类有3个属性：id,username和hashedPassword属性会对应到select语句中列名。这个的一个JavaBean可以被映射到Result映射到HashMap一样简单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.soyanga.mode1.User"</span>&gt;</span></span><br><span class="line">select id,username,hashedPassword</span><br><span class="line">    form som_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样情况下，MyaBatis会在幕后自动创建一个ResultMap,再基于属性名称映射在javaBean的属性上。如果，列名和属性名没有精确匹配<strong>，可以再select语句中的sql的as来起一个别名（sql中起别名–-SQL特性）来匹配标签</strong>。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.soyanga.mode1.User"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">    user_id  as"id"</span><br><span class="line">    user_name as "userName",</span><br><span class="line">    hashed_password as"hashedPassword"</span><br><span class="line">    form some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ResultMap方式 极大的简化繁琐的配置，resultMap和resultType只能二选一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserResultMap"</span> <span class="attr">type</span>=<span class="string">"com.soynga.model.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"hashedPassword"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-cache-缓存"><a href="#8-cache-缓存" class="headerlink" title="8.cache(缓存)"></a>8.cache(缓存)</h2><h3 id="8-1一级缓存"><a href="#8-1一级缓存" class="headerlink" title="8.1一级缓存"></a>8.1一级缓存</h3><p>MyBatis默认开启了一级缓存，一级缓存是SqlSession层面进行缓存的。即同一个SqlSession，多次调用同一个Mapper和同一个方法的同一参数，只会进行一次数据库查询，然后把数据缓存到缓冲中，以后直接先从缓存中取出数据，不会直接去查数据库</p><p>默认<strong>开启一级缓存</strong>是在Mybatis的配置文件的settings元素中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapper映射的二级缓存默认开启，需要mapper文件设置，以及实体类的支持序列化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span> = <span class="string">"cachaeEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--session级别的一级缓存默认开启--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2二级缓存"><a href="#8-2二级缓存" class="headerlink" title="8.2二级缓存"></a>8.2二级缓存</h3><p>默认情况下Mapper中是没有开启缓存的，除了局部的session缓存，可以增强变现而且处理循环依赖也是必须的，要开启二级缓存，需要在你SQL映射文件中添加一行： 实体类需要实现<strong>Serializable接口支持序列化</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>从cache字面上看就是这样。这个简单语句的效果如下：</p><ul><li><p>映射语句文件中的所有<strong>select语句</strong>将会被缓存</p></li><li><p>映射语句文件中的所有<strong>insert,update和delete语句</strong>会刷新缓存</p></li><li><p>缓存会使用<strong>Least Recently Used</strong>（<strong>LRU,最近最少使用的</strong>）算法来收回</p></li><li><p>根据时间表(比如 <strong>NO Flush interval,没有刷新间隔</strong>)，缓存不会以任何时间顺序来刷新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span>&gt;</span>  //单位是ms</span><br></pre></td></tr></table></figure></li><li><p>缓存会存储<strong>列表集合或对象</strong>(无论查询方式返回什么)的<strong>1024个引用</strong></p></li><li><p>缓存会被视为是<strong>read/write(可读/可写)的缓存</strong>，意味着对象检索不是共享的，而且可以安全地被调用者修改，而不是干扰其他调用者或线程所做的潜在修改。（<strong>两个策略</strong>）</p></li></ul><p><strong>缓存命中率：</strong>Cache Hit Ratio(缓存命中)  关心缓存命中率</p><h3 id="8-3缓存属性"><a href="#8-3缓存属性" class="headerlink" title="8.3缓存属性"></a>8.3缓存属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">redOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>配置了一个FIFO回收策略的缓存。每隔60秒刷新，存储结果对象或列表的512隔引用，而且返回的对象被认为是只读的，因此在不同线程中的调用者之间修改他们会导致冲突。</p><p>eviction（回收策略）：</p><ul><li>LRU  -（默认值）最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO - （先进先出） ：按对象进入缓存的顺序来移除它们。</li><li>SOFT -（软引用）：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK - （弱引用）：更积极地移除基于垃圾回收器状态和弱引用规则地对象。</li></ul><p>flushInerval(刷新间隔)：</p><ul><li>可以被设置为任意正整数，而且他们代表一个合理的毫秒形式的时间段</li><li>默认情况是不设置，也就是没有刷新间隔的，缓存仅仅调用语句时刷新</li></ul><p>size（引用数目）</p><ul><li>可以被设置为任意正整数，要记住你缓存的对象数目和运行环境的可用内存资源数目。</li><li>默认值是1024。</li></ul><p>readOnly（只读）</p><ul><li>可以设置为 true 或 false</li><li>只读缓存会给调用者返回缓存对象的相同实例，<strong>因此这些对象不能被修改，者提供了很重要的性能优势。</strong></li><li>可读写的<strong>缓存会返回缓存对象的拷贝</strong>(<strong>通过序列化)</strong>，这样会慢一点，的但是安全，因此默认是false.</li></ul><h3 id="8-4自定义缓存"><a href="#8-4自定义缓存" class="headerlink" title="8.4自定义缓存"></a>8.4自定义缓存</h3><p>除了使用自定义缓存的方式，还可以通过实现自己的缓存或者为其他第三方方案创建适配器来完全覆盖缓存行为。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"com.soyanga.mybaits.plugin.MyCache"</span></span></span><br></pre></td></tr></table></figure><p>这个实例展示了如何使用一个自定义的缓存实现。type属性指定的类必须实现<code>org.mybatis.cache.Cache</code>接口。这个接口是MyBatis框架中很多复杂接口之一，但是简单实现即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key,Object value)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">haskey</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义实现一个简单的Cache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soyanga.mybatis.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: mybatis-case</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: MyCache 自定义缓存利用MyBatis的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: SOYANGA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2019-04-05 11:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> MyBatis会为，每一个nameSpace配置一个Cache实例 将其中的id属性(nameSpace字符串)作为为cache的一个唯一标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nameSpace中的id 作为cache的标识符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开辟容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer capacity = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置最大缓存数目用户缓存回收策略--（即满即清空）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxSize = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将key和value一一对应起来 内部存储数据结构（线程安全的Map）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Object, Object&gt; cacaheData = <span class="keyword">new</span> ConcurrentHashMap&lt;Object, Object&gt;(capacity);  <span class="comment">//默认开辟1024个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Cache的标识id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The identifier of this cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将key和value一一对应起来  (HashMap/数据库)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Can be any object but usually it is a &#123;<span class="doctag">@link</span> CacheKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The result of a select.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//即满即清空 回收策略</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cacaheData.size() &gt;= <span class="keyword">this</span>.getMaxSize()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">"putObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">this</span>.cacaheData.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存中的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The object stored in the cache.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object value = cacaheData.get(key);</span><br><span class="line">        logger.debug(<span class="string">"getObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    As of 3.3.0 this method is only called during a rollback for any previous value that was missing in the cache.</span></span><br><span class="line"><span class="comment">//    This lets any blocking cache to release the lock that may have previously put on the key.</span></span><br><span class="line"><span class="comment">//    A blocking cache puts a lock when a value is null and releases it when the value is back again.</span></span><br><span class="line"><span class="comment">//    This way other threads will wait for the value to be available instead of hitting the database.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存中的某个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Not used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object value = cacaheData.remove(key);</span><br><span class="line">        logger.debug(<span class="string">"removeObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears this cache instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"clear cache"</span>);</span><br><span class="line">        cacaheData.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并不是核心方法，可以不要去实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并不是核心类，可以不去实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMaxSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSize</span><span class="params">(Integer maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存配置和缓存实例绑定在SQL映射文件（mapper文件）的命名空间（nameSpace）很重要的。因此，所有在相同命名空间的语句,正如绑定的缓存一样。<strong>语句可以修改和缓存交互方式</strong>，<strong>或在语句的基础上使用两种简单的属性来完全排除它们</strong>。默认情况下，语句可以这样来配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"false"</span> <span class="attr">usedCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果想改变默认的缓存行为，可以通过flushCache和useCache属性。比如在一情况下需要通过一个查询语句来刷新新缓存。</p><h3 id="8-5-第三方缓存"><a href="#8-5-第三方缓存" class="headerlink" title="8.5 第三方缓存"></a>8.5 第三方缓存</h3><p>Mybatis的Cache实现比较简单，真正使用二级缓存的时候，都会选择专业的缓存框架。EHcache是在Java领域广泛使用的分布式缓存解决方案框架。通过Mybatis集成EHcache来实现二级缓存。</p><p>memcache k - v 内存缓存</p><p><strong>redis</strong>         k - v  list map set skipList  缓存系统</p><ul><li><p>添加Mybatis集成Ehcache依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybstis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加缓存配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToIdleSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--hour--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToLiveSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--hour--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalHeap"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalDisk"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryStoreEvictionPolicy"</span> <span class="attr">value</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加Ehcache的配置文件（<code>classPath:src/main/resources/ehcache.xml</code>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">java.io.tmpdir  ：默认的temp文件目录</span></span><br><span class="line"><span class="comment">maxElementsInMemory :内存中最大缓存对象数</span></span><br><span class="line"><span class="comment">maxElementsOnDisk :磁盘中最大缓存对象数，若是0表示无穷大</span></span><br><span class="line"><span class="comment">eternal :Element是否永久有效，一但设置了，timeout将不起作用</span></span><br><span class="line"><span class="comment">overflowToDisk ;配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcahche将会Element写到磁盘中</span></span><br><span class="line"><span class="comment">timeToIdleSeconds :设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认属性值是0，也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">timeToLiveSeconds ：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0，也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment">diskExpiryThreadTntervalSeconds :磁盘失效线程运行时间间隔，默认是120秒--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--diskStore path="java.io.tmpdir/mybatis-cache"/存储临时目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/mybatis-cache"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">name</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码实验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_queryScottEmpAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一次打开SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll  FirstResult: &#123;&#125;"</span>, scottEmpList);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//第二次打开SqlSession</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList2 = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll SecondResult: &#123;&#125;"</span>, scottEmpList2);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//第二次打开SqlSession</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList3 = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll ThirResult: &#123;&#125;"</span>, scottEmpList3);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​    返回结果日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.385</span> [main] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using <span class="string">'class org.apache.ibatis.logging.slf4j.Slf4jImpl'</span> adapter.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.723</span> [main] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using <span class="string">'class org.apache.ibatis.logging.slf4j.Slf4jImpl'</span> adapter.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.058</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from ehcache.xml found in the classpath: file:/D:/IDEA%<span class="number">20</span>project/mybatis-<span class="keyword">case</span>/target/classes/ehcache.xml</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.058</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from URL: file:/D:/IDEA%<span class="number">20</span>project/mybatis-<span class="keyword">case</span>/target/classes/ehcache.xml</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.061</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from InputStream</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.090</span> [main] DEBUG net.sf.ehcache.config.BeanHandler - Ignoring ehcache attribute xmlns:xsi</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.090</span> [main] DEBUG net.sf.ehcache.config.BeanHandler - Ignoring ehcache attribute xsi:noNamespaceSchemaLocation</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.092</span> [main] DEBUG net.sf.ehcache.config.DiskStoreConfiguration - Disk Store Path: C:\Users\<span class="number">32183</span>\AppData\Local\Temp\/mybatis-cache</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.114</span> [main] DEBUG net.sf.ehcache.CacheManager - Creating <span class="keyword">new</span> CacheManager with <span class="keyword">default</span> config</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.119</span> [main] DEBUG net.sf.ehcache.util.PropertyUtil - propertiesString is <span class="keyword">null</span>.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.132</span> [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - No CacheManagerEventListenerFactory <span class="class"><span class="keyword">class</span> <span class="title">specified</span>. <span class="title">Skipping</span>...</span></span><br><span class="line">16:33:01.900 [main] DEBUG net.sf.ehcache.Cache - No BootstrapCacheLoaderFactory class specified. Skipping...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.901</span> [main] DEBUG net.sf.ehcache.Cache - CacheWriter factory not configured. Skipping...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.903</span> [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - No CacheExceptionHandlerFactory <span class="class"><span class="keyword">class</span> <span class="title">specified</span>. <span class="title">Skipping</span>...</span></span><br><span class="line">16:33:01.938 [main] DEBUG net.sf.ehcache.store.MemoryStore - Initialized net.sf.ehcache.store.MemoryStore for com.soyanga.mybatis.mapper.ScottEmpMapper</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.951</span> [main] DEBUG net.sf.ehcache.DiskStorePathManager - Using diskstore path C:\Users\<span class="number">32183</span>\AppData\Local\Temp\mybatis-cache</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.951</span> [main] DEBUG net.sf.ehcache.DiskStorePathManager - Holding exclusive lock on C:\Users\<span class="number">32183</span>\AppData\Local\Temp\mybatis-cache\.ehcache-diskstore.lock</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.955</span> [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - Failed to delete file com%<span class="number">002</span>esoyanga%<span class="number">002</span>emybatis%<span class="number">002</span>emapper%<span class="number">002</span>e%<span class="number">0053</span>cott%<span class="number">0045</span>mp%<span class="number">004</span>dapper.index</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.967</span> [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - <span class="function">Matching data file <span class="title">missing</span> <span class="params">(or empty)</span> <span class="keyword">for</span> index file. Deleting index file C:\Users\32183\AppData\Local\Temp\mybatis-cache\com%002esoyanga%002emybatis%002emapper%002e%0053cott%0045mp%004dapper.index</span></span><br><span class="line"><span class="function">16:33:01.968 [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - Failed to delete file com%002esoyanga%002emybatis%002emapper%002e%0053cott%0045mp%004dapper.index</span></span><br><span class="line"><span class="function">16:33:01.977 [main] DEBUG net.sf.ehcache.Cache - Initialised cache: com.soyanga.mybatis.mapper.ScottEmpMapper</span></span><br><span class="line"><span class="function">16:33:01.977 [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - CacheDecoratorFactory not configured <span class="keyword">for</span> defaultCache. Skipping <span class="keyword">for</span> 'com.soyanga.mybatis.mapper.ScottEmpMapper'.</span></span><br><span class="line"><span class="function">16:33:02.017 [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: 0.0</span></span><br><span class="line"><span class="function">16:33:02.023 [main] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Opening JDBC Connection</span></span><br><span class="line"><span class="function">Fri Apr 05 16:33:02 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by <span class="keyword">default</span> <span class="keyword">if</span> explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to '<span class="keyword">false</span>'. You need either to explicitly disable SSL by setting useSSL</span>=<span class="keyword">false</span>, or set useSSL=<span class="keyword">true</span> and provide truststore <span class="keyword">for</span> server certificate verification.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.342</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Created connection <span class="number">98394724</span>.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.344</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - ==&gt;  Preparing: select empno as <span class="string">'empno'</span>, ename as <span class="string">'ename'</span>, job as <span class="string">'job'</span>, mgr as <span class="string">'mgr'</span> , sal as <span class="string">'sal'</span>, comm as <span class="string">'common'</span>, deptno as <span class="string">'deptno'</span>, hiredate as <span class="string">'hiredate'</span> from emp </span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.376</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - ==&gt; Parameters: </span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.413</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - &lt;==      Total: <span class="number">15</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.414</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll  FirstResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.415</span> [main] DEBUG net.sf.ehcache.store.disk.Segment - put added <span class="number">0</span> on heap</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.418</span> [main] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5</span>dd6264]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Returned connection <span class="number">98394724</span> to pool.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: <span class="number">0.5</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll SecondResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.420</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: <span class="number">0.6666666666666666</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.420</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll ThirResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>结论：缓存命中率提高 0 -&gt;0.5–&gt;0.666666所有配置缓存是生效的，且除了第一次以外的其他两次查询没有生成SQL语句是直接在缓存中进行查询的</p></blockquote><p>小Tips：</p><blockquote><p>Ehcache本身不支持Mybatis的Cache接口，MyBatis创建了一个新的接口（org\mybatis\caches\ehcache）来将Ehcache和Mybatis的Cache适配起来   –——<strong>适配器设计模式</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis配置</title>
      <link href="/2019/04/05/Mybatis%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/05/Mybatis%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis的配置"><a href="#Mybatis的配置" class="headerlink" title="Mybatis的配置"></a>Mybatis的配置</h1><p><strong>重点</strong></p><p>==<strong>了解掌握Mybatis的配置</strong>==</p><p>==<strong>掌握Mybatis的environments配置</strong>==</p><h2 id="1-XML配置"><a href="#1-XML配置" class="headerlink" title="1.XML配置"></a>1.XML配置</h2><h3 id="1-1XML结构"><a href="#1-1XML结构" class="headerlink" title="1.1XML结构"></a>1.1XML结构</h3><p>Mybatis的配置文件包含了会影响MyBatis行为的设置(settings)和属性(properties)信息。其中配置文件的顶层结构如下：</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliass 类型别名</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li><strong>environments 环境集合</strong><ul><li>environment 环境<ul><li>transactionManager 事务管理</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseldProvider 数据库厂商标识</li><li><strong>mappers 映射器</strong></li></ul></li></ul><a id="more"></a><h3 id="1-2属性-properties"><a href="#1-2属性-properties" class="headerlink" title="1.2属性(properties )"></a>1.2属性(properties )</h3><p>这些属性可外部配置且课动态替换的，既可以在典型的java属性文件中配置，亦可通过properties元素的子元素来传递。例如:</p><p><em>k-v格式</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config/database.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中属性就可以在整个配置文件中使用，来替换需要动态配置属性值。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中的username和password将会由properties元素中设置的相应值来替换。driver和url属性将会由config.propertied文件中对应得值来替换。这样就为配置提供了</p><p>属性也可以被传递到SqlSessionFactoryBuilder.build()方法中。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader,props);</span><br><span class="line"><span class="comment">//...or...</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader,environment,props);</span><br></pre></td></tr></table></figure><p>如果属性在不只一个地方进行了配置，那么MyBatis将按照下面得顺序来加载。</p><ul><li><p>在properties元素体内指定得属性首先被读取。</p></li><li><p>然后根据properties元素中得resource属性读取类路径下属性文件或根据url属性指定得路径读取属性文件，并覆盖以读取得同名属性。</p></li><li><p>最后读取作为方法参数传递的属性，并覆以读取的同名属性。</p><p><strong>因此，通过方法参数传递的属性具有最高优先级，resource/url属性中指定的配置文件次之，最低优先级的是properties属性中指定的属性。</strong> <em>（最先读取的属性的会被后来读取同名属性的方式覆盖)</em></p></li></ul><p>从Mybatis 3.4.2开始，你可以为占位符指定一个默认值。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果username的key不存在的话就使用ut_user作为username的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username:ut_user&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个特性默认是关闭的。如果你想为占位符指定一个默认值，你应该添加一个指定的属性来开启这个特性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config/database.properties"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性解析启动默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis.parsing.PropertyParser.enable-default-value"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-settings-核心配置"><a href="#1-3-settings-核心配置" class="headerlink" title="1.3 settings(核心配置)"></a>1.3 settings(核心配置)</h3><p>这时Mybatis中极为重要的配置，他们会改变Mybatis的运行时行为。下表描述了设置中各项的意图，默认值等。</p><table><thead><tr><th>设置参数</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>该设置影响所有映射器中配置的缓存全局开关</td><td>true\</td><td>false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置<code>fetchType</code>属性来覆盖该项开关状态</td><td>true\</td><td>false</td><td>false</td></tr><tr><td>aggresslveLazyLoading</td><td>当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需要加载（参考<code>lazyLoafTriggerMethodes</code>）</td><td>true\</td><td>false</td><td>false(true in  &lt;= 3.4.1)</td></tr><tr><td>mulitipleResultSetsEnabled</td><td>是否允许单一语句返回多结果集(需要兼容驱动)</td><td>true\</td><td>false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。不同驱动载这方面会有不同的表现，具体可参考相关驱动文档或者通过测试这两种不同的模式来观察所有驱动的结果</td><td>true\</td><td>false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>允许JDBC支持自动生成主键，需要驱动兼容。如果设备为true则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可以正常工作（比如Derby）</td><td>true\</td><td>false</td><td>false</td></tr><tr><td>autoMappingUnknownColumnBehavior</td><td>- 指定发现自动映射目标未知列(或者位置属性类型)的行为。<code>NONE</code>：不做任何反应   <code>WARNING</code>：输出提醒日志<code>FAILING</code>：映射失败（抛出<code>SqlSessionExection</code>）</td><td>NONE,WARNING,FAILING</td><td>NONE</td></tr><tr><td>autoMappingBehavior</td><td>指定Mybatis应如何自动映射列到字段或者属性。NONE表示取消自动映射；PARTIAL只会自动映射没有定义嵌套结果集映射的结果集。FULL会自动映射任意复杂的结果集(无论是否嵌套)</td><td>NONE，PARTIAL,FULL</td><td>PARTIAL</td></tr><tr><td>defaultExecutorType</td><td>配置默认的执行器，SIMPLE就是普通的执行器；REUSE执行器会重用预处理语句(perpared statements) :BATCH执行器将重用语句并执行批量更新。</td><td>SIMPLE REUSE BATCH</td><td>SIMPLE</td></tr></tbody></table><table><thead><tr><th>localCaheScope</th><th>Mybatis利用本地缓存机制(Local Cache)防止循环引用(circular references)和加速重复嵌套查询。默认值为SESION，这种情况下会缓存一个会话执行的所有查询。若设置为STATEMENT，本地会话仅用在语句执行上，对相同SqlSession的不同调用将不会共享数据</th><th>SESSION  STATEMENT</th><th>SESSION</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>完整配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mutipleResultSetsEnbale"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span> = <span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedkeys"</span> <span class="attr">value</span> = <span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"atuoMapingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defauktStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnable"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreTocamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span>  <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">nme</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMenthods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1配置日志"><a href="#1-3-1配置日志" class="headerlink" title="1.3.1配置日志"></a>1.3.1配置日志</h4><ul><li>日志框架：<a href="https://www.slf4j.org/manual.html" target="_blank" rel="noopener">SLF4j </a>的 Logback实现</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis配置，主要影响mybatis的运行行为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"SLF4j"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>SLE4j的实现类 -&gt;Logback</p><h3 id="1-4-类型别名-typeAliases"><a href="#1-4-类型别名-typeAliases" class="headerlink" title="1.4 类型别名(typeAliases)"></a>1.4 类型别名(typeAliases)</h3><p>类型别名是为java类型设置一个短的名字。它只和XML配置有关，存在的意义仅在于用来减少类的完全限定名。</p><h4 id="1-4-1默认内建类型别名"><a href="#1-4-1默认内建类型别名" class="headerlink" title="1.4.1默认内建类型别名"></a>1.4.1默认内建类型别名</h4><p>Mybatis框架已经为许多常见的java类型内建了相应的类型别名。他们都是大小写不敏感的，需要注意的是由基本类型名称重复导致的特殊处理。</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr></tbody></table><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr></tbody></table><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h4 id="1-4-2自定义类型别名"><a href="#1-4-2自定义类型别名" class="headerlink" title="1.4.2自定义类型别名"></a>1.4.2自定义类型别名</h4><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ScottGroup"</span> <span class="attr">type</span>=<span class="string">"com.soyanga.mybatis.entity.ScottGroup"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ScottInfo"</span> <span class="attr">type</span>=<span class="string">"com.soyanga.mybatis.entity.ScottInfo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ScottShare"</span> <span class="attr">type</span>=<span class="string">"com.soyanga.mybatis.entity.ScottShare"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样的配置时，ScottGroup可以用在任何使用com.soyanga.mybatis.emtity.ScottGroup的地方。也可以指定一个包名，MyBatis会在包名下搜索需要的Java Bean,同时默认使用类名小写作为别名，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置类的别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定一个包名，别名默认为类名的全小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.soyanga.mybatis.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：由于IDE工具的智能化，定义类型的别名使用的频率较低</p></blockquote><h3 id="1-5-类型处理器-typeHandlers"><a href="#1-5-类型处理器-typeHandlers" class="headerlink" title="1.5 类型处理器(typeHandlers)"></a>1.5 类型处理器(typeHandlers)</h3><p>无论是MyBatis在预处理语句(PreparedStatement)中<strong>设置一个参数时，还是从结果集中取出一个值时</strong>，都会用类型处理器将获取的值以适合的方式转换成Java类型。</p><h4 id="1-5-1默认的类型处理器"><a href="#1-5-1默认的类型处理器" class="headerlink" title="1.5.1默认的类型处理器"></a>1.5.1默认的类型处理器</h4><p>Mybatis框架默认提供了多种类型的处理器，基本涵盖了java中使用到的各种数据类型。</p><h4 id="1-5-2-自定义类型处理器"><a href="#1-5-2-自定义类型处理器" class="headerlink" title="1.5.2 自定义类型处理器"></a>1.5.2 自定义类型处理器</h4><p>Mybatis为用户提供了重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p><p>具体做法：实现 <code>org.apache.ibatis.type.TypeHandler</code>接口，或继承一个很便利的类<code>org.apache.ibatis.type.BaseTypeHandler</code>,然后可以选择性的将它映射到一个JDBC类型。</p><p>实现示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExampleTypeHandler.java</span></span><br><span class="line"><span class="meta">@MappedJdbcTypes</span>(jdbctype.VARCHAR)</span><br><span class="line"><span class="meta">@MApperTypes</span>(value = String.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setString(i, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getString(columnName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getString(columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cs.getString(columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的MyStringHander会覆盖已经存在的处理java的String类型属性和VARCHAR参数及结果的类型处理器。</p><p>MyBatis不会窥探数据库元信息来决定使用那种类型，所以你必须在参数和结果映射中指明那是VARCHAR类型的字段，以使其能够绑定到正确的类型处理器上。这是因为：Mybatis直到语句被执行才清除数据类型</p><p>通过类型处理器的泛型，MyBatis可以得知该类型处理器的处理java类型，同时可以通过修改配置或者添加注解的方式来改变处理器的处理类型</p><ul><li><p>第一种：在类型处理器的配置元素（typeHandler element）上增加一个javaType属性（比如：javaType=“Stirng”）和jdbcType属性（比如： jdbcType = “VARCHAR”）;</p></li><li><p>第二种：在类型处理器的类上(TypeHandler class)增加@MappedTyped注解来指定与其关联的java类型列表；@MappedJdbcTypes注解来只当与其关联的JDBC类型。</p><blockquote><p>如果在配置中指定了javaTyped或者jdbcType属性，则注解方式将被忽略</p><p>建议：选择一种方式来配置类型处理器（配置或者注解）</p></blockquote></li><li><p>配置类型处理器</p><ul><li><p>第一种：配置处理器类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.soyanga.mybatis.plugin.MyStringTypeHandler"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">javaType</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：自动检索（autodiscovery）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个类型处理器的加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.soyanga.mybatis.plugin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用自动检索配置功能的时候，只能通过注解的方式来指定JDBC和Java类型</p></blockquote></li></ul></li></ul><h4 id="1-5-3泛型类型处理器（了解）"><a href="#1-5-3泛型类型处理器（了解）" class="headerlink" title="1.5.3泛型类型处理器（了解）"></a>1.5.3泛型类型处理器（了解）</h4><p>用户可以创建一个泛型类型处理器，它可以处理多于一个类。为了达到此目的，需要增加一个接收类作为参数的构造器，这样在构造一个类型处理器的时候Mybatis就会传入一个具体的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GenericTypeHandler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">MyObject</span>&gt; <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">    <span class="title">BaseTypeHandler</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;E&gt; type;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tyep = <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Type argument count be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EnumTypeHandler</code>和<code>EnumOrdinalTypeHandler</code>都是泛型类型处理器(genericTypeHandlers)</p><h3 id="1-6对象工厂-ObjectFactory"><a href="#1-6对象工厂-ObjectFactory" class="headerlink" title="1.6对象工厂(ObjectFactory)"></a>1.6对象工厂(ObjectFactory)</h3><p>MyBatis每次<strong>创建结果对象</strong>的新实例时，他都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅时实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实现实例化。如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。比如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExampleObjectFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleObjectFactory</span> <span class="keyword">extends</span> <span class="title">DefaultObjectFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Class type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.create(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *type：对象类型</span></span><br><span class="line"><span class="comment">    *constructorArgTypes：参数类型集合</span></span><br><span class="line"><span class="comment">    *construstorArgs：参数集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Class type,List&lt;Class&gt; constructorArgTypes,List&lt;Object&gt; construstorArgs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.create(type,constructorArgTypes,constructorArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *配置元素的属性包装成Properties对象，再转换为对象的属性</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setProperties(properties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>&lt;T&gt; bollean <span class="title">isCollection</span><span class="params">(Class&lt;T&gt; type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collection.class.isAssignableFrom(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis-config.xml--&gt;</span><br><span class="line">    &lt;!--对象工厂-对象的构建--&gt;</span><br><span class="line">    &lt;!--&lt;objectFactory type=<span class="string">"org.apache.ibatis.reflection.factory.DefaultObjectFactory"</span>&gt;--&gt;</span><br><span class="line">    &lt;objectFactory type=<span class="string">"org.mybatis.example.ExampleObjectFactory"</span>&gt;</span><br><span class="line">        &lt;!--name属性名 value属性个数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"abc"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"def"</span> value=<span class="string">"2"</span>/&gt;</span><br><span class="line">    &lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure><p>ObjectFactory接口很简单，它包含两个创建用的方法，一个是处理默认构造方法的，另外一个是处理带参数的构造方法的。最后setProperties方法可以被用来配置ObjectFactory 在初始化你的ObjectFactory实例后，ObjectFactory元素中定义属性会被传递给setProperties方法。</p><h3 id="1-7插件-plugins"><a href="#1-7插件-plugins" class="headerlink" title="1.7插件(plugins)"></a>1.7插件(plugins)</h3><p>MyBatis允许你在已映射语句执行过程中得某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截得方法调用包括：</p><ul><li><code>statementHandler</code>的<code>perpare,parameterize,batch,update,query</code>方法 创建sql命令</li><li><code>ParamentHandler</code>的<code>getParameterObject，setParameters</code>方法 传入参数处理</li><li><code>Executor</code>的<code>update,query,flushStatements,commit,rollback,getTransaction,close,isClosed</code>方法  执行器</li><li><code>ResuitSetHandler</code>的<code>handleResultSets,handleOutputParameters</code>方法 结果处理</li></ul><p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看MyBatis的发行包中的源码。假设你想做的不仅仅是监控方法的调用，那么你应该很好的了解正在重写的方法的行为。因为如果在试图修改或者重写已有方法的行为的时候，你很可能在破坏MyBatis的核心模块。这些都是很底层的类和方法，所以<strong>使用插件的时候要特别的当心。</strong></p><p>通过MyBatis提供的强大机制，使用插件是非常简单的，只需实现Interceptor接口，并指定了想要拦截的方法签名即可。</p><blockquote><p>拦截器从一些列的MyBatis的执行流程中修改某些流程。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExamplePlugin.java</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(</span><br><span class="line">type = Executor.class,</span><br><span class="line">method = <span class="string">"update"</span>,</span><br><span class="line">args = &#123;MappedStatement.class, Object.class&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamplePlugin</span> <span class="title">implement</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span><span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> object <span class="title">plugin</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=<span class="string">"org.mybatis.example.ExamplePlugin"</span>&gt;</span><br><span class="line">    &lt;property name = <span class="string">"somProperty"</span> value=<span class="string">"100"</span>/&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br></pre></td></tr></table></figure><p>上面的插件将会拦截在Executor实例中所有的update方法调用，这理的Executor是负责执行底层映射语句的内部对象。</p><h3 id="1-7配置环境-environments"><a href="#1-7配置环境-environments" class="headerlink" title="1.7配置环境(environments)"></a>1.7配置环境(environments)</h3><p>MyBatis可以配置成适应多种环境，这种机制有助于将SQL映射应用于多种数据库中，现实情况下有多种理由需要这么做。例如：开发，测试和生产环境需要有不同的配置；或者共享相同Schema的多个生产数据库使用相同的SQL映射。</p><blockquote><p>尽管可以配置多个环境，每个SqlSessionFactory实例只能选择其一，<strong>每个数据库对应一个SqlSessionFactory实例</strong></p></blockquote><p>为了指定创建哪种环境，只要将它作为可选参数传递给SqlSessionFactoryBuilder即可。可以接受环境配置的两个方法签名是：</p><p>方法参数优先级是最高的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlSexxionFactory factory  = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader,environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader,environment,properties);</span><br></pre></td></tr></table></figure><p>如果忽略了环境参数，那么默认环境将会被加载，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlSexxionFactory factory  = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader,properties);</span><br></pre></td></tr></table></figure><p>环境元素定义了如何配置环境：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span>  //默认的环境配置</span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver:com.mysql.jdbc.Driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/scott"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username:root&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password:123456789&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span> //事务管理</span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver:com.mysql.jdbc.Driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/scott"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username:root&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password:123456789&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里的关键点：</p><ul><li>默认的环境ID（比如：default=“development”）</li><li>每个environment元素定义的环境ID(比如：id = “development”)</li><li>事务管理器配置（比如：type=“JDBC”）</li><li>数据源的配置（比如：type=“POOLED”）</li></ul><p>默认的环境和环境ID是可以随意命名的，只要保证默认环境要匹配其中一个环境ID。</p><h4 id="1-7-1事务管理"><a href="#1-7-1事务管理" class="headerlink" title="1.7.1事务管理"></a>1.7.1事务管理</h4><p>在MyBatis中两种类型的事务管理器（也就是 type=“[JDBC | MANAGED]”）:</p><ul><li><p>JDBC-这个配置就是直接使用JDBC的提交回滚设置，它<strong>依赖从数据源得到的连接</strong>来管理事务作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>); <span class="comment">//true是自动提交  反之需要自己提交</span></span><br></pre></td></tr></table></figure></li><li><p>MANAGED-这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE应用服务器的上下文tomcat,jetty,jboss），默认情况下会关闭连接，然后一些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为，例如：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"closeConnection"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用Spring+MyBatis，则没有必要配置事务管理器，因为Spring模块会使用自带的管理器来覆盖前面的配置</p></blockquote><h4 id="1-7-2数据源（dataSource）"><a href="#1-7-2数据源（dataSource）" class="headerlink" title="1.7.2数据源（dataSource）"></a>1.7.2数据源（dataSource）</h4><p>dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源，许多MyBatis的应用程序将会按示例子中来配置数据源。然而它并不是必须的。要知道为了方便使用延迟加载，数据源才是必须的。</p><p>MyBatis有三种呢见数据源类型 (也就是 type = “[<strong>UNPOOLED|POOLED|JNDI</strong>]”):</p><ul><li><p><strong>UNPOOLED</strong>:这个数据源的是实现<em>只在每次被请求时打开 和 关闭连接</em>。虽然有一点慢，它对在及时可用连接方面没有性能要求的简单应用程序是一个很好的选择，不同的数据库在这方面表现也是不一样的，所以对某些数据库来说使用连接池并不重要，这个配置也是理想的。UNPOOLED类型的数据源仅仅需要配置以下5种属性：</p><p>| 属性                             | 描述                                                         |<br>| ——————————– | ———————————————————— |<br>| driver                           | 这是JDBC驱动的java类的完全限定名（并不是JDBC驱动中可能包含的数据源类型） |<br>| url                              | 这是数据库的JDBC URL地址                                     |<br>| username                         | 登陆数据库的用户名                                           |<br>| password                         | 登陆数据库的密码                                             |<br>| defaultTransactionIsolationLevel | 默认的连接事务隔离级别                                       |<br>| driver.*                         | 作为可选项，可以传递属性给数据库驱动，例如：driver.encoding=UTF8 |</p><p>这将通过DriverManager.getConnection(url,driverProperties)方法传递值为UTF8的encoding属性给数据库驱动。</p></li></ul><p><strong>POOLED</strong>-这种数据源的实现利用“池”的概念将JDBC连接对象组织起来，避免了创建新的连接实例所必须的初始化和认证时间。这是一种使得并发<strong>Web应用快速响应请求的流行处理方式</strong>。</p><p>除了上述提到UNPOOLED下的属性外，会有更多属性来配置POOLED的数据源：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>poolMaximumActiveConnections</td><td>在任意时间可以存在的活动（也就是正在用）连接数量，默认值：10</td></tr><tr><td>poolMaximumldleConnections</td><td>任意时间可能存在的空闲连接数</td></tr><tr><td>poolMaximumCheckoutTime</td><td>在被强制返回之前，池中连接被检出（out）时间，默认值:20000毫秒</td></tr><tr><td>poolTimeToWait</td><td>这是一个底层设置，如果获取连接花费很长时间，他会给连接池打印状态日志，并再次尝试获取一个连接（避免误配置的情况下一致安静的失败），默认值：20000毫秒</td></tr><tr><td>poolMaximumLocalBadConnectionTolerance</td><td>这是一个关于坏链接容忍度的底层设置，对于每一个尝试从缓存池获取连接的线程，一个线程获取到的是一个坏链接，那么数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过poolMaximumldleConnections与poolMaximumLocalBadConnectionTolerance之和。默认值：3（since:3.4.5）</td></tr><tr><td>pollPingQuery</td><td>发送到数据库的侦测查询，用来检验连接处在正常工作秩序中并接受请求是“NO PING QUERY SET”,这回导致多个数据驱动失败时带有一个恰当的错误信息</td></tr><tr><td>pollPingEnabled</td><td>是否启用侦测查询。若开启，也必须使用可执行的SQL语句设置pollPingQuery（最好是一个非常快的SQL）默认值true</td></tr><tr><td>poolPingConnectionsNotUsedFor</td><td>配置pollPingQuery的使用频度，这可以设置成具体的数据库连接超时时间，避免不必要的侦测，默认值为0（即所有连接时刻被侦测-当然仅当pollPingEnabled为true时使用）</td></tr></tbody></table><p><strong>JNDI(Java Naming and Directory Interface)</strong> - 这个数据源的实现是为了能在EJB或应用服务器这类容器中使用，容器可以集中或在<strong>外部配置数据源</strong>，然后放置一个JNDI上下文的引用。这种数据源配置只需要两个属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>initial_context</td><td>这个属性用来在 initialContext中寻找上下文（即，initialContext.lookup(initial_context))。这是个可选属性，如果忽略，那么data_source属性将会直接从initialContext中寻找</td></tr><tr><td>data_source</td><td>z这是引用数据源实例位置的上下文的路径。提供了initial_context配置时会在其返回的上下文中进行查找，没有提供时则直接在initialContext中查找</td></tr><tr><td>env.*</td><td>h和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文，例如：env.encoding=UTF8</td></tr></tbody></table><h3 id="1-8映射器-mappers"><a href="#1-8映射器-mappers" class="headerlink" title="1.8映射器(mappers)"></a>1.8映射器(mappers)</h3><p>MyBatis的行为已经由上述元素配置完了，我们现在就要定义SQL映射语句了。但是首先我们需要告诉MyBatis到哪里区找这些语句。Java在自动查找这个方面没有提供一个很好的方法，最佳方式是告诉MyBatis到哪里区找映射文件。你可以使用想到一类路径的资源引用，或完全限定资源定位符（包括file:///的URL），或类名和包名等。例如：</p><ul><li><p>加载类路径下的映射器配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 classpath相对资源 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/ScottGroupMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载全路径下的映射器配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用url路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file"</span>///<span class="attr">var</span>/<span class="attr">mappers</span>/<span class="attr">ScottGroupMapper.xml</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载指定包下的Mapper接口类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册一个包下的所有mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">com.soyanga.mybatis.mapper</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScottGroupMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(value = &#123;<span class="string">"select * from dept;"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;ScottGroup&gt; <span class="title">query</span><span class="params">(@Param(<span class="string">"id"</span>)</span> String id)</span>; <span class="comment">//参数注解</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertScottGroup</span><span class="params">(ScottGroup scottGroup)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解由局限性：虽然便利但是，不能完全支持MyBatis配置。且破坏了SQL的 隔离/集中处理。</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis初始</title>
      <link href="/2019/04/05/Mybatis%E5%88%9D%E5%A7%8B/"/>
      <url>/2019/04/05/Mybatis%E5%88%9D%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis-简介和开始"><a href="#Mybatis-简介和开始" class="headerlink" title="Mybatis 简介和开始"></a>Mybatis 简介和开始</h1><p><strong>重点</strong></p><p>==了解Mybatis框架==  </p><p>==Mybatis快速入门== </p><h1 id="1-Mybatis是什么？"><a href="#1-Mybatis是什么？" class="headerlink" title="1.Mybatis是什么？"></a>1.Mybatis是什么？</h1><p><img src="/2019/04/05/Mybatis初始/Mybatis图标.png" alt="Mybatis图标"></p><p>MyBatis(3.X以前的版本叫ibatis)</p><a id="more"></a><p>==<strong>支持自定义SQL,存储过程和高级映射的持久化框架</strong>==</p><p>MyBatis<strong>几乎消除了所有的JDBC代码</strong>，也基本<strong>不需要手工去设置参数和获取检索结果</strong>。Mybatis能够使用<strong>简单的XML格式或者注解进来配置</strong>，能够映射基本数据结构，Map接口和POJOs（普通java对象）到数据库中的记录。</p><p><strong>JDBC</strong>——&gt;  将面向对象的语句转化问面向过程的SQL语句（我们只关注SQL语句的结果）。    </p><p>​    &lt;——   将对象转化为SQL语句存储在数据库中持久化处理。</p><p><strong>阻抗不匹配</strong>：持久化存储数据所采用的数据模型（无论是文件系统或者数据库管理系统）在编写程序时跟我们采用的数据模型有差异，就称为阻抗不匹配。</p><p>我们通过JDBC转化将<strong>数据库中的数据模型</strong>与<strong>java中的数据模型进行转化</strong>。</p><p>持久化框架：事务的ACID特性 D：持久化 A：原子性 C：一致性  I：隔离性</p><p><strong>ORM框架（Object Relational Mapping）</strong>采用<strong>元数据</strong>来描述对象–关系映射细节，元数据一般采用XML格式，并且存放在专门的对象映射文件中。</p><p>[Hibernate,iBATIS,MyBatis,EclipseLink,JFinal。]</p><p>采用的<code>Mybatis-3.4.5</code> </p><p>Mybatis框架时JavaEE是最容易掌握的框架。</p><h3 id="1-1-Mybatis-VS-JDBC-SQL"><a href="#1-1-Mybatis-VS-JDBC-SQL" class="headerlink" title="1.1 Mybatis VS JDBC SQL"></a>1.1 Mybatis VS JDBC SQL</h3><table><thead><tr><th>对比</th><th>Mybatis</th><th>JDBC SQL</th></tr></thead><tbody><tr><td>连接</td><td>托管</td><td>编码 Connection connection = DriverManager.getConnection(url)</td></tr><tr><td>SQL</td><td>隔离/集中</td><td>混合/分散  java中有SQL语句</td></tr><tr><td>缓存</td><td>两级缓存</td><td>不支持</td></tr><tr><td>结果映射</td><td>自动映射</td><td>硬编码</td></tr><tr><td>维护性</td><td>高</td><td>低</td></tr></tbody></table><p>缓存：提高访问效率</p><p>JDBC的执行流程</p><ol><li>加载数据库驱动建立连接/获得数据源  建立连接</li><li>创建操作命名</li><li>执行SQL语句–-&gt;返回结果集</li><li>对返回的结果集进行处理（sql–&gt;Java对象）</li><li>资源回收（关闭结果集，关闭操作命令，关闭连接）</li></ol><ul><li><p>加在数据库驱动建立连接/获得数据源建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/memo?</span></span><br><span class="line"><span class="string">user = root &amp; password = root &amp; useUnicode = true &amp; characterEncoding = "</span>UTF-<span class="number">8</span><span class="string">");</span></span><br></pre></td></tr></table></figure><blockquote><p>//MySQL数据库连接得url参数格式如下：</p><p>jdbc:mysql://服务器地址:端口/数据库名称？参数名 = 参数值</p></blockquote></li><li><p>创建操作命令(statement)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement statemnt = connection.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = statement.executeQuery(</span><br><span class="line">  <span class="string">"select id,group_id,title,content,is_protected, background,is_remind,remind_time,created_time,modify_time from memo_info"</span>);</span><br></pre></td></tr></table></figure></li><li><p>处理结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;    </span><br><span class="line">    <span class="keyword">int</span> id = resultSet.getInt(<span class="string">"id"</span>);    </span><br><span class="line">    String title = resultSet.getString(<span class="string">"title"</span>);    </span><br><span class="line">    String content = resultSet.getString(<span class="string">"content"</span>);    </span><br><span class="line">    Date createTime = resultSet.getDate(<span class="string">"created_time"</span>);    System.out.println(String.format(<span class="string">"Memo: id=%d, title=%s, content=%s, createTime=%s"</span>, id, title, content, createTime.toString())); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>释放资源（关闭结果集，命令，连接）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭结果集</span></span><br><span class="line"><span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;    </span><br><span class="line"><span class="keyword">try</span> &#123;        </span><br><span class="line">resultSet.close();    </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;        </span><br><span class="line">e.printStackTrace();    </span><br><span class="line">&#125; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//关闭命令</span></span><br><span class="line"><span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;    </span><br><span class="line"><span class="keyword">try</span> &#123;        </span><br><span class="line">statement.close();    </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;        </span><br><span class="line">e.printStackTrace();    </span><br><span class="line">&#125; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//关闭连接命令</span></span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;    </span><br><span class="line"><span class="keyword">try</span> &#123;        </span><br><span class="line">connection.close();    </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;        </span><br><span class="line">e.printStackTrace();    </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-开始使用Mybatis"><a href="#2-开始使用Mybatis" class="headerlink" title="2.开始使用Mybatis"></a>2.开始使用Mybatis</h2><h3 id="2-1准备工作"><a href="#2-1准备工作" class="headerlink" title="2.1准备工作"></a>2.1准备工作</h3><ul><li>IDEA安装Mybatis插件（Free Mybatis Plugin）<ul><li>IDEA Settings-&gt;Plugins-&gt;Browse repositorites-&gt;Free Mybatis Plugin</li><li>安装完成之后重启IDEA</li></ul></li><li>准备mybatis项目<ul><li>创建一个Maven的Application项目</li><li>pom.xml中添加Mybatis依赖 org.mybatis:mybatis:3.4.5</li><li>pom.xml中添加JDBC驱动依赖,如:mysql:mysql-connector-java:5.1.43</li></ul></li><li>准备数据库<ul><li>创建数据库</li><li>创建数据库表</li></ul></li></ul><h3 id="2-2构建SqlSessionFactory"><a href="#2-2构建SqlSessionFactory" class="headerlink" title="2.2构建SqlSessionFactory"></a>2.2构建SqlSessionFactory</h3><h4 id="2-1-1XML构建-重点"><a href="#2-1-1XML构建-重点" class="headerlink" title="2.1.1XML构建(重点)"></a>2.1.1XML构建(<strong>重点</strong>)</h4><p>每个基于Mybatis的应用都是以一个SqlSessionFactory的实例为中心的。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder获得。而SqlSessionFactoryBuilder则可以从XML配置文件或者一个预先定制的Configuration的实例构建出SqlSessionFactory的实例。</p><ul><li>创建Mybatis配置文件(<code>mybatis-config.xml</code>)归档到<code>src/main/resources/mybatis-comfig.xml</code>)</li><li>利用Resouce类来获取xml文件名解析创建成一个SqlSessionFactory实例</li></ul><h4 id="2-1-2编码构建（了解）"><a href="#2-1-2编码构建（了解）" class="headerlink" title="2.1.2编码构建（了解）"></a>2.1.2编码构建（了解）</h4><p>如果你愿意直接从java程序而不是XML文件中创建configuration,或者创建你自己的configuraton构建器，MyBatis也提供了完整的配置类，提供所有和XML文件相同功能的配置项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DataSource dataSource = <span class="keyword">new</span> PooledDataSource();<span class="comment">//mybatis提供的数据库连接池</span></span><br><span class="line">TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">Environment environment = <span class="keyword">new</span> Environment(<span class="string">"development"</span>, transactionFactory, dataSource);</span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">configuration.addMapper(MemoGroupMapper.clss);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br></pre></td></tr></table></figure><p>configuration添加了一个映射器类（mapper class)。映射器类是java类，他们包含SQL映射语句的注解，从而避免了XML文件的依赖，不过由于java注解的一些限制加之某些MyBatis映射的复杂性，XML映射对于大多数高级映射（比如：嵌套Join映射）来说仍然是必须的。有鉴于此，如果存在一个对等的XML配置文件的话。MyBatis会自动查找并加载它（这种情况下，MemoGroupMapper.xml将会基于类路径和MemGruopMapper.class的类名被加载进来）。</p><h2 id="2-2使用SqlSession"><a href="#2-2使用SqlSession" class="headerlink" title="2.2使用SqlSession"></a>2.2使用SqlSession</h2><p>我们可以通过SqlSession的实例。SqlSession完全包含了面向数据库执行SQL命令所需的所有方法，你可以通过SqlSession实例来执行已经映射的SQL语句。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.getMapper(.class);</span><br></pre></td></tr></table></figure><p>基于Mybatis项目</p><ol><li>创建Maven项目<ol><li>添加依赖 mybatis org.mybatis:3.4.5</li><li>添加依赖 mysql驱动 mysql:mysql-connector-java:5.1.43驱动</li><li>准备数据库</li></ol></li><li>创建mybatis配置<ol><li>sec/main/resources  -&gt; mybatis-config.xml</li><li>配置文件中需要配置数据库信息 driver url username password</li></ol></li><li>编码<ol><li>entity 包 实体类 -&gt; 数据库表</li><li>mapper 包 mapper接口 -&gt; 数据库操作的方法</li><li>src/main/resources/mapper 创建mapper.xml映射文件 定义信息</li><li>编码 创建SqlSessionFactory SqlSession Mapper Interface</li><li>测试一下代码</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树基础(上)</title>
      <link href="/2019/04/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80(%E4%B8%8A)/"/>
      <url>/2019/04/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="23-二叉树基础-上-：什么样的二叉树适合用数组来存储？"><a href="#23-二叉树基础-上-：什么样的二叉树适合用数组来存储？" class="headerlink" title="[23]二叉树基础(上)：什么样的二叉树适合用数组来存储？"></a>[23]二叉树基础(上)：什么样的二叉树适合用数组来存储？</h1><p>二叉树有哪些存储方式，什么样的二叉树适合用数组来存储？</p><p>树的<strong>高度(Height)、深度(Depth)、层(Level)</strong>。</p><blockquote><ul><li>节点高度 = 节点到叶子节点的最长路径(<strong>边数</strong>)</li><li>节点深度 = 根节点到这个节点所经的边的个数</li><li>节点层数 = 节点深度 + 1</li><li>树的高度 = 根节点的高度</li></ul></blockquote><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\二叉树节点深度，高度，层数图.jpg" alt="二叉树节点深度，高度，层数图"></p><p>记忆小Tips：</p><p><strong>高度</strong>是从下往上度量，比如我们要度量第10层楼的高度，起点都是地面。所以，树这种这种数据结构高度也一样，从树的最底层开始算，并且计数的起点是0。</p><p><strong>“深度”</strong>这个概念在生活中是从上往下度量，比如水中鱼的深度，是从水平面开始度量的。所以，树这种数据结构的深度也是类似，从根节点开始度量，并且计数起点也是0。</p><p><strong>“层数”</strong>跟深度得到计算类似，不过，计数起点是1，也就是说根节点的位于第1层。</p><a id="more"></a><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><h4 id="二叉树的结点（孩子表示法）-二插链"><a href="#二叉树的结点（孩子表示法）-二插链" class="headerlink" title="二叉树的结点（孩子表示法）-二插链"></a>二叉树的结点（孩子表示法）-二插链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T data;<span class="comment">//结点数据</span></span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; lchild;<span class="comment">//左孩子</span></span><br><span class="line">        <span class="keyword">private</span> Node&lt;T&gt; rchild;<span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getLchild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lchild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node&lt;T&gt; <span class="title">getRchild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rchild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            String lchildInfo = lchild == <span class="keyword">null</span> ? <span class="keyword">null</span> : lchild.getData().toString();</span><br><span class="line">            String rchildInfo = rchild == <span class="keyword">null</span> ? <span class="keyword">null</span> : rchild.getData().toString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                    <span class="string">"data="</span> + data +</span><br><span class="line">                    <span class="string">", lchild="</span> + lchildInfo +</span><br><span class="line">                    <span class="string">", rchild="</span> + rchildInfo +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="树的高度（从下到上）-树的深度（从上到下）-从0开始"><a href="#树的高度（从下到上）-树的深度（从上到下）-从0开始" class="headerlink" title="树的高度（从下到上）/树的深度（从上到下）-从0开始"></a>树的高度（从下到上）/树的深度（从上到下）-从0开始</h4><p>递归左树，递归右树 谁大树的深度就是谁。</p><p>递归递推公式： 深度 = 左树深度&gt;右树深度？ 左树深度+1 ：右树深度+1；</p><p>递归停止条件：node  = null    return 0;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回指定结点的深度</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 树的深度</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthForSubTree</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//从上到下递归，从下到上分会深度，</span></span><br><span class="line">      <span class="comment">// 下面就是返回某结点两个孩子中深度最大的那个，加1继续返回到最上一层。</span></span><br><span class="line">      <span class="keyword">int</span> lDepth = depthForSubTree(node.lchild);</span><br><span class="line">      <span class="keyword">int</span> rDepth = depthForSubTree(node.rchild);</span><br><span class="line">      <span class="keyword">return</span> lDepth &gt; rDepth ? lDepth + <span class="number">1</span> : rDepth + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="树的度"><a href="#树的度" class="headerlink" title="树的度"></a>树的度</h4><p>树的度是指的是树的最大子节点的个数，二叉树中树的度有3种 0（只有根结点）， 1（斜树） ，2(普通二叉树)  </p><p>斜树分为左斜树，右斜树（斜树深度为斜树结点个数）  -相当于一个链表。</p><p><strong>由于斜树的判断方式包含根节点，所以先判断是否树的度为0，其次再判断斜树，和其他。</strong></p><p>既然要求树的深度，这里接着说。求树的深度也用了<strong>递归算法——从上往下递归</strong>，从最后一层往根结点返回。如果某个结点为空，当然深度返回0；否则递归查找其左右子树，直到最后一层，开始返回。返回当前结点左右子树的深度值较大者并<strong>加上1</strong>，<strong>这里加上1的意义是因为函数返回对应着返回到上一层中的父结点了，深度自然增加1。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看树的度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 树的度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">degree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无非有三种情况</span></span><br><span class="line">    <span class="comment">//1.只有一个根节点，度为0</span></span><br><span class="line">    <span class="comment">//斜树 度为1</span></span><br><span class="line">    <span class="comment">//其余情况是 2</span></span><br><span class="line">    <span class="keyword">if</span> (root.lchild == <span class="keyword">null</span> &amp;&amp; root.rchild == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//斜树的结点个数等于其深度，包括了只有根节点的情况，所以上面的条件要先判断跟结点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodesNum == depth()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h2><p><strong>满二叉树，完全二叉树</strong></p><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\二叉树.jpg" alt="二叉树"></p><p>1.普通二叉树</p><p>2.满二叉树</p><p>除了叶子节外，每个节点都有左右两个子节点</p><p>3.完全二叉树</p><p>最后一层的叶子节点靠左排列，且除去最后一层就是一颗满二叉树。</p><h2 id="存储树的方式"><a href="#存储树的方式" class="headerlink" title="存储树的方式"></a>存储树的方式</h2><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\链式存储二叉树.jpg" alt="链式存储二叉树"></p><p>每个节点都存储了三个元素（数据data 左节点（指针） 右节点（指针）)</p><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><p>基于数组存储方式，我们把</p><p><strong>根节点存储在下标i = 1的位置</strong></p><p><strong>左子节点存储在2*i=2的位置</strong></p><p><strong>右子节点存储在2*i+1=3的位置</strong></p><p><strong>以此类推</strong></p><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\顺序存储二叉树.jpg" alt="顺序存储二叉树"></p><p>总结：</p><p>如果x存储在数组中下标为i的位置，下标为2<em>i的位置存储的就是左子节点，下标为2\</em>i+1的位置存储的就是右子节点。</p><p>反过来，下标为i/2的位置存储就是它的父节点。通过这种形式，我们只要知道根节点存储的位置(一般情况下为了方便计算子节点，根节点会存储在下标为1的位置)，这样我们通过下标计算，把整个树组织起来。</p><p>假如不是一颗完全二叉树，则就会浪费大量的存储空间(数组)，如下：</p><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\非完全二叉树顺序存储.jpg" alt="非完全二叉树顺序存储"></p><p>如果某棵树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存方式并不需要像链式存储那样，要存储额外的左右节点指针。这也是为什么完全二叉树会单独作为一类树的统称。也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p><p>堆其实就是一颗完全二叉树，最常用的存储方式就是数组。</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历的遍历方式有三种</p><h3 id="前序遍历（自左右）"><a href="#前序遍历（自左右）" class="headerlink" title="前序遍历（自左右）"></a>前序遍历（自左右）</h3><ul><li>前序遍历是指，对于树中的任意节点来说，<strong>当前结点不为空就先打印这个节点，然后再打印它得到左子树，最后打印它的右子树，为空则，返回父节点，继续开始处理父节点的右子树。</strong></li></ul><p><img src="/2019/04/05/二叉树基础(上)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552204034380.png" alt="1552204034380"></p><h4 id="代码分析-递归"><a href="#代码分析-递归" class="headerlink" title="代码分析(递归)"></a>代码分析(递归)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前序遍历--递归(自 左 右)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">    preOrder(node.lchild);</span><br><span class="line">    preOrder(node.rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析（非递归）"><a href="#代码分析（非递归）" class="headerlink" title="代码分析（非递归）"></a>代码分析（非递归）</h4><p>递归变非递归就用循环或者栈模拟函数栈帧出栈入栈</p><p>入栈就打印（自 左 右）</p><p><strong>每访问一个结点，若不为空，存入栈，并立即打印。然后不断深入左子树，直到为空，此时返回到父结点（对应的栈操作是出栈），接着处理它的右子树。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前序遍历 --非递归</span></span><br><span class="line"><span class="comment"> 用栈模拟递归调用的过程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder2</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line"><span class="comment">//用栈保存已经访问过的结点，便于返回到父节点 //链表</span></span><br><span class="line">LinkedList&lt;Node&lt;Item&gt;&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"> <span class="comment">//当前根结点不为空，或者为空但有可以返回的父节点(栈中有其他结点)（可以进行pop()操作)都可以进入循环</span></span><br><span class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">//只要当前结点不为空，就打印，同时入栈</span></span><br><span class="line">     <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">      stack.push(node);</span><br><span class="line">      System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">        node = node.lchild;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上面while终止说明当前结点为空；返回到父结点并处理它的右子树。由于要执行pop操作，先判空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回到父节点。由于左孩子为空返回时已经弹出过父节点了，所以若是由于右孩子为空返回，</span></span><br><span class="line"><span class="comment">// 会一次性返回到多层</span></span><br><span class="line">node = stack.pop();</span><br><span class="line"><span class="comment">//开始右子树的大循环(第一个while)</span></span><br><span class="line"><span class="comment">//子问题访问左树</span></span><br><span class="line"> node = node.rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历（左自右）"><a href="#中序遍历（左自右）" class="headerlink" title="中序遍历（左自右）"></a>中序遍历（左自右）</h3><ul><li>中序遍历是指，对于树中任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树</li><li><img src="/2019/04/05/二叉树基础(上)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552206203824.png" alt="1552206203824"></li></ul><h4 id="代码分析-递归-1"><a href="#代码分析-递归-1" class="headerlink" title="代码分析(递归)"></a>代码分析(递归)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 中序遍历 --递归 （左自右）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    inOrder(node.lchild);</span><br><span class="line">    System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">    inOrder(node.rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析（非递归）-1"><a href="#代码分析（非递归）-1" class="headerlink" title="代码分析（非递归）"></a>代码分析（非递归）</h4><p>先出栈再打印（左 自 右）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 中序遍历非递归</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder2</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Node&lt;Item&gt;&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">           node = node.lchild;</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="comment">//和前序遍历唯一不同就是，前序遍历是入栈时打印。中序遍历是出栈时返回父节点才打印</span></span><br><span class="line">        <span class="comment">//和前序遍历一样，由于左孩子为空返回时已经弹出过父节点，所以若是由于右孩子为空返回，会一次性返回多层</span></span><br><span class="line">         node = stack.pop();</span><br><span class="line">         System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">         <span class="comment">//子问题访问右树</span></span><br><span class="line">         node = node.rchild;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历（左右自）"><a href="#后序遍历（左右自）" class="headerlink" title="后序遍历（左右自）"></a>后序遍历（左右自）</h3><ul><li>后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。</li><li><img src="/2019/04/05/二叉树基础(上)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552206225972.png" alt="1552206225972"></li></ul><h4 id="代码分析-递归-2"><a href="#代码分析-递归-2" class="headerlink" title="代码分析(递归)"></a>代码分析(递归)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 后续序遍历--递归（左右自）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrder(node.lchild);</span><br><span class="line">postOrder(node.rchild);</span><br><span class="line">System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析（非递归）-2"><a href="#代码分析（非递归）-2" class="headerlink" title="代码分析（非递归）"></a>代码分析（非递归）</h4><p>左 右 自  （左标记1） （右标记2） 然后才进行打印 每个结点如此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 后续遍历--非递归</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder2</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Node&lt;Item&gt;&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//存放系欸但被访问的信息，1表示只访问过左孩子，2表示右孩子访问过了（此时可以打印自结点）</span></span><br><span class="line">    LinkedList&lt;Integer&gt; visitedState = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">     <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.lchild;</span><br><span class="line">             <span class="comment">//上面访问过左孩子，放入1</span></span><br><span class="line">             visitedState.push(<span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//这个while和下面的if不可交换执行顺序，否则变成了中序遍历</span></span><br><span class="line">         <span class="comment">//用while儿不用if是因为：结点已经访问过它的两个孩子了，先不打印而处于等待状态。随即判断若它的右孩子不为空，则仍会被push进入，</span></span><br><span class="line">         <span class="comment">// 待右孩子处理完后按照递归思想应该返回到等待中父节点，由于父节点访问状态已经是2.直接打印</span></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; visitedState.peek() == <span class="number">2</span>) &#123;</span><br><span class="line">visitedState.pop();</span><br><span class="line">            System.out.println(stack.pop().getData() + <span class="string">" "</span>);</span><br><span class="line">       &#125;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//注意先取出来而不删除，等到访问状态为2才删除</span></span><br><span class="line">            node = stack.peek();</span><br><span class="line">            node = node.rchild;</span><br><span class="line">            <span class="comment">//上面访问过有孩子了，应该更新访问状态为2</span></span><br><span class="line">            visitedState.pop();<span class="comment">//弹出1，压入2</span></span><br><span class="line">            visitedState.push(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>二叉树的前序，中序，后序其实就相当与深度优先遍历DFS,所以用递归和栈都可以实现。层序遍历相当于广度优先BFS，故可以用队列实现。从根节点开始，一层一层的从左往右打印（或其他操作）每个结点，比如下面层序遍历的结果为A-B-C-D-E-F-G-H-I</p><p><img src="http://upload-images.jianshu.io/upload_images/2726327-a0a9493ea07294de.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 层序遍历 --借助队列</span></span><br><span class="line"><span class="comment">* 将元素添加到队列中快于打印，要动手在纸上画画</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(node);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node front = queue.poll();</span><br><span class="line">        System.out.println(front.getData() + <span class="string">" "</span>); <span class="comment">//一次打印一个</span></span><br><span class="line">        <span class="keyword">if</span> (front.lchild != <span class="keyword">null</span>) &#123;</span><br><span class="line">            queue.offer(front.lchild);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (front.rchild != <span class="keyword">null</span>) &#123;</span><br><span class="line">             queue.offer(front.rchild);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归遍历总结"><a href="#递归遍历总结" class="headerlink" title="递归遍历总结"></a>递归遍历总结</h2><p><img src="/2019/04/05/二叉树基础(上)/婕\数据结构与算法之美\picture\前中后续遍历.jpg" alt="前中后续遍历"></p><p>二叉树的前中后续遍历，就是一个递归过程。比如，前序遍历，就是先打印根节点，然再递归打印左子树，最后递归打印右子树</p><p>写递归代码的关键，写递推公式，找到递归终止条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">前序遍历的递推公式：</span><br><span class="line">preOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)</span><br><span class="line"></span><br><span class="line">中序遍历的递推公式：</span><br><span class="line">inOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)</span><br><span class="line"></span><br><span class="line">后序遍历的递推公式：</span><br><span class="line">postOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r</span><br></pre></td></tr></table></figure><p>终止条件  -遍历到节点为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前序遍历--递归(自 左 右)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">    preOrder(node.lchild);</span><br><span class="line">    preOrder(node.rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 中序遍历 --递归 （左自右）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    inOrder(node.lchild);</span><br><span class="line">    System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">    inOrder(node.rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 后续序遍历--递归（左右自）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node&lt;Item&gt; node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrder(node.lchild);</span><br><span class="line">postOrder(node.rchild);</span><br><span class="line">System.out.print(node.getData() + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前、中、后序遍历的顺序图，可以看出，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点个数n成正比，<strong>也就是说二叉树遍历时间复杂度是O(n)。</strong></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。 </p><p><strong>二叉树前中后序遍历的时间复杂度是O(n);</strong></p><h2 id="补充1"><a href="#补充1" class="headerlink" title="补充1:"></a>补充1:</h2><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li><p>二叉树的第i层至多有$2^{i-1}$个结点，这个多画图很容易的出结论</p></li><li><p>深度为k的二叉树最多有$2^k-1$个结点；拥有最多结点的是满二叉树，根据第一条其实就是$$\sum_{i=1}^n(2^0+2^1+2^2+…+2^{k-1})$$</p></li><li><p>任意一棵二叉树，如果叶子结点个数为$n_0$,度为2的结点个数为$n_2$,则$n_0=n_2+1$。</p><ul><li><p>证明：设n为二叉树总结点个数，那么树的连线（分支）条数就为$n-1$,这个指的由来可以从下往上看，除了根结点外，每个结点都有一条指向父节点的连线。所以连线个数为$n-1$。</p></li><li><p>另外用$n_1$表示度为1的个数，则 $n=n_0+n_1+n_2$;</p></li><li><p>计算分支结点（连线）的方法也可以是从上到下，叶子结点没有孩子，又有一个孩子的结点可引出一条连线，拥有两个孩子的结点可以引出两条连线。所以<code>分支数</code>=$n_1+2n_2=n-1$,</p><p>将$n=n_0+n_1+n_2$带入上式中得$n_0=n_2+1$。</p></li><li><p>结论：二叉树叶子结点的个数一定比度为2的结点个数多一个。</p></li></ul></li><li><p>有n个节点的完全二叉树的深度为$\lfloor\log_2n\rfloor+1$，其中$\lfloor x \rfloor$表示向下取整。因为完全二叉树额节点（最上面的叶子结点）个数肯定不大于满二叉树结点数$2^k-1$个，但是也肯定大于$2^{k-1}-1$个（最少的时候，第k层就1个结点，但是上面的$k-1$层都是满的），也就是说$x^{k-1}-1&lt;n\le 2^k-1$，又n为正整数，该不等式等价于$x^{k-1} \le n &lt; 2^k$ ,两边取对数得到的$k-1 \le \log_2n &lt; k$（k为二叉树深度）</p></li><li><p>按层序编号，根节点编号为1，对于任意一个编号为i的结点，编号2i为其左孩子，2i+1为其有孩子；相反，对于任意一个1编号为i的结点，其父节点编号为$\lfloor i/2 \rfloor$</p></li><li><p>如果$2i&gt;n$则结点i无孩子；如果$2i+1&gt;n$,结点i只有左孩子没有右孩子。</p></li></ul><h3 id="由遍历次序的确定一颗二叉树"><a href="#由遍历次序的确定一颗二叉树" class="headerlink" title="由遍历次序的确定一颗二叉树"></a>由遍历次序的确定一颗二叉树</h3><p>已知前序遍历序列和中序遍历序列或者已知中序序列序列和后序遍历序列是可以确定一棵二叉树的，这就是说推导出的二叉树有唯一形态。</p><h4 id="已知前序和中序"><a href="#已知前序和中序" class="headerlink" title="已知前序和中序"></a>已知前序和中序</h4><p>比如前序遍历的顺序是ABCDEF,中序遍历的顺序是CBAEDF。问中序那边遍历序列？</p><p>由于二叉树形态唯一，中序遍历只有一种结果。现在来分析：前序中，A为根节点。于是中序中，C、B为左子树，E、D，F为右子树。回到前序中，A下一个是B,B肯定是左孩子，C是B的孩子但不确定是左孩子还是右孩子；再看中序，先打印的C说明C是B的左孩子。然后看右树DEF，前序中先打印D说明D是A的右孩子，接着打印了E说明E是D的左孩子。F可能是D的右孩子也可能是E的某一个孩子。再看中序，E之后是D说明E没有孩子，只能是F是D的右孩子。完毕，由此画出的二叉树就能得到后序遍历的结果。  CBEFDA</p><p><img src="/2019/04/05/二叉树基础(上)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552206123619.png" alt="1552206123619"></p><h4 id="已知中序和后序"><a href="#已知中序和后序" class="headerlink" title="已知中序和后序"></a>已知中序和后序</h4><p>比如中序序列ABCDEFG，后序序列BDCAFGE，求前序序列？</p><p>先看后序序列确定根节点是E,则在中序中，ABCD为左子树，FG为右子树。由后序BDCA的顺序，得知A是个节点的左孩子，后序中FG可以看出G是根节点E的右孩子。中序中先打印A说明A没有左孩子，BCD为于A的右侧，结合后序的BDCA，说明C是A的右孩子，则中序中ABCD的打印顺序，知道B是C的左孩子，D是C的右孩子。接下来看根节点E的右子树FG，中序中先打印F,说明F是G的左孩子。由此画出的二叉树就能得到前序遍历的结果。   EACBDGF</p><p><img src="/2019/04/05/二叉树基础(上)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552207115851.png" alt="1552207115851"></p><p>不能根据前序跟后序确定一个唯一的二叉树，因为中序遍历可以区分出左右子树。（根据根结点左边的是左子树，右边的是右子树），所以只根据前序遍历序列和后序遍历序列，可能得到多个形态的二叉树，它们前序、后序遍历出来是的结果相同。</p><h2 id="补充2："><a href="#补充2：" class="headerlink" title="补充2："></a>补充2：</h2><p>具有n个结点的二叉树，共有$h(n) = C(2n, n) - C(2n, n+1)$种形态，C即组合。–&gt;卡特兰数，类似问题还有可能的进出栈顺序，括号问题等。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据卡兰特数递推公式 h(n) = h(n-1)*(4*n-2)/(n+1)</span></span><br><span class="line"><span class="comment">* 已知h(1)=1;</span></span><br><span class="line"><span class="comment">* 无穷数列，越到后面数字也大，使用BigIjteger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 二叉树的结点</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  多少种组合方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">numofTreeShape</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     BigInteger a = BigInteger.ONE;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a = a.multiply(BigInteger.valueOf(<span class="number">4</span> * i - <span class="number">2</span>)</span><br><span class="line">                       .divide(BigInteger.valueOf(i + <span class="number">1</span>)));</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希算法(下)</title>
      <link href="/2019/04/04/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95(%E4%B8%8B)/"/>
      <url>/2019/04/04/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="22-哈西算法-下-哈希算法在分布式系统中有哪些应用"><a href="#22-哈西算法-下-哈希算法在分布式系统中有哪些应用" class="headerlink" title="[22]哈西算法(下): 哈希算法在分布式系统中有哪些应用"></a>[22]哈西算法(下): 哈希算法在分布式系统中有哪些应用</h1><p>哈希算法上讲了，哈希算法的四个应用，分别是 安全加密、数据检验、唯一标识、散列函数</p><p>还剩下 ：<strong>负载均衡、数据分片、分布式存储</strong></p><a id="more"></a><h2 id="应用5：负载均衡"><a href="#应用5：负载均衡" class="headerlink" title="应用5：负载均衡"></a>应用5：负载均衡</h2><p>我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器。（会话粘滞session sticky）</p><p>最初想到的是类似 Linux中的页表（将存储虚拟地址空间的虚拟地址映射到物理内存中）一张映射表，我们的维护是（会话粘滞的）一张表内容是将客户端的IP地址和会话ID 与服务器编号，然后再请求变化对应的服务器。这个方法很简单直观，但是又缺陷：</p><ul><li>客户太多，要维护的表很大，比较浪费内存空间</li><li>客户端下线，上线，服务器扩容，缩容都会导致映射失效，这样维护表的成本就会很大；</li></ul><p>如果借助哈希算法，这些问题都可完美解决。<strong>我们可以通过哈希算法，对客户IP地址或者会话IP计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到服务器编号。（类似一致性哈希算法）</strong></p><h2 id="应用六：数据分片"><a href="#应用六：数据分片" class="headerlink" title="应用六：数据分片"></a>应用六：数据分片</h2><h3 id="1-IT日志文件，快速计算关键词被搜索了几次"><a href="#1-IT日志文件，快速计算关键词被搜索了几次" class="headerlink" title="1.IT日志文件，快速计算关键词被搜索了几次"></a>1.IT日志文件，快速计算关键词被搜索了几次</h3><p>举例说明，IT日志文件，这里面记录了用户的搜索关系词，我们想要快速统计出每个是关键次被搜索的记录次数，该怎么做呢？</p><p>难点：</p><ul><li>搜索日志很大，没办法放到一台机器的内存中。</li><li>第二个难点，如果只用一台机器来处理这么巨大的数据，处理时间会很长。</li></ul><p>解决：</p><ul><li><p>首先对数据进行分片。</p><ul><li>首先为了提高处理的速度，我们使用n台机器并行处理。</li></ul></li><li><p>然后采集多台机器处理的方法，来提高处理速度。</p><ul><li><p>我们根据搜索记录的日志文件中一次读出每个搜索的关键次，并且通过哈希函数计算哈希值，然后再跟n取模，最终得到的值，就是应该被分配到的机器的编号。</p><p>这样所有哈希值相同的搜索关键词就被分配到了同一个机器上。也就是说，同一个搜索关键词会被分配到同一个机器上。每个机器会分别计算关键词出现的次数，最终合并起来就是最终的结果。</p></li></ul></li></ul><h3 id="2-如何快速判断图片是否在图库中"><a href="#2-如何快速判断图片是否在图库中" class="headerlink" title="2.如何快速判断图片是否在图库中"></a>2.如何快速判断图片是否在图库中</h3><p>同上，按照图片唯一标识（图片前100比特+中间100比特+图片最后100比特）使用加密算法计算哈希值</p><p>然后与机器个数n求于取模，存放在n台机器上。</p><p>查找时也是按照以上的方法进行查找。</p><p>实际上这种<strong>，针对海量数据的处理问题，我们都可以采用多机分布式处理。借助这种分片思路，可以突破单机内存，CPU等资源限制。</strong></p><h2 id="应用七：分布式存储"><a href="#应用七：分布式存储" class="headerlink" title="应用七：分布式存储"></a>应用七：分布式存储</h2><p>一致性哈希的应用，海量数据，海量用户。为了提高效率采用分布式存储，分布式缓存。我们有海量数据需要缓存，所以一个缓存机器肯定不够。于是我们就需要将数据分布在多台机器上。</p><p>数据存储在那台机器上我们使用数据分片思想，进行缓存。</p><p>但是随着数据的增长，预估的机器难以缓存的下，我们就需要扩容，但是扩容我们需要rehash，数据分片然后存储，等于将老数据进行了一次数据搬移，耗时太长，效率太低。</p><p>而且重新搬移过程中，所有缓存都失效了。所有数据请求都会穿透缓存，直接去请求数据库。这样就可能发生雪崩效应，压垮数据库。</p><p>所以我们不能使用这种扩容机制，我们需要一致性哈希算法。我们有k台机器，我们按照数据哈希值的范围。我们将整个范围划分成m个小区间(m远大于k),每个机器负责m/k个小区间。这样，既不用重新哈希也不用搬移数据，也保持了各个机器上数据数量的均衡。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>负载均衡</strong>中利用哈希算法代替了映射表，可实现会话粘滞的负载均衡策略。</p><p>在<strong>数据分片</strong>应用中，通过哈希算法对处理的海量数据进行分片，多机分布式处理，突破单继资源限制。</p><p>在<strong>分布式存储应用</strong>中，利用一致性哈希算法，可以解决缓存等分布式系统的扩容，缩容导致数据大量搬移的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 哈希算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希算法(上)</title>
      <link href="/2019/04/01/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95(%E4%B8%8A)/"/>
      <url>/2019/04/01/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="21-哈希算法-上-：如何防止数据库中的用户信息被脱库？"><a href="#21-哈希算法-上-：如何防止数据库中的用户信息被脱库？" class="headerlink" title="[21]哈希算法(上)：如何防止数据库中的用户信息被脱库？"></a>[21]哈希算法(上)：如何防止数据库中的用户信息被脱库？</h1><p>哈希算法：将任意长度的二进制串映射成固定长度的二进制串，这个映射的规则就是哈希算法，通过原始数据映射后得到的二进制值就是哈希值。</p><h2 id="优秀哈希算法的要求"><a href="#优秀哈希算法的要求" class="headerlink" title="优秀哈希算法的要求"></a>优秀哈希算法的要求</h2><ul><li>从哈希值不能反向推导出原始数据（哈希算法也叫<strong>单向哈希算法</strong>）</li><li>对输入数据非常敏感，哪怕原始数据只<strong>修改了一个Bit</strong>,最后<strong>得到的哈希也大不相同</strong>；</li><li>散列<strong>冲突的概率很小</strong>，对于不同的原始数据，哈希值相同的概率非常小；</li><li>哈希算法的<strong>执行效率要尽可能高效</strong>，针对较长的文本，也能快速计算出哈希值</li></ul><a id="more"></a><h2 id="哈希算法的应用"><a href="#哈希算法的应用" class="headerlink" title="哈希算法的应用"></a>哈希算法的应用</h2><p><strong>安全加密</strong>，<strong>唯一标识</strong>，<strong>数据校验</strong>，<strong>散列函数</strong>，负载均衡，数据分片，分布式存储。</p><h2 id="应用一：安全加密"><a href="#应用一：安全加密" class="headerlink" title="应用一：安全加密"></a>应用一：安全加密</h2><h3 id="常用于加密的哈希算法："><a href="#常用于加密的哈希算法：" class="headerlink" title="常用于加密的哈希算法："></a>常用于加密的哈希算法：</h3><p><strong>MD5</strong>:MD5 Message-Digest Algorithm MD5消息摘要算法</p><p><strong>SHA:</strong> Secure Hash Algorithm 安全散列算法</p><p><strong>DES:</strong> Data Encryption Standard 数据加密标准</p><p><strong>AES:</strong> Advanced Encryption Standard 高级加密标准</p><p>加密哈希算法来说 “单项哈希 ”，“散列冲突小”两点很重要</p><p>单项哈希是一个加密哈希算法来说必要的一点。<strong>散列冲突是无法避免的</strong>，因为基于组合数学中一个非常基础的理论<strong>鸽巢原理(也叫抽屉原理)</strong>。也就是10个鸽巢，11个鸽子，那肯定有一个鸽巢的鸽子数量多于1个，换句话说，肯定由2只鸽子在1个鸽巢中。</p><p>所以哈希算法无<strong>法做到零冲突</strong>，MD5的例子哈希值是固定的128为二进制尾，能表示的数据有限的，最多标识2^128^个数据，而我们要哈希的数据是无穷的，基于鸽巢原理，如果我们存储2^128^+1个数据求哈希值，必然会发生哈希冲突。<strong>所以哈希值越长的哈希算法，散列冲突的概率越低</strong>。</p><p>没有绝对的安全加密，<strong>越复杂，越难破解的加密算法，需要计算的时间也就越长。实际开发过程中，也需要权衡破解难度和计算时间，来决定究竟使用那种加密算法。</strong></p><h2 id="应用二：唯一标识"><a href="#应用二：唯一标识" class="headerlink" title="应用二：唯一标识"></a>应用二：唯一标识</h2><p>对图片的唯一标识，可以给每个图片取一个唯一标识，或者说信息摘要。比如说可以从图片二进制代码串开头取100字节，从中间取100字节，从最后再取100字节。然后将这300字节拼到一起，通过哈希算法，的到一个哈希值，将其作为图片的唯一标识。过这个唯一标识来判定图片是否在图库中，这样就可以减少很多工作量。</p><p>还可以把图片的相应图片文件在图库中的路径信息，都存储在散列表中。<strong>提高检索效率</strong></p><p>哈希算法可以对大数据做信息摘要，通过一个较短的二进制编码来表示一个很大的数据。</p><h2 id="应用三：数据校验"><a href="#应用三：数据校验" class="headerlink" title="应用三：数据校验"></a>应用三：数据校验</h2><p>利用<strong>哈希算法对输入数据敏感的特点</strong>，可以对数据取哈希值，从而<strong>高效校验数据是否被篡改过。</strong>（校验文件完整性正确性）</p><p>利用哈希算法的特性改动有效特性，对下载种子文件拆分成若干文件取哈希值，当下载完成后的文件拼接成一个完成文件并分别校验之前划分文件的哈希值是否改变从而确定下载数据的完整性</p><h2 id="应用四：散列函数"><a href="#应用四：散列函数" class="headerlink" title="应用四：散列函数"></a>应用四：散列函数</h2><p>散列函数关注的重点是哈希算法更加关注散列后的值能<strong>不能被平均分布</strong>，以<strong>及散列函数的执行快慢</strong>。（所以，散列函数用的散列算法一般都比较简单，比较追求效率。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>1.如何防止数据库中的用户信息被脱库？你会如何存储用户密码这么重要的数据吗？<br>①使用MD5进行加密（加密存储）<br>②字典攻击：如果用户信息被“脱库”，黑客虽然拿到的是加密之后的密文，但可以通过“猜”的方式来破解密码，这是因为，有些用户的密码太简单。（字典中存储用户常用的密码）<br>③针对字典攻击，我们可以引入一个盐（salt），跟用户密码组合在一起，增加密码的复杂度。</p><p>安全和攻击是一种博弈关系，不存在结对安全，所有安全措施，只是增加攻击成本而已。</p><h2 id="区块链中使用的哈希算法"><a href="#区块链中使用的哈希算法" class="headerlink" title="区块链中使用的哈希算法"></a>区块链中使用的哈希算法</h2><p>区块链是一块块区块组成的，每个区块分为两部分：区块头和区块体。</p><p>区块头保存着 自己区块体 和 上一个区块头 的哈希值。</p><p>因为这种链式关系和哈希值的唯一性，只要区块链上任意一个区块被修改过，后面所有区块保存的哈希值就不对了。</p><p>区块链使用的是 SHA256 哈希算法，计算哈希值非常耗时，如果要篡改一个区块，就必须重新计算该区块后面所有的区块的哈希值，短时间内几乎不可能做到。  </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 哈希算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表(下)</title>
      <link href="/2019/03/28/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%8B)/"/>
      <url>/2019/03/28/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="20-散列表-下-：散列表和链表将常会一起使用"><a href="#20-散列表-下-：散列表和链表将常会一起使用" class="headerlink" title="[20]散列表(下)：散列表和链表将常会一起使用"></a>[20]散列表(下)：散列表和链表将常会一起使用</h1><h2 id="散列表和链表结合实例"><a href="#散列表和链表结合实例" class="headerlink" title="散列表和链表结合实例"></a>散列表和链表结合实例</h2><h3 id="LRU缓存淘汰算法"><a href="#LRU缓存淘汰算法" class="headerlink" title="LRU缓存淘汰算法"></a>LRU缓存淘汰算法</h3><ul><li>往缓存中添加一个数据</li><li>从缓存中删除一个数据</li><li>从缓存中查找一个数据</li></ul><p>维护一个按访问时间从大到小的有序排列的链表结构。 LRU缓存</p><blockquote><ul><li>因为缓存大小有限，当缓存空间不够用，需要淘汰一个数据的时候，我们就直接将链表头部节点删除。</li><li>当要缓存某个数据时，现在链表中查找这个数据，如果没有找到，则直接将数据放到链表的尾部；如果找到了，我们就把它移动到链表的尾部。</li></ul></blockquote><p>三个操作都需要设计查找操作，如果使用单链表则查找操作的时间复杂度就是O(n),如果我们将散列表和链表这两种数据结构组合使用，可以将三个操作的时间复杂度都降到O(1)。</p><a id="more"></a><p>我们使用双向链表+散列表存储 实现一个高效，支持LRU缓存淘汰算法的缓存系统原型。</p><p>链表中的每个节点存储数据<strong>(data</strong>),前驱节点(<strong>prev</strong>)、后继节点(<strong>next</strong>),之外还新增了一个特殊的字段(<strong>hnext</strong>)</p><p><img src="/2019/03/28/散列表(下)/婕\数据结构与算法之美\picture\散列表实现LRU.jpg" alt="散列表实现LRU"></p><blockquote><p><strong>一个链表是双向链表（prev next）将缓存中的数据链来（将节点连在双向链表中）</strong> </p><p><strong>另一个链表是单向链表(hnext) ，为了将节点连在散列表的拉链中。</strong></p></blockquote><h4 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h4><p>利用散列查找数据的时间复杂度是O(1),但是查找完后数据移动到双向链表的尾部。</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>找到数据所在结点，然后将节点删除。借助散列表，我们可以在O(1)时间复杂度里找到要删除的节点。因为我们的链表是双向，O(1)时间复杂度获取到前驱节点，在双向链表中删除一个节点我们只需要O(1)的时间复杂度。</p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>首先，在散列表中查找要添加的数据是否已经存在，存在的化将次节点移动至双向链表的对尾，反之则再判断缓存队列是否已满，如果满了，则将双向链表头部的节点删除，然后再将数据反到链表的尾部，如果缓存没有慢，则直接将数据放到链表的尾部。</p><p>整个过程涉及的查找操作都是由散列表来完成。其他操作，比如删除头节点，链表尾部插入数据等，都可以在O(1)的时间复杂度内来完成。所以三个操作的时间复杂度都是O(1)。</p><h2 id="Redis有序集合"><a href="#Redis有序集合" class="headerlink" title="Redis有序集合"></a>Redis有序集合</h2><p>redis有序集合中实际上还有两个重要的属性，key（键值）和score (分值)。我们不仅通过Score来查找数据，还会用过key来查找数据。</p><p>比如，用户ID(key) 和用户的积分(score)，我们可以通过ID来查找，也可以同样积分区间来查找用户。</p><h4 id="细化Redis有序集合的操作"><a href="#细化Redis有序集合的操作" class="headerlink" title="细化Redis有序集合的操作"></a>细化Redis有序集合的操作</h4><ul><li>添加一个成员对象；</li><li>按照键值来删除一个成员对象；</li><li>按照键值来查找一个成员对象；</li><li>按照分值区间查找数据，比如查找积分在[100,365]之间的成员对象；</li><li>按照分值从小到大排序成员变量；</li></ul><p>我们可以利用两种数据结构来进行存储且满足有序集合的操作，我们按照分值将成员组织成跳表结构，那按照键值来删除、查询成员对象就会很慢。所以我们在用按照键值构建一个散列表，这样按照key的操作就得以实现O(1)。</p><h2 id="Java-LinkedHashMap"><a href="#Java-LinkedHashMap" class="headerlink" title="Java LinkedHashMap"></a>Java LinkedHashMap</h2><p>LinkedHashMap是一个传统拉链法构建的容器</p><p>这里的Linked指的是一个双向链表，默认支持按照插入顺序遍历数据，还支持按照顺序来遍历数据</p><p><strong>Java原生的LRU缓存淘汰</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>散列表虽然支持高效的数据插入，删除，查找操作，但是散列表中数据都是通过散列函数打乱后无规律存储的，无法支持按照某种顺序快速的遍历数据。如果希望按照顺序遍历散列表中数据，我们需要将散列表中数据拷贝到数组中，然后排序，再遍历。</p><p>因为散列表是动态数据结构，不停地有数据插入，删除，所以每当我们希望按照顺序遍历散列表中数据的时候，都需要先排序，那效率势必会很低。为了解决这个问题，我们将散列表和链表(或跳表)结合使用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表(中)</title>
      <link href="/2019/03/19/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%AD)/"/>
      <url>/2019/03/19/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%AD)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="19-散列表-中-如何打造一个工业级水平的散列表"><a href="#19-散列表-中-如何打造一个工业级水平的散列表" class="headerlink" title="[19]散列表(中) 如何打造一个工业级水平的散列表"></a>[19]散列表(中) 如何打造一个工业级水平的散列表</h1><p>不能笼统地说散列表的查询效率是O(1),影响散列表查询效率的因素：</p><blockquote><ul><li>散列函数的设计</li><li>装载因子的选取</li><li>扩容策略的选取</li><li>散列冲突的处理</li></ul></blockquote><a id="more"></a><p>在极端情况下，一个并不能达到工业级水平的散列表，会被恶意的攻击者利用。通过一些精心构造的数据，使得所有数据经过散列函数，都能够散列到同一个槽中。如果我们使用的是基于链表的冲突解决方法，那这是，<strong>散列表的这个槽就会退化成一个链表，查询在这个槽对应的时间复杂度就会从O(1)退化为O(n)。</strong></p><p>这个O(n)中的n是恶意攻击者构造的数据的总数，假如其中有10万个数据，则退化后的散列表效率就下降了10万倍。更直接点说，假如我们查询100个数据花费0.1秒，但是退化后的散列表中，在这个槽中查找一个数据就需要1万秒。这样就有可能<strong>查询操作消耗大量的CPU资源或者线程资源</strong>，导致<strong>系统无法响应其他请求</strong>，从而<strong>达到拒绝服务攻击(Dos)的目的</strong>，攻击者也就是利用了<strong>散列表碰撞攻击的基本原理</strong>。</p><p>所以我们需要设计一个可以应对各种异常情况的工业级散列表，来避免在散列冲突情况下，散列表性能急剧下降，并且能够抵抗散列碰撞攻击。</p><h2 id="散列函数的设计"><a href="#散列函数的设计" class="headerlink" title="散列函数的设计"></a>散列函数的设计</h2><p>在实际应用，如果我们已知我们在散列表存储的数据，我们需要考虑的是存储的关键字的长度，特点，分布，散列表的大小来设计<strong>散列函数</strong>。</p><h3 id="数据分析法"><a href="#数据分析法" class="headerlink" title="数据分析法"></a>数据分析法</h3><p>1.比如存储手机号，根据手机号的特点，前几位重复的几率很大，后几位重复的几率较小，我们选取后4位作为散列值。</p><p>2.散列表中存储的是单词时，我们可以利用字母的ASCII值“进位”相加，然后再跟散列表的大小求余、取模、作为散列值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="string">"nice"</span>)=((<span class="string">"n"</span> - <span class="string">"a"</span>) * <span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span> + (<span class="string">"i"</span> - <span class="string">"a"</span>)*<span class="number">26</span>*<span class="number">26</span> + (<span class="string">"c"</span> - <span class="string">"a"</span>)*<span class="number">26</span>+ (<span class="string">"e"</span>-<span class="string">"a"</span>)) <span class="comment">//78978</span></span><br></pre></td></tr></table></figure><p>实际上散列函数的设计还有，直接寻址发法，平方取中法，折叠法，随机数法等。</p><h2 id="装载因子的选取与动态扩容策略"><a href="#装载因子的选取与动态扩容策略" class="headerlink" title="装载因子的选取与动态扩容策略"></a>装载因子的选取与动态扩容策略</h2><p><em>装载因子是我们衡量散列表中存储元素个数，和发生散了冲突概率的一个数值。</em></p><p>装载因子越大：说明散列表中元素越多，空闲位置越少，散列表冲突概率就越大。不仅插入数据的过程要多次寻址，或者拉链增长，查找的过程也会因此变慢。</p><h3 id="对于静态数据"><a href="#对于静态数据" class="headerlink" title="对于静态数据"></a>对于静态数据</h3><p>对于没有频繁插入和删除的静态数据集合来说，我们很容易根据数据的特点，分布等，设计出一个冲突很少的散列函数。</p><h3 id="对于动态数据"><a href="#对于动态数据" class="headerlink" title="对于动态数据"></a>对于动态数据</h3><p>数据集合是频繁变动的，我么事先无法预知要加入的数据个数。所以我们无法一次性申请一个足够大的散列表。随着数据慢慢的加入，装载因子就会变大。当装载因子大到一定程度后，散列冲突就会变很频繁，严重影响性能。</p><h4 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h4><p>我们可以使用动态扩容的策略，当装载因子达到某一个阈值后，我们可以进行动态扩容，重新申请了一个更大的散列表，将数据搬移到这个新的散列表中。</p><p>散列表的扩容，并不是像数组那样只是数据搬移。因为散列表的大小变了，数据存储位置也变了，所以我们需要通过散列函数重新计算每个数据存储位置。</p><p><img src="/2019/03/19/散列表(中)/婕\数据结构与算法之美\picture\rehash.png" alt="rehash"></p><p>对于支持动态扩容的散列表，插入操作时间复杂度需要进行摊还分析法。</p><table><thead><tr><th>最好情况（没有进行扩容）插入时间复杂度</th><th>最坏情况(进行扩容)插入时间复杂度</th><th>均摊时间复杂度</th></tr></thead><tbody><tr><td>O(1)</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><p>如果我们对空间消耗很敏感的化，我们可以增加动态缩容功能。如果我们更加在意执行效率的化，能够容忍多消耗一点内存空间，那就可以不用那么费劲来缩容。</p><p>装载因子阈值的设置要权衡时间，空间复杂度。根据内存空间，和执行效率的要求，来进行选择。如果对执行效率不高，且内存空间紧张的情况下，我们可以增加负载因子的值，设置可以大于1。(拉链法)</p><h3 id="如何避免低效的扩容"><a href="#如何避免低效的扩容" class="headerlink" title="如何避免低效的扩容"></a>如何避免低效的扩容</h3><p>其实对用用户来说，需要每次插入数据的体验感都需要很好，所以我们对于那压死哈西表的最后一个插入数据来说，用户此次插入前需要对哈希表进行扩容，所消耗的时间就会边长。</p><p><strong>所以直接的”一次性扩容”就不是很合适，我们可以利用摊还分析法的思想，将那最坏时间复杂度所消耗的时间均摊到每次插入中。</strong></p><p>所以将<strong>扩容操作穿插到插入操作中，分批完成</strong>。<em>当装载因子触达阈值后，我们只申请新的空间，但不进行rehash，将老数据的内容搬移到新的散列表中。</em></p><p>当有新数据要<strong>插入</strong>时，我们将新数据插入到新的散列表中，并且顺带懂老散列表中拿出一个数据放入到新的散列表中。每次插入一个数据到散列表中，我们就顺带稍一点数据进新的散列表。每次我们都重复上面的过程。经过多次插入操作后，老的散列表中的数据就一点一点的全部搬移到新的散列表中了。这样就没有一次性数据搬移，插入操作就变得很快。<strong>这个也是一个空间换时间的方式</strong>。</p><p><img src="/2019/03/19/散列表(中)/婕\数据结构与算法之美\picture\分批扩容策略.png" alt="分批扩容策略"></p><p>期间的<strong>查询</strong>我们为了兼容新，老散列表的数据，<strong>我们先从新散列表中查找，如果没有找到，再去老的散列表中查找。</strong></p><p>这样均摊的方法，讲一次性扩容的代价，均摊到多次插入操作中，就避免了一次性扩容耗时过多的情况。这样插入一个数据的时间复杂度就是O(1)。</p><h2 id="散列冲突处理"><a href="#散列冲突处理" class="headerlink" title="散列冲突处理"></a>散列冲突处理</h2><p>在哈西表(上)中提到了的两种方法<strong>开放寻址法(ThreadLocalMap)</strong>，<strong>拉链法(LinkedHashMap)</strong>。</p><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>数据都存储在数组中，我们可以有效的利用CPU缓存加快查询速度。而且，这种方法实现的散列表，序列化起来比较简单。拉链法包含指针，序列化起来就没有那么容易。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>删除数据比较繁琐，需要添加标记。所有数据存储在数组中，随着负载因子的加大，发生冲突后，就会造成恶性循环，加大下一次发生冲突的概率。</p><p>所以使用开放寻址法的散列表，<strong>装载因子的上线不能太大</strong>。所以使用开放寻址法的散列表，<strong>装载因子的上线不能太大</strong>。这种方法比拉链法更加浪费内存空间。</p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p><strong>数据量比较小，装载因子比较小的时候，适合开放寻址法</strong>。这也是Java中的<strong>ThreadLocalMap</strong>使用开放寻址法解决散列冲突的原因。</p><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>拉链法对内存的利用率比开放寻址法要高。因为链表节点可以在需要的时候再创建，并不需要像开放寻址法那样事先申请好。<strong>(链表优于数组)</strong></p><p>链表法比开放寻址法，<strong>对于大装载因子容量更高</strong>，开放寻址法装载因子接近1时，就会有大量散列冲突，导致大量的探测，再散列等措施，性能会见降低很对。但是对于链表法来说，<strong>只要散列函数的值随机均匀，即便装载因子变成1</strong>，也就是链表长度长了一点，查找效率虽然有所下降，但是比顺序表查找还是快很多。</p><p><strong>拉链法的升级，将链表达到某一长度后变为更高效的红黑树，跳表等</strong>。这样即便出现散列冲突，极端情况下，所有数据都散列到了同一个桶里，那最终退化成的散列表的查询时间不过是<strong>O(logn)</strong>。这样也避免了DOS攻击。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p><strong>链表中存储指针(next 4字节)，所以对于比较小的对象的存储，比较消耗内存，还有可能会让内存消耗翻倍</strong>，而且，因为链表中的节点零散分布在内存中，不连续，<strong>所以对CPU缓存不友好</strong>，对于<strong>执行效率也有一定影响</strong>。</p><p>如果存储的是大对象，就可以忽略上面这一点。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>基于链表的散列冲突处理方法比<strong>较适合存储大对象、大数据量的散列表</strong>，而且，比起开放寻址法，它<strong>更加灵活，支持更多的优化策略，比如用红黑树代替链表</strong>。</p><h2 id="工业级散列表举例分析"><a href="#工业级散列表举例分析" class="headerlink" title="工业级散列表举例分析"></a>工业级散列表举例分析</h2><p>Java  HashMap</p><h3 id="初始大小"><a href="#初始大小" class="headerlink" title="初始大小"></a>初始大小</h3><p>HashMap默认的初始化大小16，这个默认值是可以设置的，如果事先知道大概的数据量有多大，可以通过修默认初始大小，减少动态扩容的次数。这样会大大提高HashMap的性能。</p><h3 id="装载因子和动态扩容"><a href="#装载因子和动态扩容" class="headerlink" title="装载因子和动态扩容"></a>装载因子和动态扩容</h3><p>最大装载因子默认是0.75，当HashMap中元素个数超过0.75*capacity(capacity表示散列表容量)时候，就会启动动态扩容，每次扩容都会扩容为原来的2倍大小。</p><h3 id="散列冲突解决方法"><a href="#散列冲突解决方法" class="headerlink" title="散列冲突解决方法"></a>散列冲突解决方法</h3><p>HashMap底层采用拉链法来解决冲突。即使负载因子和散列函数设计的再合理，也免不了会出现拉链过程的情况，一旦出现拉链过长，则会严重影响HashMap的性能。</p><p>在JDK1.8版本中，为了对hashMap做了进一步优化，引入了红黑树。当链表长度(默认超过8)时，链表就转换为红黑树。我们可以利用红黑树快速增删改查的特点，提高HashMap新跟那个。当红黑树节点个数小于6的时候，红黑树转化为链表。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</p><h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><p>散列函数的设计并不复杂，追求的是简单高效，分布均匀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;   //jdk1.8 &amp; jdk1.7</span><br><span class="line">     int h;</span><br><span class="line">     // h = key.hashCode() 为第一步 取hashCode值</span><br><span class="line">     // h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span><br><span class="line">     return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>如何设计一个工业级别的Hash表，应对各种异常情况，防止在极端情况下，散列表的性能退化过于严重。</p><ul><li>如何设计散列函数</li><li>如何根据装载因子动态扩容</li><li>如何选择散列冲突解决方法。</li></ul><p>散列函数的设计：我们尽可能让经过散列函数后的值随机分布，这样会尽可能的减少散列冲突，即便冲突后，分配到每一槽的数据也比均匀。除此之外，<strong>散列函数的设计也不能太复杂，太复杂就会消耗太多时间，会影响散列表的性能。</strong></p><p>关于散列冲突解决方法的选择，根据合适的情况选择合适方法。大部分情况下链表发更为合适。而且，我们还可以将链表法中链表改造成其他动态查找数据结构，比如红黑树，来避免散列表时间复杂度退化成O(n),低于散列碰撞攻击。但是对于小规模数据，装载因子不高的散列表，比较合适用开放寻址法。</p><p>对于动态散列表来说，散列函数，<strong>散列冲突解决方法，都无法解决散列冲突问题，只是缓解。随着数据的不断增加，散列表总会出现装载因子过高的情况</strong>。这时候，我们就需要启动动态扩容。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表(上)</title>
      <link href="/2019/03/19/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%8A)/"/>
      <url>/2019/03/19/%E6%95%A3%E5%88%97%E8%A1%A8(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="18-散列表-上"><a href="#18-散列表-上" class="headerlink" title="[18]散列表(上)"></a>[18]散列表(上)</h1><p>Word 单词检查功能-Hash Table</p><p>利用数组的下标随机访问，时间复杂度O(1)这个特性，就可以实现快速查找编号对应大的选手信息。</p><p><strong>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</strong></p><p><strong>散列表键(key)或者关键字</strong>来表示一组数据的关键信息。然后利用<strong>散列函数(Hash函数)</strong>来转化为数组下标。而散列函数计算得到的值就是<strong>散列值(Hash值，哈希值)</strong>。数组下标中存储的值称为<strong>value</strong>。</p><p><img src="/2019/03/19/散列表(上)/哈希表原理.png" alt="哈希表原理"></p><p>由于<strong>散列表用的是数组支持按照下标随机访问的时候</strong>，时间复杂符是<strong>O(1)</strong>的特性。我们通散列函数把元素的建制映射为下标，然后将数据存储在数组中对应的下标的位置。当我们按照键值查询元素时，我们用同样的散列函数，将建值转化为数组下标，从对应的数组下标的位置取数据。</p><a id="more"></a><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>散列函数的表现形式有多种，其中最为常用的取模（按照基本数组的长度)。</p><p>还有其他的散列函数</p><h2 id="如何构造散列函数"><a href="#如何构造散列函数" class="headerlink" title="如何构造散列函数"></a>如何构造散列函数</h2><ul><li>散列函数计算得到的散列值是一个非负数</li><li>如果key1 = key2,那hash(key1) == hash(key2);</li><li>如果key1 != key2，那hash(key1) !=hash(key2);</li></ul><p>其中第三点的很难做到，想要找到一个不同的key对应的散列值都不一样的散列函数，几乎时不可能的。</p><p>因为数组的存储空间有限，也会加大<strong>散列冲突</strong>的概率。</p><h2 id="如何解决散列冲突问题"><a href="#如何解决散列冲突问题" class="headerlink" title="如何解决散列冲突问题"></a>如何解决散列冲突问题</h2><p> 常用解决散列冲突的方法有两类，开放寻址法和链表法。</p><h3 id="开发寻址法"><a href="#开发寻址法" class="headerlink" title="开发寻址法"></a>开发寻址法</h3><p>开放寻址法的核心思想就i是，如果出现散列冲突，我们就重新探测一个空闲的位置，将其插入。探测的方法有多种，比如<strong>线性探测</strong>，<strong>二次探测</strong>，<strong>双重散列</strong>。</p><h4 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h4><p>假如要存储的值经过hash算法计算后得到的下标已经被占用，就向后线性一个一个向后进行探测。</p><p>所谓探测，有三点要求</p><blockquote><p>哈希冲突的下标后也已经被占用则就继续向后探测，直到找到数组中没有被占用的下标将冲突的数据插入。</p></blockquote><blockquote><p>假如从发生哈希冲突的那个点开始，向后进行线性探测，探测到数组的末尾后就又从数组的头开始进行探测。</p><p>假如从在Hashtable中删除了某个元素，我们就需要将当前删除的元素做一个标记（falg）。</p></blockquote><p>只有满足探测的位置为空且探测位置没有flag标记，才进行数据的存储。</p><h4 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h4><p>在线性探测的基础上，只是改变了探测的规则，每次探测相隔的距离不同。比如说每次探测的跨度为2。</p><h4 id="双重散列"><a href="#双重散列" class="headerlink" title="双重散列"></a>双重散列</h4><p>当插入数据的时候使用hash1(),当发生散列冲突的时候就要使用hash2()，再次发生散列冲突的时候再次使用hash3()。</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>开发地址法：<strong>有一个致命的缺点，就是他只能缓解少量散列冲突，当散列冲突发生多次时，后续对Hash表的插入发生散列冲突的概率就会大大提高</strong>，<strong>散列表的性能就会下降</strong>。进而为了保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定的比例的空闲槽位。我们引入了<strong>装载因子</strong>来表示空位的多少。</p><p>装载因子的计算公式是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">散列表的装载因子 = 填入表中的元素个数/散列表的长度</span><br></pre></td></tr></table></figure><p>装载因子越大，说明空闲位置越少，冲突越多，散列表的性能就会下降。</p><h3 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h3><p>链表法是一种更加常用的散列冲突解决方法，相比开放寻址法，它更为有效，采用空间换时间的原理。</p><p><strong>数组+链表存储结构</strong></p><p>每当发生散列冲突时，就将发生冲突的数据存储在链表中。链表插入操作时间复杂度O(1),查找删除一个元素怒时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。那查找或者删除时间复杂度实际上跟链表长度K成正比，也就是O(k)。</p><p>对于散列表均匀的散列表来说，理论上讲，k = n/m,其中n表示表示散列中数据的个数，m表示散列表中的槽数。</p><h2 id="Word文档中单词检查拼写功能是如何实现的？"><a href="#Word文档中单词检查拼写功能是如何实现的？" class="headerlink" title="Word文档中单词检查拼写功能是如何实现的？"></a>Word文档中单词检查拼写功能是如何实现的？</h2><p>将常用单词(约20万)存放到散列表中，平均一个单词10字节的内存空间，那么20万英文单词约占2MB空间，将2MB的数据存储在内存中。</p><p>当我们输入英文单词时，我们就拿用户输入的单词去散列表中进行查找。如果查找到，说明拼写正确；如果没有查找到，则说明拼写可能有误，给予提示，借助散列表这种数据结构，我们就可以轻松实现快速判断是否存在拼写错误。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳表</title>
      <link href="/2019/03/12/%E8%B7%B3%E8%A1%A8/"/>
      <url>/2019/03/12/%E8%B7%B3%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="跳表-beers-–动态数据结构"><a href="#跳表-beers-–动态数据结构" class="headerlink" title="跳表:beers:–动态数据结构"></a>跳表:beers:–动态数据结构</h1><p>二分查找算法中底层是依赖数组实现的（依赖数组的随机访问的特性）。又有众多弊端，比如只能操作已排好序的数据。且拥有数组这个数据结构的弊端。比如对数据频繁的增加或者删除操作时间复杂度高，每次数据增加删除还需要保持数据的有序性（即只支持静态数据集），存储数据必须依数组所以开辟内存时，必须是需要连续的内存空间。（对空间要求比较严格)。  数据量太小也不需要使用二分查找，基本没有什么性能上的区别，但是假如一个数据集中它存储的（300字符）字符串，比较操作比较费时间，则就可以使用二分查找。</p><p>二分查找的思想其实可以用在链表中，比如：跳表</p><p>跳表的核心思想：分区，建立多级索引，“二分查找”</p><p>跳表可以支持快速插入，删除，查找操作，写起来也不复杂，代码的可读性较高（跟功能差不多的红黑树相比），Redis中的有序集合(Sort Set)就是用跳表来实现的<strong>。为什么Redis中会选取跳表作为实现有序集合而不是红黑树</strong>？</p><a id="more"></a><h2 id="跳表的数据结构详解"><a href="#跳表的数据结构详解" class="headerlink" title="跳表的数据结构详解"></a>跳表的数据结构详解</h2><p>对于一个单链表来说，即便链表中存储的数据是有序的查找链表中的某一个值得元素，也需要O(n)的时间复杂度，如何提高查找效率，一想到查找，就想到数据库中的查找（建立索引）。对于一个有序链表我们可以建立索引（分成区间），缩短从链表头部向目标元素的遍历的节点个数，从而达到提高查找效率。</p><h3 id="索引建立（多级索引）"><a href="#索引建立（多级索引）" class="headerlink" title="索引建立（多级索引）"></a>索引建立（多级索引）</h3><p>在原始链表上建立索引或者称为(索引层)。其中索引层节点中存储的是索引值和指向索引值的对应下一级节点的指针(down指针)。</p><blockquote><p>单级索引是提高了不少查找的效率但是多级索引更能提升性能。</p></blockquote><p>这种链表+多级索引的数据结构，就是跳表。如下图：</p><p><img src="/2019/03/12/跳表/婕\数据结构与算法之美\picture\跳表图解.jpg" alt="跳表图解"></p><h2 id="跳表的查找删除的时间复杂度分析"><a href="#跳表的查找删除的时间复杂度分析" class="headerlink" title="跳表的查找删除的时间复杂度分析"></a>跳表的查找删除的时间复杂度分析</h2><h3 id="跳表查询时间复杂度分析"><a href="#跳表查询时间复杂度分析" class="headerlink" title="跳表查询时间复杂度分析"></a>跳表查询时间复杂度分析</h3><p>假如我们如上图定义的每隔一个节点就建立一个索引，那么假设原始数据有n个节点，则建立得到第一级节点大约就有n/2个节点，再往上建立索引则就有n/4、n/8、n/16…即第k层建立的索引是K-1层建立索引的1/2，那么第k级索引节点个数就是n/(2^k^)。</p><p><img src="/2019/03/12/跳表/婕\数据结构与算法之美\picture\多层跳表解析.jpg" alt="多层跳表解析"></p><p>假设我们的原始数据建立的索引有h层，最高层的索引有两个节点。则 <strong>n/(2^h^) = 2</strong> ,从而求得 <strong>h = log~2~(n-1)</strong></p><p>我们求得整个跳表得高度就是<strong>log2^(n-1)</strong>^,假设每层跳表我们遍历m个节点则从跳表中查询一个元素的时间复杂度就是<strong>O(m*logn)</strong>。</p><p>由于我们跳表是每隔一个节点就建立一个上层索引，最上层索引的节点的数量最大不超过3。从最上层节点确定区间后再往down指针下寻找更细的的区间划分在此层也只需按照上层一样最多遍历3个节点，依次类推。<strong>m的值就是一个常数3</strong>。</p><p>所以在跳表中查找人一个数据的<strong>时间复杂度就是O(logn)</strong>,这个查找的时间复杂度跟二分查找的时间复杂度相同，所以近似上我们是纵向的划分索引，然后横向利用二分查找，找符合区间的思想一层一层向下遍历，直到找到目标元素。</p><p><img src="/2019/03/12/跳表/婕\数据结构与算法之美\picture\跳表时间复杂度分析.jpg" alt="跳表时间复杂度分析"></p><h2 id="跳表的空间复杂度"><a href="#跳表的空间复杂度" class="headerlink" title="跳表的空间复杂度"></a>跳表的空间复杂度</h2><p>跳表的思想就是典型的用空间换时间的思想，几乎所有查找高效的数据结构都是用这样的思想。</p><p>假设原始链表大小为n，那第一级索引大约有n/2个节点，第二级索引大约有n/4个节点，依次类推，每上升一级就减少一半，直到剩下2个节点。所以跳表的索引节点总数为:n/2+n/4+n/8+…+8+4+2=n-2。是一个等比数列所以跳表的时间复杂度是O(n)。</p><h3 id="减少跳表的占用的内存空间"><a href="#减少跳表的占用的内存空间" class="headerlink" title="减少跳表的占用的内存空间"></a>减少跳表的占用的内存空间</h3><p>我们可以通过每隔多层节点建立索引，比如每隔2个结点或者每隔3个节点建立索引。那么就可以减少每层索引的节点数目。</p><p>当每隔2个节点就建立索引的化，我们建立索引的节点数=n/3+n/9+n/27+9+3+1=n/2。尽管空间复杂度还是O(n),但是比上面的每两个节点抽出一个节点的索引构建的方法，要减少一半的索引节点存储空间。</p><h3 id="实际开发中看待索引节点占用的空间"><a href="#实际开发中看待索引节点占用的空间" class="headerlink" title="实际开发中看待索引节点占用的空间"></a>实际开发中看待索引节点占用的空间</h3><p>实际开发中索引节点中存储的是要查找的对象属性和一个down指针，原始数据存储的则是大的对象，相比于原始数据的大小，索引所占用的额外的空间就可以忽略了。</p><h2 id="高效的动态插入和删除"><a href="#高效的动态插入和删除" class="headerlink" title="高效的动态插入和删除"></a>高效的动态插入和删除</h2><p>因为数据的插入和删除都需要保证原始数据的有序，所以跳表的插入也需要用到插找的思想，找到适合插入的前一个节点后面，利用链表插入操作对原始数据进行插入。</p><p>删除跟插入类似，但是删除必须利用查找找到要删除节点的前驱节点，进行链表是删除操作。</p><h2 id="跳表的索引更新"><a href="#跳表的索引更新" class="headerlink" title="跳表的索引更新"></a>跳表的索引更新</h2><p>假如在原始数据的基础上跳表中的元素增加删除会导致某一个区间里面的元素众多，导致查找效率变低，甚至跟单链表查找效率类似。作为一个动态结构，我们需要某种手段来维护索引与原始链表大小的之间的平衡，如果某个区间内节点过多就需要多建立索引，某个区间内节点过少就要适当删减索引。</p><h3 id="跳表维护平衡性"><a href="#跳表维护平衡性" class="headerlink" title="跳表维护平衡性"></a>跳表维护平衡性</h3><p>通过一个随机数函数，来决这个节点插入到那几级索引中，随机函数生成了k就将这个节点添加到第一级到第k级这k级索引中。</p><h2 id="为什么Redis中的有序集合是通过跳表来实现的"><a href="#为什么Redis中的有序集合是通过跳表来实现的" class="headerlink" title="为什么Redis中的有序集合是通过跳表来实现的"></a>为什么Redis中的有序集合是通过跳表来实现的</h2><p>严格上来讲，起始还用到了散列表。</p><p>根据Redis开发手册，就会发现Redis中的有序结合支持的核心操作主要有下面几个:</p><ul><li>插入一个数据</li><li>删除一个数据</li><li>查找一个数据</li><li>按照区间查找数据(比如查找[0,100]之间的数据)</li><li>迭代输出有序序列</li></ul><ol><li>除了区间查找这个操作，跳表可一做到O(logn)的时间复杂度定位区间定位起点，然后在原始链表中顺序往后遍历就可以了，比红黑树来说高效，其余操作红黑树跟跳表都可以高效实现。</li><li>跳表代码相比红黑树来说易于实现，且代码可读性高，不易出错，跳表更加灵活，它可以通过该表索引构建策略，有效平衡执行效率和内存消耗。</li></ol><p>缺点：</p><p>跳表出现的时间比较晚，很多编程语言中Map类型都是红黑树来实现的。业务开发过程中，直接拿来使用就可以了，不需要费劲自己去实现一个红黑树，但是跳表并没有一个线程的实现，所以开发中，如果你想使用跳表，必须要自己实现。</p><h1 id="跳表的实现"><a href="#跳表的实现" class="headerlink" title="跳表的实现"></a>跳表的实现</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 跳表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找(下)</title>
      <link href="/2019/03/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E4%B8%8B)/"/>
      <url>/2019/03/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="16-二分查找-下-：如何快速定位IP对应的省份地址"><a href="#16-二分查找-下-：如何快速定位IP对应的省份地址" class="headerlink" title="[16]二分查找(下)：如何快速定位IP对应的省份地址"></a>[16]二分查找(下)：如何快速定位IP对应的省份地址</h1><h2 id="4种常见的二分查找变形问题-four"><a href="#4种常见的二分查找变形问题-four" class="headerlink" title="4种常见的二分查找变形问题:four:"></a>4种常见的二分查找变形问题:four:</h2><blockquote><ul><li>查找第一个值等于给定值的元素</li><li>查找对后一个值等于给定值的元素</li><li>查找第一个大于等于给定值的元素</li><li>查找最后一个小于等于给定值的元素</li></ul></blockquote><a id="more"></a><h3 id="查找第一个值等于给定值的元素"><a href="#查找第一个值等于给定值的元素" class="headerlink" title="查找第一个值等于给定值的元素"></a>查找第一个值等于给定值的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= value) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (low &lt; n &amp;&amp; a[low]==value)&#123;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low+((high-low)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;value)&#123;</span><br><span class="line">            high = mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid] &lt;value)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((mid == <span class="number">0</span>)||(a[mid-<span class="number">1</span>]!=value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="稍加解释："><a href="#稍加解释：" class="headerlink" title="稍加解释："></a>稍加解释：</h4><p>区间mid值判断只有三种情况</p><ul><li>mid值大于value值<ul><li>high = mid -1;</li></ul></li><li>mid值小于value值<ul><li>low = mid+1;</li></ul></li><li>mid值等于value值<ul><li>mid值==0    说明value对应的值已经是数组第一个元素前面没有相同的元素</li><li>a[mid-1]对应的不是value值  说明value对应的值已经是肯定是查找到的第一个元素</li><li>不符合以上两种的  说明当前下标对应的元素不是找到的第一个元素，前面还有相同的值<ul><li>high = mid - 1;</li></ul></li></ul></li></ul><h3 id="查找对后一个值等于给定值的元素"><a href="#查找对后一个值等于给定值的元素" class="headerlink" title="查找对后一个值等于给定值的元素"></a>查找对后一个值等于给定值的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low+((high-low)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt; value)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &lt; value)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((mid==n-<span class="number">1</span>) || (a[mid+<span class="number">1</span>]!=value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟第一种思路差不多</p><h3 id="查找第一个大于等于给定值的元素"><a href="#查找第一个大于等于给定值的元素" class="headerlink" title="查找第一个大于等于给定值的元素"></a>查找第一个大于等于给定值的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = low+((high-low)&gt;&gt;<span class="number">1</span>); </span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt;= value)&#123;</span><br><span class="line">            <span class="keyword">if</span>((mid == <span class="number">0</span>)|| (a[mid -<span class="number">1</span>] &lt; value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍加解释；</p><ul><li>如果a[mid]小于要查找的值value,那么查找的值肯定在[mid+1,high]之间，更新 low = mid+1;</li><li>如果a[mid]大于要查找的值value，那么我们先看一下这个a[mid]是不是我们要找的第一个值大于等于给定值得元素。如果a[mid]前面已经没有元素，或者前面一个元素小于要查找的值value,那么a[mid]就是我们要查找的元素。</li><li>如果a[mid - 1]也大于等于要查找的值value,那么说明要查找的元素在[low,mid-1]之间，更新high = mid-1;</li></ul><h3 id="查找最后一个小于等于给定值的元素"><a href="#查找最后一个小于等于给定值的元素" class="headerlink" title="查找最后一个小于等于给定值的元素"></a>查找最后一个小于等于给定值的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span> <span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low+((high-low)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt; value)&#123;</span><br><span class="line">            high = mid -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((mid == n-<span class="number">1</span>)|| (a[mid+<span class="number">1</span>] &gt; value))&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决思考题：查找12万条IP归属地中目标IP归属地</p><p>假设IP地址与归属地的对应关系不经常更新，我们可以预先处理12万条数据，让其按照IP从小到大排序。ip地址可以转化为12万条数据，让其按其实IP从小到大排序。</p><p>然后查找在有序数组中，最后一个小于等于某个给定值的元素。</p><p>找到最后一个其实Ip小于等于这个IP的IP区间，检查这个IP是否在这个IP区间内，如果在，我们就取出对应的归属地显示；如果不在，就返回未查找到。-1</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>二分查找的表中容易出错</p><p>处理<strong>好终止条件 ，区间上下界更新的方法，返回值的选择。</strong></p><p>LeetCode 33题</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找(上)</title>
      <link href="/2019/03/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E4%B8%8A)/"/>
      <url>/2019/03/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="15-二分查找-上-：如何用最省内存的方式实现快速查找功能"><a href="#15-二分查找-上-：如何用最省内存的方式实现快速查找功能" class="headerlink" title="[15]二分查找(上)：如何用最省内存的方式实现快速查找功能"></a>[15]二分查找(上)：如何用最省内存的方式实现快速查找功能</h1><h2 id="二分查找-Binary-Search-open-book"><a href="#二分查找-Binary-Search-open-book" class="headerlink" title="二分查找(Binary Search) :open_book:"></a>二分查找(Binary Search) :open_book:</h2><p>Binary Search 算法，也称折半查找。二分查找的思想很简单-类似与小时候玩的猜数字游戏。</p><p>一个人先确定一个数组，另一个随便猜一个数字(中间数)。确定数字的那个人只需要说大了还是小了就行。每说一次就能让可能存在这个数的区间减小一半，知道区间减小到只有一个数字即猜对了这个数。(最坏情况)</p><a id="more"></a><p><img src="/2019/03/03/二分查找(上)/婕\数据结构与算法之美\picture\二分查找猜数字游戏.png" alt="二分查找猜数字游戏"></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p><strong>二分查找针对的是一个==有序的数据结合==，查找思想有点类似分治思想，每次都通过跟区间的==中间元素==对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为0</strong></p><p>二分查找的时间复杂度：O(logn)</p><blockquote><p>被查找期间的大小变化</p><p>n ，n/2 , n/4 , n/8 , n/2^k…</p></blockquote><p>可以看出，这是一个等比数列。其中n/2^k=1时，k的值就是总共缩小的次数，而每次缩小操作只涉及两个数据的大小比较，所以，经过k次区间缩小操作，时间复杂度就时O(k)。又因为n/2^k=1,我们可以求出k=log2n，所以时间复杂度就是O(logn)。</p><p>O(logn) 的时间复杂度比一定比O(1)时间复杂度的算法执行效率高。大O标记法表示时间复杂度得到时候，会忽略掉低阶，常数，系数。对于常量级的时间复杂度算法来说。O(1)可能表示的是一个非常大的常量值,比如O(1000),O(10000).所以常量级时间复杂度算法有时候可能还没有O(logn)的算法执行效率高。</p><h2 id="简单版本二分查找的递归与非递归实现"><a href="#简单版本二分查找的递归与非递归实现" class="headerlink" title="简单版本二分查找的递归与非递归实现"></a>简单版本二分查找的递归与非递归实现</h2><p>最简单的情况就是有序数组中不存在重复元素。</p><h3 id="非递归版"><a href="#非递归版" class="headerlink" title="非递归版"></a>非递归版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n-<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = low + ((high-low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a[mid] == vaule)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;value)&#123;</span><br><span class="line">            low= mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><h5 id="循环的条件"><a href="#循环的条件" class="headerlink" title="循环的条件"></a>循环的条件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">low&lt;=high</span><br></pre></td></tr></table></figure><h5 id="mid的取值"><a href="#mid的取值" class="headerlink" title="mid的取值"></a>mid的取值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果使用mid = (low+high)/2，可能会导致数据的溢出。改进方法有三种</span><br><span class="line">1.mid = low +(high-low)/2;</span><br><span class="line">2.mid = low+((high-low)&gt;&gt;1);</span><br><span class="line">3.mid = (low&amp;high)+((low^high)&gt;&gt;1);</span><br></pre></td></tr></table></figure><h5 id="low和high值的更新"><a href="#low和high值的更新" class="headerlink" title="low和high值的更新"></a>low和high值的更新</h5><p>low=mid+1,high=mid-1。注意这里的+1和-1.如果直接写成low=mid或者high=mid，就可能造成死循环，因为当low=3,high=3时但是a[3]不能与value,本应该就跳出循环，但是如果low和high的更新值错误导致死循环。</p><h3 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分查找递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> n,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> brearchInternally(a,<span class="number">0</span>,n-<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">brearchInternally</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = low+((high-low)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(a[mid]==value)&#123;</span><br><span class="line">        reutrn value;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;vlaue)&#123;</span><br><span class="line">    <span class="keyword">return</span> brearchInternally(a,mid+<span class="number">1</span>,high,value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brearchInternally(a,low,mid-<span class="number">1</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找的应用场景的局限性"><a href="#二分查找的应用场景的局限性" class="headerlink" title="二分查找的应用场景的局限性"></a>二分查找的应用场景的局限性</h2><table><thead><tr><th>时间复杂度</th><th>使用特定数据结构存储数据</th><th>数据必须达到的特殊要求</th></tr></thead><tbody><tr><td>O(logn)</td><td>二分查找依赖舒顺序表(数组)，按下标随机访问数据时间复杂度O(1)</td><td>二分查找针对的有序数据，且不能频繁的删除，插入。一次排序，多次二分查找</td></tr></tbody></table><h3 id="特定的数据结构顺序表-数组"><a href="#特定的数据结构顺序表-数组" class="headerlink" title="特定的数据结构顺序表-数组"></a>特定的数据结构顺序表-数组</h3><p>二分查找需要按照下标随机访问。数组按照下标随机访问数据时间复杂度是O(1),而链表随机访问时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂度就会变得很高。</p><h3 id="针对的数据必须是有序的"><a href="#针对的数据必须是有序的" class="headerlink" title="针对的数据必须是有序的"></a>针对的数据必须是有序的</h3><p>要想使用二分查找时，数据必须是有序的。如果数据没有序，我们需要先排序。排序最低的时间复杂度是O(nlogn)。如果我们针对的是一个静态的数据，没有频繁的插入，删除，我们可以进行一次排序，多次二分查找。这样排序成本被均摊了，二分查找的边际成本就会比较低。</p><p>但是针对动态的数据，一直有数据的频繁的插入和删除操作，要想使用二分查找，要么每次插入，删除操作后保证数据仍有序，要么在每次二分查找前必须进行排序。这种动态数据集合，无论那种方法，维护有序的成本都很高。</p><p>二分查找只能应用在插入和删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找不再适用。我们将适用二叉树。</p><h3 id="数据量太小不适合二分查找"><a href="#数据量太小不适合二分查找" class="headerlink" title="数据量太小不适合二分查找"></a>数据量太小不适合二分查找</h3><p>如果要处理的是数据量很小的数据，没有必要适用二分插找，直接使用顺序遍历就可以了。只有数据量比较大时，二分查找的优势才会比较明显。</p><p>但是有一个特例：</p><p>比如数据之间的比较操作比较耗时，不管数据量大小，我都推荐使用二分查找。比如，数组中存储的都是长度超过300的字符串，如此长的两个字符串之间对比就会非常耗时。我们需要尽可能的减少比较次数，而比较次数的减少会大大提高性能，此时使用二分查找效果更好。</p><h3 id="数据量太大也不适合二分查找"><a href="#数据量太大也不适合二分查找" class="headerlink" title="数据量太大也不适合二分查找"></a>数据量太大也不适合二分查找</h3><p>原因二分查找依赖的数据结构，数组为了支持随机访问的特性，要求内存空间连续，对没存的要求比较严格。我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。</p><p>“连续”的意思就是，即便有2GB的内存空间剩余但是，如果剩余的2GB的内存空间时不连续的，没有一块连续的1GB内存空间，那样照样无法申请一个1GB大小的数组。因为基于数组数据结构的原因，所以太大的数据用数组存储就比较吃力了，所以就不能使用二分查找了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>二分查找的核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间中的中间元素对比，将待查找区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码实现比较容易写错。你需要着重掌握它的三个容易错的地方：</p><ul><li>循环退出条件</li><li>mid取值（求了两个数的平均值）</li><li>low和high的更新</li></ul><p>二分查找虽然性能优秀，但是应用场景也比较有限。底层必须依赖数组，并且还要求数据时有序的。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据的插入，删除操作。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序(中)</title>
      <link href="/2019/03/02/%E6%8E%92%E5%BA%8F(%E4%B8%AD)/"/>
      <url>/2019/03/02/%E6%8E%92%E5%BA%8F(%E4%B8%AD)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="12-排序-中-数据结构与算法之美-arrow-down-small"><a href="#12-排序-中-数据结构与算法之美-arrow-down-small" class="headerlink" title="[12]排序(中) -数据结构与算法之美:arrow_down_small:"></a>[12]排序(中) -数据结构与算法之美:arrow_down_small:</h1><table><thead><tr><th style="text-align:left">排序算法</th><th>时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left">归并</td><td>O(nlogn)</td></tr><tr><td style="text-align:left">快排</td><td>O(nlogn)</td></tr></tbody></table><p><strong>快排，归并排序</strong>：大规模的数据排序，比冒泡，插入，选择更加常用。—分治思想</p><a id="more"></a><h1 id="带着问题-grey-question"><a href="#带着问题-grey-question" class="headerlink" title="带着问题:grey_question:"></a>带着问题:grey_question:</h1><p>如何在O(n)的时间复杂度内查找一个无序数组中的第K大元素？</p><h2 id="归并排序-Merge-Sort-dog2"><a href="#归并排序-Merge-Sort-dog2" class="headerlink" title="归并排序(Merge Sort):dog2:"></a>归并排序(Merge Sort):dog2:</h2><p>归并排序核心思想：</p><ul><li>先把数组从中间<strong>分成前后两部分</strong></li><li>然后对前后两部分，<strong>分别排序</strong> </li><li>再将排好的两个部分<strong>合并</strong>在一起。</li></ul><p><img src="/2019/03/02/排序(中)/婕\数据结构与算法之美\picture\归并排序算法图.png" alt="归并排序算法图"></p><p>利用的是<strong>分治思想</strong> ，大问题分解为小的子问题来解决。小的解决了，大的问题也就解决了。</p><p>分治算法一般都是用递归来实现的。<strong>分治是一种解决问题的处理思想，递归是一种编程技巧</strong></p><ul><li><p><strong>递归实现拆分目标数组</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">递推公式：</span><br><span class="line">mergr_sort(p...r) = merge(merge_sort(p..q),merge_sort(q_1...r))</span><br><span class="line">按照目标数组的中间节点差分整个数组，进行分别排序</span><br><span class="line"></span><br><span class="line">终止条件</span><br><span class="line">p &gt;= r 不用再继续分解   即拆解成的目标数组只剩一个元素</span><br></pre></td></tr></table></figure></li><li><p><strong>合并拆分并完成排序的数组—类似合并两个有序数组</strong> (<em>利用哨兵简化代码)</em></p><ul><li>开辟一个和合并完成后数组一样大的数组 —临时数组</li><li>比较有序数组首元素的大小，谁小就放到临时数组中，依次比较放入，直到其中有一个数组已经没有元素可以比较</li><li>然后将有元素的数组直接放到到临时数组后面</li><li>最后将临是数组中的元素考回需要合并的数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin1, <span class="keyword">int</span> end1, <span class="keyword">int</span> begin2, <span class="keyword">int</span> end2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>; <span class="comment">//临时数组的其实位置</span></span><br><span class="line">    <span class="keyword">int</span> begin = begin1;  <span class="comment">//记住数组起始位置</span></span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[end2 - begin1 + <span class="number">1</span>]; <span class="comment">//开辟和合并后数组大小一样大的数组</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//以下操作类似合并两个有序数组</span></span><br><span class="line">    <span class="comment">//谁小就将谁放入临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[begin1] &lt; a[begin2]) &#123;</span><br><span class="line">            temp[start++] = a[begin1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[start++] = a[begin2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余的数组直接拷贝回临时数组</span></span><br><span class="line">    <span class="keyword">while</span> (begin1 &lt;= end1) &#123;</span><br><span class="line">        temp[start++] = a[begin1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (begin2 &lt;= end2) &#123;</span><br><span class="line">        temp[start++] = a[begin2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将temp数组中的元素拷贝回合并后的数组中。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">        a[begin + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>归并排序的整体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin1, <span class="keyword">int</span> end1, <span class="keyword">int</span> begin2, <span class="keyword">int</span> end2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>; <span class="comment">//临时数组的其实位置</span></span><br><span class="line">    <span class="keyword">int</span> begin = begin1;  <span class="comment">//记住数组起始位置</span></span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[end2 - begin1 + <span class="number">1</span>]; <span class="comment">//开辟和合并后数组大小一样大的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下操作类似合并两个有序数组</span></span><br><span class="line">    <span class="comment">//谁小就将谁放入临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[begin1] &lt; a[begin2]) &#123;</span><br><span class="line">            temp[start++] = a[begin1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[start++] = a[begin2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余的数组直接拷贝回临时数组</span></span><br><span class="line">    <span class="keyword">while</span> (begin1 &lt;= end1) &#123;</span><br><span class="line">        temp[start++] = a[begin1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (begin2 &lt;= end2) &#123;</span><br><span class="line">        temp[start++] = a[begin2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将temp数组中的元素拷贝回合并后的数组中。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">        a[begin + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序性能分析："><a href="#归并排序性能分析：" class="headerlink" title="归并排序性能分析："></a>归并排序性能分析：</h3><h4 id="归并排序是一个稳定排序"><a href="#归并排序是一个稳定排序" class="headerlink" title="归并排序是一个稳定排序"></a>归并排序是一个稳定排序</h4><p>归并排序是一个稳定排序，<strong>稳定与否关键是在看merge()函数</strong>，也就是有两个有序子数组合并成一个有序数组那部分 。合并过程中，<em>把差分后要合并的两个数组中值相等的元素，先将拆分前下标靠前的元素先放入合并用的temp数组内即可</em>。这样就保证了值相同的元素。在合并前后的先后顺序不变，所以，<strong>归并排序是一个稳定的排序算法</strong>。                    </p><h4 id="归并排序的时间复杂度"><a href="#归并排序的时间复杂度" class="headerlink" title="归并排序的时间复杂度"></a>归并排序的时间复杂度</h4><p>我们可以从分治思想中的到启发，求解大问题，解决子问题即可。则我们定义求解问题时间是T(a),求解问题b、c的时间分别是T(b)和T(c)，那么我们就可以得到如下的递推关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(a) = T(b)+T(c)+k</span><br></pre></td></tr></table></figure><p>其中K等于将两个子问题b,c的结果合并成问题a的解果所消耗的时间。</p><p><strong>不仅递归求解问题可以写成递推公式，递归代码的时间复杂度也可以写成递推公式。</strong> </p><p>现在我们来求解归并排序的时间复杂度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并两个有序子数组的时间复杂度是O(n)。所以，套用前面的公式，归并排序的时间复杂度的计算公式就是：</span></span><br><span class="line">T(<span class="number">1</span>) = c ;n=<span class="number">1</span>时，即数组只剩下一个元素，只需要常量级的执行时间，所以表示为c。</span><br><span class="line">T(n) = <span class="number">2</span>*T(n/<span class="number">2</span>) + n;  n&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>分解计算过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T(n) = <span class="number">2</span>*T(n/<span class="number">2</span>) + n</span><br><span class="line"> = <span class="number">2</span>*(<span class="number">2</span>*T(n/<span class="number">4</span>)+n/<span class="number">2</span>) +n        = <span class="number">4</span>*T(n/<span class="number">4</span>) + <span class="number">2</span>*n</span><br><span class="line">     = <span class="number">4</span>*(<span class="number">2</span>*T(n/<span class="number">8</span>) + n/<span class="number">4</span>) + <span class="number">2</span>*n   = <span class="number">8</span>*T(n/<span class="number">8</span>) + <span class="number">3</span>*n</span><br><span class="line">     = <span class="number">8</span>*(<span class="number">2</span>*T(n/<span class="number">16</span>) + n/<span class="number">8</span>) + <span class="number">3</span>*n  = <span class="number">16</span>*T(n/<span class="number">16</span>) + <span class="number">4</span>*n</span><br><span class="line">     ......</span><br><span class="line">     = <span class="number">2</span>^k * T(n/<span class="number">2</span>^k) + k * n</span><br><span class="line">     ......</span><br></pre></td></tr></table></figure><p>我们可以得出T(n) = 2^kT(n/2^k)+kn,当 T(n/2^k)=T(1) 时，也就是 n/2^k=1，我们得到 k=log2n 。我们将 k 值代入上面的公式，得到 T(n)=Cn+nlog2n 。如果我们用大 O 标记法来表示的话，T(n) 就等于 O(nlogn)。所以归并并排序的时间复杂度是 O(nlogn)。</p><p>归并排序的执行效率与要排序的原始数组的有序程度无关，所以其时间复杂度是非常稳定的。</p><table><thead><tr><th>时间复杂度</th><th>大O标记法</th></tr></thead><tbody><tr><td>最好时间复杂度</td><td>O(nlogn)</td></tr><tr><td>平均时间复杂度</td><td>O(nlogn)</td></tr><tr><td>最坏时间复杂度</td><td>O(nlogn)</td></tr></tbody></table><h4 id="归并排序的空间复杂度"><a href="#归并排序的空间复杂度" class="headerlink" title="归并排序的空间复杂度"></a>归并排序的空间复杂度</h4><p><strong>归并排序是一个非原地排序！</strong>这是因为归并排序的合并函数。在合并两个有序数组为一个有序数组时，需要借助额外的储存空间。<strong>O（n）</strong></p><p>递归代码的空间复杂不能像时间复杂度那样累加。尽管每次合并操作都需要申请额外的内存空间，但是在合并完成后，临时开辟的内存空间被释放掉了，<strong>在任意时刻，CPU只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过n个数据的大小，所以空间复杂度是O(n).</strong></p><h2 id="快速排序-QuickSort-arrow-heading-up"><a href="#快速排序-QuickSort-arrow-heading-up" class="headerlink" title="快速排序(QuickSort):arrow_heading_up:"></a>快速排序(QuickSort):arrow_heading_up:</h2><p>快排核心思想：</p><ul><li>先从区间数组中选择一个数据作为分区点</li><li>遍历区间数组中的元素，将小于分区点的元素放在分区点左边，大于分区点的元素放在分区点右边。经过这一个步骤后，数组就被发分为了3部分，左边 p 到 q-1 之间都是小于 pivot的 ，中间 pivot，后面q+1到r之间是大于 pivot 的（排序并分区）</li><li>根据分治，递归的处理思想，我们可以用递归排序下标从p到q-1之间的数据和小标从q+1到r之间的数据，直到区间缩小为1，就说明所有的数据都有序了。</li></ul><p><img src="/2019/03/02/排序(中)/婕\数据结构与算法之美\picture\快排分区.png" alt="快排分区"></p><p>递归过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">递推公式：</span><br><span class="line">quick_sort(p…r) = quick_sort(p…q-<span class="number">1</span>) + quick_sort(q+<span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line">终止条件：</span><br><span class="line">p &gt;= r</span><br></pre></td></tr></table></figure><p>递归公式-&gt;递归代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快排递归函数，begin,end为下标 div为分区节点，下一次分区就不包含此分区节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortInternally</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> div = partition(a, begin, end);</span><br><span class="line">    quickSortInternally(a, begin, div - <span class="number">1</span>);</span><br><span class="line">    quickSortInternally(a, div + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归并排序中有一个merge()合并方法，我们这里有一个partition()分区函数。对数组进行顺序调整且对数组进行进一步分区处理,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = a[end];</span><br><span class="line">    <span class="keyword">int</span> i = begin;      <span class="comment">//i当作“已排好序节点”</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = begin; j &lt; end; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &lt; pivot) &#123; <span class="comment">//比分区节点小的元素</span></span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;   <span class="comment">//有序性区无元素，或者已经有序</span></span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                swap(a, i, j); <span class="comment">//将无序区的元素交换到有序区后面，有序区+1，无序区-1</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, i, end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的处理有点类似选择排序。[p-r-1]我们通过下标 i把区间分为两个部分，[p-i]都小于pivot 我们将它取名为”已处理区间”。[i~r-1]都是”未处理区间“。我们每次都从未处理区间中取出一个元素A[j]，与pivot比较，如果小于pivot，则将加入到已处理区间的尾部，也就是A[i]位置，j++,i++。反之则只有j++。</p><p><img src="/2019/03/02/排序(中)/婕\数据结构与算法之美\picture\快排分区排序原理图.png" alt="快排分区排序原理图"></p><p>因为分区过程涉及交换操作，交换过程中只对比大小，无法保证相同元素的先后顺序。所以快速🥧排序是一个不稳定算法。</p><h3 id="快排性能分析"><a href="#快排性能分析" class="headerlink" title="快排性能分析"></a>快排性能分析</h3><h4 id="快排稳定性"><a href="#快排稳定性" class="headerlink" title="快排稳定性"></a>快排稳定性</h4><p>快拍是一个不稳定算法</p><h4 id="快排的空间复杂度"><a href="#快排的空间复杂度" class="headerlink" title="快排的空间复杂度"></a>快排的空间复杂度</h4><p>快排是一个原地排序，在原数组内进行简单交换。</p><h4 id="快排时间复杂度"><a href="#快排时间复杂度" class="headerlink" title="快排时间复杂度"></a>快排时间复杂度</h4><p>快排也是使用递归实现的分治思想，对于递归代码的时间复杂度，我们之前总结的公式在这里依旧适用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(<span class="number">1</span>) = C；   n=<span class="number">1</span> 时，只需要常量级的执行时间，所以表示为 C。</span><br><span class="line">T(n) = <span class="number">2</span>*T(n/<span class="number">2</span>) + n； n&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>但是归并排序是从中间开始划分区间，而快排划分区间的是利用选取一个值，假如选取的值是目标数组中最大元素，或者最小元素。则会导致每次划分的区间言严重不均等。假如每次划分区间都取到了这种极端值，则我们要进行大约n次分区操作，才能完成快排的整个过程。每次分区我们平均要扫描大约n/2个元素。这种情况下，快排的时间复杂度就从O(nlogn)退化成了O(n^2)。</p><p>利用递归树对快排的时间复杂度进行分析</p><p>在大部分情况下时间复杂度都是O(nlogn)，只有在极端情况下，才会退化到 O(n2)。</p><table><thead><tr><th>时间复杂度</th><th>对应的原始数组</th></tr></thead><tbody><tr><td>最好时间复杂度O(nlogn)</td><td>每次挑选的分区值都是大小最中间的那个值</td></tr><tr><td>平均时间复杂度O(nlogn)</td><td></td></tr><tr><td>最坏时间复杂度O(n^2)</td><td>每次挑选的分区值都是极端值-最大或最小值</td></tr></tbody></table><p>合理选择区间值可以避免出现最坏情况。</p><h1 id="解答开始问题-key"><a href="#解答开始问题-key" class="headerlink" title="解答开始问题:key:"></a>解答开始问题:key:</h1><p>快排的核心思想就是<strong>分治</strong>和<strong>分区</strong>.我们可以利用分区的思想；来解答开始的问题：O(n)时间复杂度内来求无序数组中的第K大元素。比如，4,2,5,12,3这样一组数据，第3大元素就是4。</p><p>我们区间选择完后就分为3部分。</p><p>如果p+1=k，那么A[p]就是要求解的元素，如果k&gt;p+1,说明第K大元素出现A[p+1…n-1]区间，我们再按照递归思路在A[p+1…n-1]这个区间内进行查找。同理，如果k&lt;p+1,那我们就在A[0…p-1]区间查找。</p><p><img src="/2019/03/02/排序(中)/婕\数据结构与算法之美\picture\O(n" alt="O(n)求解第K大元素">求解第K大元素.png)</p><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>第一次分区查找，我们需要对大小为n的数组执行分区操作，需要遍历n个元素。第二次分区查找，我们只需要对n/2的数组执行分区操作，需要遍历n/2个元素。依次类推，分区遍历元素的个数为，n/2,n/4,n/8,n/16……直到区间缩小为1。</p><p>如果我们把每次分区遍历的元素个数加起来，就是：n+n/2+n/4+n/8+…+1。这是一个等比数列求和，最后的和等于2n-1。所以，上述的解题思路的时间复杂度就是O(n)。</p><h1 id="思考：-thinking"><a href="#思考：-thinking" class="headerlink" title="思考：:thinking:"></a>思考：:thinking:</h1><p>现在你有 10 个接口访问日志文件，每个日志文件大小约300MB，每个文件里的日志都是按照时间戳从小到大排序的。你希望将这 10 个较小的日志文件，合并为 1 个日志文件，合并之后的日志仍然按照时间戳从小到大排列。如果处理上述排序任务的机器内存只有 1GB，你有什么好的解决思路，能“快速”地将这 10 个日志文件合并吗？</p><h2 id="快排的优化"><a href="#快排的优化" class="headerlink" title="快排的优化"></a>快排的优化</h2><ul><li><p>分组不平衡–导致快排递归深度增加</p><ul><li><p>排序接近有序（基准值划分的两个子数组严重不均衡，此分层下来的结果近乎于n层，此时快排退化为复杂度为O(n^2）排序算法</p><blockquote><p>解决：随机数/三数取中法，让这种出现极端值情况降低</p></blockquote></li><li><p>当待排序集合包含大量的重复元素，由于与基准值相等的元素个数过多，导致数组长度不均衡，此时分层下来的结果几乎n层，快排退化为O(n^2)。  </p><blockquote><p>解决：二路快排    基准值-v    将待排序数组分为2部分  大于或或者小于</p><p>​    将大于和小于v的元素放在数组的两端,i索引不断向后扫描，当i的元素小于v时，i++;j索引不断向前扫描，当j的元素大于v时，j–;当i碰到一个&gt;=v的元素时以及当j碰到一个&lt;=v的元素时，交换i和j的元素，i++,j— 。  </p><p>即保证等于基准值的重复元素被均分到两边 一定程度上使得分组平均，递归深度降低</p></blockquote></li></ul></li></ul><p>  ​    二路快排图解</p><p>  <img src="/2019/03/02/排序(中)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552803918895.png" alt="1552803918895"></p><p>  ​    保证等于基准值的重复元素被均分到两边 一定程度上使得分组平均，递归深度降低</p><p>  <img src="/2019/03/02/排序(中)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552811349512.png" alt="1552811349512"></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决：数据重复的快排---二路归并快排</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a     数组a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 基准值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition2</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> randomIndex = (<span class="keyword">int</span>) ((Math.random() * (right - left + <span class="number">1</span>)) + left);</span><br><span class="line">    swap(a, right, randomIndex);</span><br><span class="line">    <span class="comment">//基准值</span></span><br><span class="line">    <span class="keyword">int</span> v = a[right];</span><br><span class="line">    <span class="comment">//a[left,i-1]   &lt; v</span></span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="comment">//a[j+1,right] &gt;v</span></span><br><span class="line">    <span class="keyword">int</span> j = right - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//双指针前指针向后扫描</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= right &amp;&amp; a[i] &lt; v) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= left &amp;&amp; a[j] &gt; v) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i, j);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, i, right);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>二路快排优化- - - - -三路快排  &lt;  =  &gt;</strong></p></li><li><p><strong>三路快排图解</strong></p><p><img src="/2019/03/02/排序(中)/Users\32183\AppData\Roaming\Typora\typora-user-images\1552804075550.png" alt="1552804075550"></p><p>将大量等于基准值的部分取出来，放到排序数组的中间，下一次进行排序时只需要排序不等于基准值的区域即可</p><p>大大减少排序次数，减少树的深度，又保持了数组的平衡。</p><p><strong>代码实现：</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//*********************快排优化之中级重复数据优化--三路快排</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortOP3</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">&gt;  quickSortInternallyOP3(a, begin, end);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortInternallyOP3</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">if</span> (end - begin &lt; <span class="number">15</span>) &#123;   <span class="comment">//少量数据使用插排</span></span><br><span class="line">&gt;      insertSort(a, begin, end);</span><br><span class="line">&gt;      <span class="keyword">return</span>;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  <span class="keyword">int</span>[] divs = partition3(a, begin, end);</span><br><span class="line">&gt;  <span class="keyword">int</span> div1 = divs[<span class="number">0</span>];</span><br><span class="line">&gt;  <span class="keyword">int</span> div2 = divs[<span class="number">1</span>];</span><br><span class="line">&gt;  quickSortInternallyOP3(a, begin, div1 - <span class="number">1</span>);</span><br><span class="line">&gt;  quickSortInternallyOP3(a, div2 + <span class="number">1</span>, end);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partition3(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">&gt;  <span class="keyword">int</span> randomIndex = (<span class="keyword">int</span>) (Math.random() * (right - left + <span class="number">1</span>) + left);</span><br><span class="line">&gt;  swap(a, randomIndex, left);</span><br><span class="line">&gt;  <span class="keyword">int</span> v = a[left];</span><br><span class="line">&gt;  <span class="keyword">int</span>[] divs = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">&gt;  <span class="comment">//a[left+1....lt] &lt; v</span></span><br><span class="line">&gt;  <span class="keyword">int</span> i = left + <span class="number">1</span>;</span><br><span class="line">&gt;  <span class="keyword">int</span> lt = left;</span><br><span class="line">&gt;  <span class="comment">//a[gt...right]  &lt; v</span></span><br><span class="line">&gt;  <span class="keyword">int</span> gt = right + <span class="number">1</span>;   <span class="comment">// &lt; v的区间</span></span><br><span class="line">&gt;  <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">&gt;      <span class="keyword">if</span> (a[i] &lt; v) &#123;</span><br><span class="line">&gt;          swap(a, lt + <span class="number">1</span>, i);</span><br><span class="line">&gt;          lt++;</span><br><span class="line">&gt;          i++;</span><br><span class="line">&gt;      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; v) &#123;</span><br><span class="line">&gt;          swap(a, gt - <span class="number">1</span>, i);</span><br><span class="line">&gt;          gt--;</span><br><span class="line">&gt;      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&gt;          i++;</span><br><span class="line">&gt;      &#125;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  swap(a, left, lt);</span><br><span class="line">&gt;  divs[<span class="number">0</span>] = lt;</span><br><span class="line">&gt;  divs[<span class="number">1</span>] = gt;</span><br><span class="line">&gt;  <span class="keyword">return</span> divs;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><ul><li><p>影响快排的性能的另一个原因是快排的递归深度，当元素递归区间内的元素数目不大时，利用快排排序则会增加递归深度，增加排序的时间复杂度，何不选用一种处理少量数据比较快速的排序算法–––-插排</p><blockquote><p>当递归区间比较小时，直接引入插排进行排序，减少递归深度</p></blockquote></li></ul><p>​    <strong>快排优化插排</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((end - begin + <span class="number">1</span>) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = a[i];  <span class="comment">//要插入适当位置的值</span></span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>; <span class="comment">//有序区</span></span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; value) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序(下)</title>
      <link href="/2019/03/02/%E6%8E%92%E5%BA%8F(%E4%B8%8B)/"/>
      <url>/2019/03/02/%E6%8E%92%E5%BA%8F(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="13-排序-下-线性排序-strawberry"><a href="#13-排序-下-线性排序-strawberry" class="headerlink" title="[13]排序(下)-线性排序:strawberry:"></a>[13]排序(下)-线性排序:strawberry:</h1><table><thead><tr><th>非基于比较的 线性排序</th><th>时间复杂度</th><th>适用场合</th></tr></thead><tbody><tr><td>桶排序</td><td>O(n)</td><td><strong>数据量大，数据存储在磁盘上，内存有限（数据范围不大）</strong></td></tr><tr><td>计数排序</td><td>O(n)</td><td><strong>计数排序只能用在数据范围不大的场景中</strong></td></tr><tr><td>基数排序</td><td>O(n)</td><td><strong>数据可以划分高低位，且每一位之间后递进关系，每一位范围不能大，因为每一位的稳定排序依赖桶排或者计数排序</strong></td></tr></tbody></table><a id="more"></a><p>桶排序，计数排序，基数排序都是线程排序。之所以可以做到线程的时间复杂度，主要原因是，这三个算法是基于<strong>非比较</strong> 的排序算法，都不设计元素之间的比较操作。</p><p><strong>这几种排序对要排序的数据要求很苛刻，我们重点要学习的是这三种排序的适用场景。</strong> </p><h1 id="思考题-thinking"><a href="#思考题-thinking" class="headerlink" title="思考题:thinking:"></a>思考题:thinking:</h1><p>如何根据年龄给100万用户排序？O(n)</p><h1 id="桶排序-Bucket-Sort-package"><a href="#桶排序-Bucket-Sort-package" class="headerlink" title="桶排序(Bucket Sort):package:"></a>桶排序(Bucket Sort):package:</h1><h2 id="核心思想-collision"><a href="#核心思想-collision" class="headerlink" title="核心思想:collision:"></a><strong>核心思想:collision:</strong></h2><p>将要排序的数据分到几个有序桶中，每个桶里的数据再单独进行排序<strong>。桶内排完序后，再把</strong>每个桶里的数据按照顺序依次取出**，组成的序列就是有序的了。</p><ul><li>将要排序数据分到<strong>有序桶中</strong> </li><li><strong>每个桶中数据进行排序</strong></li><li>桶内排完序后，再把<strong>每个桶里的数据按照顺序依次取出</strong>。</li></ul><h3 id="桶排序为什么是O-n-时间复杂度"><a href="#桶排序为什么是O-n-时间复杂度" class="headerlink" title="桶排序为什么是O(n)时间复杂度"></a><strong>桶排序为什么是O(n)时间复杂度</strong></h3><p><img src="/2019/03/02/排序(下)/婕\数据结构与算法之美\picture\桶排序示例.png" alt="桶排序示例"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析：</strong></h3><p>排序的数据有n个，我们把他们均匀的划分到m个桶内，每个桶就有k=n/m个元素。每个桶内部使用快排，时间复杂度O(K<em>logk)。m个桶排序的时间复杂度就是O(m\</em>klogk),因为k = n/m,所以整个桶排序的时间复杂度就是O(n*log(n/m))。<strong>当桶的个数接近与数据个数n时，log(n/m)就是一个非常小的常量，这时候桶排序的时间复杂度接近O(n)。</strong></p><p><strong>但是</strong>以上能实现O(n)时间复杂度的<strong>前提是</strong></p><p><strong>一是：</strong> </p><blockquote><ul><li><strong>能将数据很容易的划分成n个桶，</strong></li><li><strong>桶与桶之间有着天然的大小顺序。</strong></li></ul></blockquote><p><strong>这样每个桶内的数据都排完序后，桶与桶之间的数据就不需要再进行排序了。</strong></p><p><strong>二是：</strong> </p><blockquote><ul><li><strong>数据再各个桶之间的分布是比较平均的。</strong></li></ul></blockquote><p>如果数据经过桶的划分之后，有些桶里的数据非常多，有些桶里的数据非常的少，很不平均，那通内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为O(nlogn)排序算法了。</p><h2 id="适应场景-sun-with-face"><a href="#适应场景-sun-with-face" class="headerlink" title="适应场景:sun_with_face:"></a>适应场景:sun_with_face:</h2><p><strong>桶排序比较适合用在外部排序中。</strong> <strong><em>所谓的外部排序就是数据存储啊在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</em></strong> </p><h2 id="借助桶排序来处理问题：10G订单数据按照订单金额进行排序"><a href="#借助桶排序来处理问题：10G订单数据按照订单金额进行排序" class="headerlink" title="借助桶排序来处理问题：10G订单数据按照订单金额进行排序"></a>借助桶排序来处理问题：10G订单数据按照订单金额进行排序</h2><p>我们只有几百MB，没办法一次性把10G数据都加载到内存中。这时我们可以利用桶排序的思想来处理这个问题。</p><ol><li><p>我们可以先扫描一遍晚间，看订单金额所处于在金额范围，将订单分到固定个数的桶中</p><blockquote><p>假设我们得到订单金额的范围是<strong>最小是1元到最多是10多万元</strong>，我们根据订单金额将订单分到<strong>100个桶中</strong>去，第一个通我们存储1元~1000之内的定单，第二个桶中存储1001~2000元之内的订单以此类推。</p></blockquote></li><li><p>每个桶对应一个文件（文件有序号），并且按照金额范围大小顺序编号命名(00,01,02…,99).</p><blockquote><p>在理想情况下，如果订单金额从1到10万元之间均匀分布，那么订单会被均匀划分到100个文件中，每个小文件中存储大约100MB的订单数据，我们就可以将100个小文件依次存放到内存中用快排来进行排序，等所有文件都排好序之后，我们只需要按照文件编号，从小到大依次读取每个文件中的订单数据，并将其写入一个大文件中，那么这个文件中存储的就是按照金额从小到达的订单数据了</p></blockquote></li></ol><h3 id="问题：订单金额很有可能并不是均匀分布在1-10万元的内"><a href="#问题：订单金额很有可能并不是均匀分布在1-10万元的内" class="headerlink" title="问题：订单金额很有可能并不是均匀分布在1~10万元的内"></a>问题：订单金额很有可能并不是均匀分布在1~10万元的内</h3><p><strong>递归式划分大文件，直到所有文件都可以被读取到内存中进行快排。</strong></p><p>所以10G订单数据是无法均匀地被划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对用的文件就会很大，没法一次性读取到内存中。</p><p>此时我们需要针对比较大的文件，继续对其进行划分，比如，订单金额咋子1元到1000元之间的比较多，我们就将这个区间继续划分你为10个区间，1元到100元，101到200元…</p><p>假如谋个区间内订单还是太多了，无法一次性读入到内存中，我们就继续划分，直到所有文件都能读入到内存中进行快排。</p><h1 id="计数排序-Counting-Sort-desktop-computer"><a href="#计数排序-Counting-Sort-desktop-computer" class="headerlink" title="计数排序(Counting Sort):desktop_computer:"></a>计数排序(Counting Sort):desktop_computer:</h1><h2 id="适用场景-sunny"><a href="#适用场景-sunny" class="headerlink" title="适用场景:sunny:"></a>适用场景:sunny:</h2><p>计数排序是桶排的一种特殊情况。<strong><em>当要排序的n个数据，所处的范围并不大的时候</em>，比如最大值是k,此时我们就可以把数据划分成k个桶，每个桶内的数据值都是相同的，省略到了桶内排序的时间。</strong> </p><h2 id="高考考生50万排名问题："><a href="#高考考生50万排名问题：" class="headerlink" title="高考考生50万排名问题："></a>高考考生50万排名问题：</h2><p>高考总成绩是900分，最小是0分，这个数据的范围很小，所以我们可以分成901个桶，桶中存储的是对哟个分数的人数。桶内考生的分数相同所以的并不需要再进行排序。我们只需要依次扫描完每个桶，将桶内的考生依次输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p><h2 id="如何实现计数排序？"><a href="#如何实现计数排序？" class="headerlink" title="如何实现计数排序？"></a>如何实现计数排序？</h2><p>我们要实现稳定的计数排序不能单从某个数据对应个数进行对数据的分组。因为那样不能保证相等数据排序前后的相对前后位置不变，所以我们需要两个辅助数组。</p><h3 id="辅助数组C-的创建"><a href="#辅助数组C-的创建" class="headerlink" title="辅助数组C[]的创建"></a>辅助数组C[]的创建</h3><p>一个辅助数组下标表示的是分数，数组内容是小于等于当前下标（分数）的数据个数。</p><p><img src="/2019/03/02/排序(下)/婕\数据结构与算法之美\picture\计数排序辅助数组C.jpg" alt="计数排序辅助数组C"></p><ul><li>排序细节</li></ul><p>我们从后到前依次扫描数组A，为什么从后向前是因为保证计数排序的稳定性。比如我们从后扫描遇到3时，我们可以从数组C中取出下标为3的值7，也就时说，到目前为止，包括这个3在内，分数小于等于3的考生有7个，也就是说3时数组R（排好序的数组）的第7个元素（也就是数组R中下标为6的为止）。当3放入到数组R中后，小于等于3的元素就只剩下了6个，所以相应的C[3]中存储的数值要减1，变成6。</p><p>依次类推，当我们扫描到第2个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置（也就是排序数组下标为5的位置）。当我们扫描完整个数组A后，数组R内的数据就是按照分数从小到大的有序排列了。</p><p><img src="/2019/03/02/排序(下)/婕\数据结构与算法之美\picture\计数排序细节.jpg" alt="计数排序细节"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计数排序，a是数组，n是数组的大小。假设数组存储的都是非负整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countingSorot</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找数组中数据的范围</span></span><br><span class="line">    <span class="keyword">int</span> max = a[o];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; a[i])&#123;</span><br><span class="line">            max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.创建辅助数组C[]</span></span><br><span class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[max+<span class="number">1</span>];<span class="comment">//申请一个计数数组，下标大小[0,max]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= max; i++)&#123;</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算每个元素的个数，放入C中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        c[a[i]]++;     <span class="comment">//拆解 c[下标为分数] 分数=a[i]  c[下标]：分数为下标数的个数++</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//依次累加  得到辅助数组C[]中存储的是小于等于该数的数据个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max; i++)&#123;</span><br><span class="line">        c[i] = c[i-<span class="number">1</span>]+c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.排序数组的创建，排序之后的结果</span></span><br><span class="line">    <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="comment">//计算排序的关键步骤！！！</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n- <span class="number">1</span>; i &gt;= <span class="number">0</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> index = c[a[i]]-<span class="number">1</span>;  <span class="comment">//该分数对应放在排序数组的下标位置</span></span><br><span class="line">        r[index] = a[i];</span><br><span class="line">        c[a[i]]--;<span class="comment">//小于等于该分数的数据个数-1；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将结果拷贝给a数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>； i &lt; n; i++)&#123;</span><br><span class="line">        a[i] = r[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序详解"><a href="#计数排序详解" class="headerlink" title="计数排序详解"></a>计数排序详解</h2><p><strong>计数排序只能用在数据范围不大的场景中，如果数据范围k比要排序的数据n大很多，就不使用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</strong> </p><p>关于将数据转化为能使用计数排序的方法如下：</p><ol><li>如果是分数就将分数化为整数。*10的倍数</li><li>如果是负数就将分数化为整数。+整数</li></ol><h1 id="基数排序（Radix-sort）"><a href="#基数排序（Radix-sort）" class="headerlink" title="基数排序（Radix sort）"></a>基数排序（Radix sort）</h1><p>假设我们要对10万个手机号码进行排序，希望将这10万个手机号码从小到大进行排序？</p><h2 id="对10万个手机号码进行排序"><a href="#对10万个手机号码进行排序" class="headerlink" title="对10万个手机号码进行排序"></a>对10万个手机号码进行排序</h2><p>问题主要特点：</p><ul><li>手机号有11位，假如当作整数来处理范围太大了。我们不能使用桶排，或者计数排序。</li><li>假设我们要比较两个手机号码的a,b的大小，如果在前面几位中，a手机号码已将比b手机号大了，那么后面的几位就不用看了。</li></ul><p>借助稳定排序算法，借助[11]节中举的订单金额时间排序例子，先按照最后一位来排序手机号，然后，再按照倒数地二位重新排序，以此类推，最后按照第一位重新排序。经过11次排序之后，手机号码就有序了。</p><p><img src="/2019/03/02/排序(下)/婕\数据结构与算法之美\picture\基数排序.jpg" alt="基数排序"></p><p>我们每次进行的排序必须是稳定的，这样才不会影响后续位数的排列。</p><p>根据每一位来进行排序，我们可以用到桶排或者计数排序，他们时间复杂度是O(n)。如果要排序的数据位数有k位，那么我们就需要K次桶排序或者计数排序，总时间复杂度就是O(k*n)。当K不大时，比如手机号码的例子，k最大就是11.所以基数排序的时间复杂度就近似与O(n)。</p><h2 id="特殊例子：对字典中20万单词进行排序"><a href="#特殊例子：对字典中20万单词进行排序" class="headerlink" title="特殊例子：对字典中20万单词进行排序"></a><strong>特殊例子</strong>：对字典中20万单词进行排序</h2><ul><li>我们可以把所有单词补齐到相同长度，位数不够的可以在后面补”0”，</li><li>因为根据ASCII值，所有字母大于”0”,所以补”0”不会影响到原有的大小顺序。这样就可以继续用基数排序了。</li></ul><h2 id="适用场景-cat2"><a href="#适用场景-cat2" class="headerlink" title="适用场景:cat2:"></a>适用场景:cat2:</h2><p>基数排序对排序数据又要求<strong>，</strong></p><ul><li><strong>需要分隔出独立的”位”来进行比较，而且位之间有递进的关系</strong>，</li><li><em>如果a数据的高位比b数据大，那剩下的低位就不用比较了</em>。</li><li>除此之外<em>，每一位的数据范围不能太大了</em>，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到O(n)了。</li></ul><h1 id="解答-key"><a href="#解答-key" class="headerlink" title="解答:key:"></a>解答:key:</h1><p>给根据年龄100万用户排序</p><p>类似给50万考生排序，先找到数据的范围,例如最小1岁最大120岁。我们可以遍历100万用户，根据年龄将其划分到这120个桶里，然后依次顺序遍历这个120个桶中的元素。这样就可以得到按照年龄排序100万用户的数据了。</p><h1 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h1><p>桶排序，计数排序，基数排序3种排序对要排序的数据都有比较严苛的要求，应用的不是非常广泛。但是如果数据符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p><p><strong>桶排序和计数排序的排序思想非常相似的，都是针对范围不大的数据，将数据划分为不同的桶来实现排序。</strong></p><p>基数排序要求数据可以划分成<strong>高低位</strong>，<strong>位于位之间有递进关系</strong>。比较两个数，我们只需要比较高位，高位相同的再比较低位。且<strong>每一位得到数据范围不能太大</strong>，因为基数排序算法<strong>需要借助桶排序或者计数排序来完成每一位的排序工作。</strong></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>对大小写字母进行排序，要求大写在前，小写在后。大小写字母内部不要求有序。</strong></p><p>==双指针法（前后指针)==  </p><blockquote><p>前指针从前向后找找到大写字母，后指针从后向前找找到小写字母。然后进行交换，直到两个指针相遇就停止，完成排序。</p></blockquote><p><strong>进阶其中在添加数字，要求数字在中间。</strong></p><p>==分类，两次双指针（前后指针）==</p><blockquote><p>先将数据非为小写字母和非小写字母进行排序，然后再对非小写字母进行数字和大写字母的双指针算法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序(上)</title>
      <link href="/2019/02/27/%E6%8E%92%E5%BA%8F(%E4%B8%8A)/"/>
      <url>/2019/02/27/%E6%8E%92%E5%BA%8F(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="排序章节学习总规划"><a href="#排序章节学习总规划" class="headerlink" title="排序章节学习总规划"></a>排序章节学习总规划</h1><table><thead><tr><th>章节</th><th>排序算法</th><th>时间复杂度</th><th>是否基于比较</th></tr></thead><tbody><tr><td>11</td><td>冒泡，插入，选择</td><td>O(n^2)</td><td>:heavy_check_mark:</td></tr><tr><td>12</td><td>快排，归并</td><td>O(nlogn)</td><td>:heavy_check_mark:</td></tr><tr><td>13</td><td>桶，计数，基数</td><td>O(n)</td><td>:heavy_multiplication_x:</td></tr></tbody></table><a id="more"></a><h1 id="带着问题​-grey-question"><a href="#带着问题​-grey-question" class="headerlink" title="带着问题​ :grey_question:"></a>带着问题​ :grey_question:</h1><p>插排和冒泡排序时间复杂度都是O(n^2)，在实际开发中，为什么更倾向于使用插入排序算法而不是冒泡排序算法？</p><h1 id="11-排序-上-数据结构算法之美-happy"><a href="#11-排序-上-数据结构算法之美-happy" class="headerlink" title="[11] 排序(上) -数据结构算法之美 :happy:"></a>[11] 排序(上) -数据结构算法之美 :happy:</h1><h2 id="分析排序算法的三个方面-thumbsup"><a href="#分析排序算法的三个方面-thumbsup" class="headerlink" title="分析排序算法的三个方面 :thumbsup:"></a>分析排序算法的三个方面 :thumbsup:</h2><h3 id="排序算法的执行效率-1-one"><a href="#排序算法的执行效率-1-one" class="headerlink" title="排序算法的执行效率-1:one:"></a>排序算法的执行效率-1:one:</h3><h4 id="1-最好情况，最坏情况，平均时间复杂度"><a href="#1-最好情况，最坏情况，平均时间复杂度" class="headerlink" title="1.最好情况，最坏情况，平均时间复杂度"></a>1.最好情况，最坏情况，平均时间复杂度</h4><p>我们分析排序算法的时间复杂度的同时也要分析==<strong>最好，最坏时间复杂度对应的要排序的原始数据</strong>==  是什么样的。<strong>（数据已经有序，数据接近有序，数据完全无序，数据逆序）</strong></p><h4 id="2-时间复杂度的系数，常数，低阶"><a href="#2-时间复杂度的系数，常数，低阶" class="headerlink" title="2.时间复杂度的系数，常数，低阶"></a>2.时间复杂度的系数，常数，低阶</h4><p>时间复杂度反应的是数据规模 n 很大的时候的一个增长趋势往往会忽略系数，常数，低阶项。但是实际开发中可能排序数据规模上不一定会规模很大。所以对于同一阶次时间复杂度算法性能对比的时候，我们就要把系数，常数，低阶考虑进来。</p><h4 id="3-比较次数-和-交换-或移动-次数"><a href="#3-比较次数-和-交换-或移动-次数" class="headerlink" title="3.比较次数 和 交换(或移动)次数"></a>3.比较次数 和 交换(或移动)次数</h4><p>基于比较的排序算法，会涉及两种操作，一种是元素比较大小，另一种是元素交换或者移动。所以，我们分析排序算法执行效率的时候，应该把比较次数和交换（或者移动）次数也考虑进去。</p><h3 id="排序算法的内存消耗-2-two"><a href="#排序算法的内存消耗-2-two" class="headerlink" title="排序算法的内存消耗-2:two:"></a>排序算法的内存消耗-2:two:</h3><p>算法的内存消耗：可以通过空间复杂度来衡量。</p><p>针对排序算法的空间复杂度，我们还引入一个新概念，<strong>原地排序（Sorted in place）</strong>:特指空间复杂度是O(1)的排序算法。</p><p><strong>冒泡，插排，选择排序都是原地排序</strong>。</p><h3 id="排序算法的稳定性-3-three"><a href="#排序算法的稳定性-3-three" class="headerlink" title="排序算法的稳定性-3:three:"></a>排序算法的稳定性-3:three:</h3><p>==<strong>稳定性：如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</strong>==</p><p><strong>例1： </strong> </p><p>一组数据 2，9，3，4，8，3按照升序排列，则排完是2，3，3，4，8，9。排序后两个3的先后次序不变。</p><p><strong>例2：</strong> </p><p>交易订单中”订单”排序。订单中有两个属性，一个下单时间，另一个是订单金额。如果说我们现在有10万条订单数据·。我们希望</p><ul><li>按照订单金额从小到大对订单数据进行排序</li><li>对于相同的订单，我们希望按照下单时间从早到晚有序</li></ul><p>对于这样一个排序需求我们应该如何去做呢？</p><p>先对整个<strong>订单数据按照下单时间进行升序排列(可以不是使用稳定排序)</strong>，然后再整体使用<strong>稳定排序算法，按订单金额重新排序</strong>即可。</p><p><strong>分析：</strong> 稳定排序算法可以保持金额相同的对象，在排序之后前后顺序不变。第一次排序之后，所有订单按照下单时间从早到晚就有序了。<strong>第二次排序中，我们用的是稳定的排序算法，所以经过第二次排序之后，相同金额的订单仍然保持下单时间从早到晚有序。</strong> </p><h2 id="冒泡排序-Bubble-Sort-right-anger-bubble"><a href="#冒泡排序-Bubble-Sort-right-anger-bubble" class="headerlink" title="冒泡排序(Bubble Sort) :right_anger_bubble:"></a>冒泡排序(Bubble Sort) :right_anger_bubble:</h2><p>冒泡排序只会操作<em>相邻的两个数据</em>。每次冒泡都会对相邻的两个元素进行比较，看是否满足大小关系的要求。如果不满足就让他俩互换。<strong>一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了n个数据的排序工作</strong> </p><p><strong>优化：</strong>当某次冒泡操作已经没有数据交换时，说明已经达到完全有序，不用再继续执行后面的冒泡操作了。</p><p><strong>优化前：</strong> </p><p><img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\冒泡排序算法图.jpg" alt="冒泡排序算法图"></p><p><strong>优化后：</strong> </p><p><img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\冒泡排序算法图优化.jpg" alt="冒泡排序算法图优化"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序，a表示数组，n表示数组大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123; <span class="comment">//如果只有元素，不需要排序</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="comment">//提前退出冒泡循环的标志位</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; n-i-<span class="number">1</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="keyword">true</span>; <span class="comment">//表示有数据交换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//没有数据交换，提前退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序算法分析"><a href="#冒泡排序算法分析" class="headerlink" title="冒泡排序算法分析"></a>冒泡排序算法分析</h3><ul><li><p><strong>冒泡排序是原地排序算法</strong></p><p>冒泡排序冒泡过程<strong>只涉及相邻的数据交换操作</strong>，是原地排序算法，只需要常量级临时空间。空间复杂度是O(1)，是一个原地排序算法。</p></li><li><p><strong>冒泡排序是稳定排序算法</strong></p><p>交换时值改变了两个元素的前后顺序。为了保证冒泡排序算法的稳定性<em>，我们在比较时规定当有相邻元素大小相同时，我们不做交换</em>，<strong>相同大小的数据在排序前后不会改变顺序</strong>，所以冒泡排序是稳定的排序算法。</p></li><li><p>冒泡排序时间复杂度。最好，最坏，平均</p><p>| 时间复杂度             | 对应原始数据                     |<br>| ———————- | ——————————– |<br>| 最好时间复杂度：O(n)   | 1,2,3,4,5,6 从头到尾遍历一遍数组 |<br>| 最坏时间复杂度：O(n^2) | 6,5,4,3,2,1                      |<br>| 平均时间复杂度：O(n^2) | 数据的有序度的平均水平           |</p><p>平均时间复杂度运用概率论的方法难以计算，引入一个<strong>有序度</strong>的概念</p></li></ul><p>​    <strong>有序度：</strong> 是数组中具有有序关系的元素对的个数。有序元素对用数学表达式表式就是</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 有序元素对：a[i] &lt;= a[j],如果i&lt;j</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>​    <strong>满序度：</strong>完全有序的序列，的有序对数</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 满序度:排序完成后终态有序度为   n*(n-<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>​    <strong>逆序度：数组中无序逆序关系得元素对的个数。</strong> </p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 逆序度对：a[i] &gt; a[j],如果i&lt;j</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>​                                                    <strong>逆序度 = 满序度-有序度</strong> </p><p>​    拿之前的那个例子来说，数组初始状态是4，5，6，3，2，1。其中有序对有(4,5)(4,6)(5,6)</p><p>​    所以有序度是3。n=6,所以排序完成之后终态满有序度为n*(n-1)/2=15。</p><p>​    <img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\有序度规律.jpg" alt="有序度规律"></p><p>冒泡排序包含的<strong>两个原子操作，比较</strong>和<strong>交换</strong>。每冒泡（交换）一次，有序度就加1，不管算法怎么改进交换次数总是确定的。即为<strong>逆序度，也就是n*(n-1)/2-初始有序度。</strong>在这个例子中15-3 = 12则要进行12次交换操作。</p><p>对于包含n个数据的冒泡排序平均交换次数是多少呢？最坏情况下，初始状态的有序度是 0，所所以要进行 n<em>(n-1)/2 次交换。最好情况下，初始状态的有序度是 n</em>(n-1)/2，就不需要进行交换。我们可以取个中间值 n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。换句话说，平均情况下，需要 n*(n-1)/4 次交换操作，<strong>比较操作肯定要比交换操作多，而复杂度的上限是 O(n2)，所以平均情况下的时间复杂度就是 O(n2)。</strong> </p><h2 id="插入排序-Insertion-Sort-diamond-shape-with-a-dot-inside"><a href="#插入排序-Insertion-Sort-diamond-shape-with-a-dot-inside" class="headerlink" title="插入排序(Insertion Sort):diamond_shape_with_a_dot_inside:"></a>插入排序(Insertion Sort):diamond_shape_with_a_dot_inside:</h2><p>将数组中的数据分为两个区间，已<strong>排序区间和未排序区间</strong>。<strong>初始已排序区间只有一个元素，就是数组的第一个元素。</strong>==插入算法的核心思想是<strong>取未排序区间中的元素。在已排序区间中找到合适的插入位置将其插入，并确保已排序区间数据一直有序</strong>。== 重复这个过程，<strong>直到未排序区间中元素为空，则排序就完成了。</strong> </p><p>插入排序也包含<strong>两种操作，元素的比较，元素的移动</strong>。当我们需要将一个数据a插入到已排序区间时，需要拿<strong>a与已排序区间的元素依次比较大小</strong>，<strong>找到合适的插入位置</strong>。找到合适的插入位置后，我们还需要将<strong>插入点之后的元素统一往后移动一位，腾出空间给元素插入</strong>。</p><p>对于不同的查找插入点方法（从头到尾，从尾到头）,元素的<strong>比较次数是有区别的</strong> 。但是对于一个给定的初始序列，<strong>移动操作的次数总是固定的，就等于逆序度</strong>。</p><blockquote><p>初始有序度为5，满序度为n*(n-1)/2=15,逆序度为10，插入排序一定数据总和也等于10 =3+3+4</p></blockquote><p><img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\插排算法图.jpg" alt="插排排序图"></p><p><strong>代码入下：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序，a表示数组，n表示数组大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> value = a[i]; <span class="comment">//记录要插入的元素</span></span><br><span class="line">        <span class="keyword">int</span> j = i-<span class="number">1</span>; <span class="comment">//已排序区</span></span><br><span class="line">        <span class="comment">//查找插入位置</span></span><br><span class="line">        <span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; value)&#123;</span><br><span class="line">                a[j+<span class="number">1</span>] = a[j];<span class="comment">//数据移动</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = value; <span class="comment">//将要插入的位置插入合适的位置，有序区数量+1，无序区数量-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序算法分析"><a href="#插入排序算法分析" class="headerlink" title="插入排序算法分析"></a>插入排序算法分析</h3><ul><li><p><strong>插入排序是原地排序</strong></p><p>不需要额外的空间，空间复杂度O(1)</p></li><li><p><strong>插入排序是稳定排序</strong> </p><p>在插入排序中，对于值相同的元素，我们规定<strong>将后面的出现的元素，插入到前面出现元素的后面，这样就可以保持原有的前后顺序不变，所以插入排序是稳定的排序算法。</strong></p></li><li><p><strong>插入排序的时间复杂度</strong></p><p>| 时间复杂度             | 对应原始数据                          |<br>| ———————- | ————————————- |<br>| 最好时间复杂度：O(n)   | 1,2,3,4,5,6 从头到尾遍历一遍数组      |<br>| 最坏时间复杂度：O(n^2) | 6,5,4,3,2,1                           |<br>| 平均时间复杂度：O(n^2) | 在数组中插入一个数据O(n)，循环执行n次 |</p></li></ul><p>数组中插入一个元素时间复杂度O(n):（1+2+3+4+…n)/n = O(n)</p><h2 id="选择排序-Selection-Sort-aquarius"><a href="#选择排序-Selection-Sort-aquarius" class="headerlink" title="选择排序(Selection Sort):aquarius:"></a>选择排序(Selection Sort):aquarius:</h2><p>选择排序与插排类似，也分为<strong>排序区和未排序区</strong>。但是选择排序每次会==<strong>从未排序区间中找到最小的元素，将其放到已经排好序的末尾。</strong>== </p><p><img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\选择排序算法图.jpg" alt="选择排序算法图"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fot(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> minindex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[minindex])&#123;</span><br><span class="line">                 minindex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[minindex];</span><br><span class="line">            a[minindex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序算法分析"><a href="#选择排序算法分析" class="headerlink" title="选择排序算法分析"></a>选择排序算法分析</h3><ul><li><p><strong>选择排序是原地排序</strong></p><p>不需要额外的空间，空间复杂度O(1)</p></li><li><p><strong>选择排序==不== 是一种稳定排序</strong></p><p>从图中可以看出，排序过程中将最小元素和最后一位交换位置，则会导致最后一位元素可能会移动到和它值相同的元素的前面，波坏了稳定性</p></li><li><p><strong>选择排序时间复杂度</strong></p><p>| 时间复杂度             | 对应原始数据                                   |<br>| ———————- | ———————————————- |<br>| 最好时间复杂度：O(n^2) | 无论原始数据如何，时间复杂度都是O(n^2)         |<br>| 最坏时间复杂度：O(n^2) | 原因是：查找无序区间的最小值总得遍历一遍无序区 |<br>| 平均时间复杂度：O(n^2) |                                                |</p></li></ul><p>逊色冒泡，插入排序。</p><h1 id="解答开始的问题-key"><a href="#解答开始的问题-key" class="headerlink" title="解答开始的问题:key:"></a>解答开始的问题:key:</h1><p>我们来看开篇的问题：插排和冒泡排序时间复杂度都是O(n^2)，在实际开发中，为什么更倾向于使用插入排序算法而不是冒泡排序算法？</p><p><strong>我们分析了冒泡排序和插入排序，不管如何优化，元素交换次数是一个都定值，即原始数据的无序度</strong></p><p>但是从代码实现上来看，==<strong>冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序有要3个赋值操作，而插入排序只需要1个赋值操作。</strong>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序中数据的交换操作：</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) &#123; <span class="comment">// 交换</span></span><br><span class="line">   <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">   a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">   a[j+<span class="number">1</span>] = tmp;</span><br><span class="line">   flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">插入排序中数据的移动操作：</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; value) &#123;</span><br><span class="line">  a[j+<span class="number">1</span>] = a[j];  <span class="comment">// 数据移动</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们把执行一个赋值语句的时间粗略记为单位时间（unit_time）,然后分别用冒泡排序和插入排序对同一个逆序度为k的数组进行排序，需要进行k次交换操作。冒泡排序，每次需要进行3条赋值语句，所以交换操作总耗时就是==3*k== 单位时间，而插入排序中数据移动操作只需要==k== 个单位时间。</strong></p><p>虽然冒泡排序和插入排序在时间复杂度上是一样的，都是O(n^2),但是我们希望把性能优化到极致，所以我们首选插入排序。插入排序还可以进行进一步优化。比如==<strong>希尔排序</strong>== </p><h1 id="小结-package"><a href="#小结-package" class="headerlink" title="小结:package:"></a>小结:package:</h1><p><img src="/2019/02/27/排序(上)/婕\数据结构与算法之美\picture\小结.jpg" alt="小结"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度分析(下)</title>
      <link href="/2019/02/26/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/"/>
      <url>/2019/02/26/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="复杂度分析（下）：浅析、最坏、平均、均摊时间复杂度"><a href="#复杂度分析（下）：浅析、最坏、平均、均摊时间复杂度" class="headerlink" title="复杂度分析（下）：浅析、最坏、平均、均摊时间复杂度"></a>复杂度分析（下）：浅析、最坏、平均、均摊时间复杂度</h1><p>应用场景主键增加：</p><h2 id="最好时间复杂度："><a href="#最好时间复杂度：" class="headerlink" title="最好时间复杂度："></a>最好时间复杂度：</h2><blockquote><p>在最理想的情况下，执行这段代码的时间复杂度。</p></blockquote><h2 id="最坏时间复杂度："><a href="#最坏时间复杂度：" class="headerlink" title="最坏时间复杂度："></a>最坏时间复杂度：</h2><blockquote><p>在最糟糕的情况下，执行这段代码的时间复杂度</p></blockquote><h2 id="平均时间复杂度："><a href="#平均时间复杂度：" class="headerlink" title="平均时间复杂度："></a>平均时间复杂度：</h2><blockquote><p>使用概率论知识计算每一个情况出现的概率这个值就是概率论中的加权平均值，也称作期望值，所以平均时间复杂度的全称应该是  <strong>加权平均时间复杂度</strong>或者 <strong>期望时间复杂度。</strong></p></blockquote><h2 id="均摊时间复杂度：平均时间复杂度的特殊情况"><a href="#均摊时间复杂度：平均时间复杂度的特殊情况" class="headerlink" title="均摊时间复杂度：平均时间复杂度的特殊情况"></a>均摊时间复杂度：平均时间复杂度的特殊情况</h2><p>均摊时间复杂度就是一种特殊的平均时间复杂度</p><a id="more"></a><blockquote><p>通过摊还分析：对一个数据结构进行一组连续操作中，大部分情况下时间复杂度有都很低，只有个别情况下时间复杂度比较高而且这个操作之间存在前后连贯的时序问题，<strong>这个时候，我们就可以将这组操作放在一块分析，看能否能将较高时间复杂度的那次操作的耗时，平摊到其他时间复杂度比较低的操作上。</strong>而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间时间复杂度就等于最好时间复杂度。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量，大小为 10 的数组 array，长度 len，下标 i。</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往数组中添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// 数组空间不够了</span></span><br><span class="line">     <span class="comment">// 重新申请一个 2 倍大小的数组空间</span></span><br><span class="line">     <span class="keyword">int</span> new_array[] = <span class="keyword">new</span> <span class="keyword">int</span>[len*<span class="number">2</span>];</span><br><span class="line">     <span class="comment">// 把原来 array 数组中的数据依次 copy 到 new_array</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = <span class="built_in">array</span>[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array 复制给 array，array 现在大小就是 2 倍 len 了</span></span><br><span class="line">     <span class="built_in">array</span> = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将 element 放到下标为 i 的位置，下标 i 加 1</span></span><br><span class="line">   <span class="built_in">array</span>[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><p>最好时间复杂度分析：O(1)：没有扩容存储数据的的时候</p><p>最坏时间复杂度分析：O(n)：扩容存储数据的时候</p><p>平均时间复杂度分析：归为一类分析其中一种即可</p></blockquote><blockquote><p>均摊时间复杂度分析：O(1)(为扩容)、 O(n)（扩容时） 均摊后O(1)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度分析(上)</title>
      <link href="/2019/02/26/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/"/>
      <url>/2019/02/26/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><h1 id="常见时间复杂度"><a href="#常见时间复杂度" class="headerlink" title="常见时间复杂度"></a>常见时间复杂度</h1><h2 id="1-O-1-常量阶时间复杂度"><a href="#1-O-1-常量阶时间复杂度" class="headerlink" title="1.O(1):常量阶时间复杂度"></a><strong>1.O(1):常量阶时间复杂度</strong></h2><p>算法中存在循环语句，递归语句，时间复杂度不会随着n的增加而增加。</p><h2 id="2-O-logn-、O-nlogn"><a href="#2-O-logn-、O-nlogn" class="headerlink" title="2.O(logn)、O(nlogn):"></a><strong>2.O(logn)、O(nlogn):</strong></h2><p>对数阶时间复杂度<br>$$<br>判断循环条件不满足时，将变量的变化的过程用函数表示，表示出来的公式是一个\logx_n判断变化了多少此即可。<br>$$</p><p>$$<br>即使\log_2 n,\log_3n,\log_4n——&gt;都是\log_n对数之间可以进行转换。为什么，可使用O(logn)表示呢，因为如下：<br>$$</p><p>$$<br>\log_3n= \log_32 <em> \log_2n =O(C</em>\log_2n) 其中C = \log_32是一个常量。基于我们前面的一个理论：在采用大O(\log_n)标记复<br>$$</p><p>$$<br>杂度的时候，可以忽略系数，即O(Cf(n)) = O(f(n))。所以，O(\log_2n)就等于O(\log_3n)。因此，在对数阶时间复杂度的表示放法里，我们忽略对数的“底”,统一表示为O(\log_n)。<br>$$</p><p>如果一段代码的时间复杂度是 O(logn)，我们循环执行 我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。</p><p><strong>时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长的关系。</strong></p><a id="more"></a><h1 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a>2.空间复杂度</h1><p>类比时间复杂度，空间复杂度主要取决于，空间存储变量的开辟的大小</p><p><img src="/2019/02/26/时间复杂度分析-上/常用时间复杂度.png" alt="常用时间复杂度"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法之美 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再识java--集合框架</title>
      <link href="/2019/02/19/%E5%86%8D%E8%AF%86java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/02/19/%E5%86%8D%E8%AF%86java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="集合产生原因"><a href="#集合产生原因" class="headerlink" title="集合产生原因"></a>集合产生原因</h1><ul><li><p>集合产生背景：</p><ul><li>JDK1.2-产生集合框架类集</li></ul></li><li><p>集合的作用</p><ul><li>保存数据</li><li>数组定长问题，集合本质上是一个动态数组</li></ul></li></ul><h2 id="Collection接口-保存单个元素的最大父接口"><a href="#Collection接口-保存单个元素的最大父接口" class="headerlink" title="Collection接口:保存单个元素的最大父接口"></a>Collection接口:保存单个元素的最大父接口</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="function"><span class="keyword">public</span> bollean <span class="title">add</span><span class="params">()</span></span>; <span class="comment">//添加元素</span></span><br><span class="line"><span class="number">2</span>.<span class="function"><span class="keyword">public</span> bollean <span class="title">remove</span><span class="params">()</span></span>;<span class="comment">//删除集合中元素</span></span><br><span class="line"><span class="number">3</span>.<span class="function"><span class="keyword">public</span> bollean <span class="title">contains</span><span class="params">()</span></span>;<span class="comment">//查看集合中是否有这个元素</span></span><br><span class="line"><span class="number">4</span>.<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//清空集合元素</span></span><br><span class="line"><span class="number">6</span>.<span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合转变为对象数组</span></span><br><span class="line"><span class="number">5</span>.<span class="keyword">public</span> Iterator&lt;?&gt;iterator();<span class="comment">//获得集合的迭代器</span></span><br></pre></td></tr></table></figure><h3 id="List：允许数据重复"><a href="#List：允许数据重复" class="headerlink" title="List：允许数据重复"></a>List：允许数据重复</h3><h4 id="独有的方法"><a href="#独有的方法" class="headerlink" title="独有的方法:"></a>独有的方法:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span>：<span class="comment">//根据索引下标取得数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E set（<span class="keyword">int</span> index,E element)<span class="comment">//根据索引下标更新数据，返回修改之前的数据</span></span></span><br></pre></td></tr></table></figure><p><a href="http://naotu.baidu.com/file/7e2ce9e67efeed3fc5b3f442c30d27c3" target="_blank" rel="noopener">ArrayList,Vectory,LinkedList</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
            <tag> 集合框架学习+源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再识java包装类</title>
      <link href="/2019/02/13/%E5%86%8D%E8%AF%86java%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
      <url>/2019/02/13/%E5%86%8D%E8%AF%86java%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>​     </p><h1 id="包装类（Java三个特殊类）"><a href="#包装类（Java三个特殊类）" class="headerlink" title="包装类（Java三个特殊类）"></a>包装类（Java三个特殊类）</h1><p>Object 类可以接收所有引用类型，但是不能接收基本数据类型。包装类就是给基本数据的处理来使用。</p><h2 id="包装类的基本使用"><a href="#包装类的基本使用" class="headerlink" title="包装类的基本使用"></a>包装类的基本使用</h2><p>包装类就将基本数据类型封装到类中</p><p>自定义一个包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntDemo</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​         这时IntDemo就像相当于int数据类型的包装类，利用IntValue就可以实现基本的数据类型变为对象的需求了（供Obejct使用）</p><a id="more"></a> <p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line"><span class="comment">// 子类对象向上转型        </span></span><br><span class="line">Object obj = <span class="keyword">new</span> IntDemo(<span class="number">55</span>) ;         </span><br><span class="line">IntDemo temp = (IntDemo) obj ; <span class="comment">// 向下转型        </span></span><br><span class="line">System.out.println(temp.intValue()); <span class="comment">// 取出里面的基本数据类型操作  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：将基本数据类型包装为一个包装类一个类对象的本质就是使用Object进行接收处理</p><p>但是Java中有8个数据类型，如果以上都需要进行认为编写，则会存在以下问题</p><blockquote><ol><li>开发中代码重复太多</li><li>进行数学计算的时候，必须利用明确的方法将包装的数据取出后才进行运算。</li></ol></blockquote><p>为了方便开发，Java引入包装类的使用，以下提供了两种类型</p><ul><li>对象型(Object的直接子类):Boolean,Character(char);</li><li>数值型(Number的直接子类):Byte,Short,Long,Integer(int),Float;</li></ul><h2 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h2><p>在包装类于基本数据类型处理中存有两个概念：</p><ul><li><strong>装箱：</strong>将基本数据类型变为包装类对象，利用每一个<strong>包装类提供的构造方法实现装箱处理</strong>。</li><li><strong>拆箱：</strong>将包装类中包装的基本数据类型取出。利用<strong>Number类中提供的6中方法</strong>。</li></ul><p><strong>eg:以int和Integer为例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer num = <span class="keyword">new</span> Integer(<span class="number">55</span>);<span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> data = num.intValue();<span class="comment">//拆箱</span></span><br><span class="line">System.out.println(data);</span><br></pre></td></tr></table></figure><p>以上操作采用的时手工的装箱和拆箱。<strong>在JDK1.5之后，提供了自动拆装箱的机制</strong>，最为重要的是，由于此类机制的存在，可以直接利用包装类的对象进行各种数学计算。</p><p><strong>eg:自动拆装箱</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer x = <span class="number">55</span>;</span><br><span class="line"><span class="comment">//可以直接理应包装类对象操作(自动拆箱)</span></span><br><span class="line">System.out.println(++x*<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="引出问题："><a href="#引出问题：" class="headerlink" title="引出问题："></a>引出问题：</h3><p><strong>阿里编码规范—：</strong> 相同类型的包装类对象之间值的比较，全部使用equals方法比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      Integer num1 = <span class="keyword">new</span> Integer(<span class="number">10</span>) ;         </span><br><span class="line">      Integer num2 = <span class="keyword">new</span> Integer(<span class="number">10</span>) ;</span><br><span class="line">Integer num3 = <span class="number">10</span>;</span><br><span class="line">Integer num4 = <span class="number">10</span>；</span><br><span class="line"><span class="keyword">int</span> num5 = <span class="number">10</span>;</span><br><span class="line">      System.out.println(num1 == num2);<span class="comment">//false  原因-128&lt;10&lt;127 //比较对象</span></span><br><span class="line">      System.out.println(num1 == <span class="keyword">new</span> Integer(<span class="number">10</span>)); <span class="comment">//false     //比较对象</span></span><br><span class="line">System.out.println(num3 == num4);<span class="comment">//true      //Integer最小缓存机制</span></span><br><span class="line">System.out.println(num1 == num3);<span class="comment">//false //其中一个是对象则就是对象比较</span></span><br><span class="line">System.out.println(num1 == num5);<span class="comment">//自动拆箱，Integer类型与int类型比较，Integer类型自动拆箱变为int类型</span></span><br><span class="line">System.out.println(num3 == num5);<span class="comment">//同上</span></span><br><span class="line">      System.out.println(num1.equals(<span class="keyword">new</span> Integer(<span class="number">10</span>)));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>说明：对于Integer var = ?在-128~128范围内的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外所有的数据，都会在堆上产生，并不会复用已有对象。</p><p>【强力推荐】相同类型的包装类对象之间值的比较，全部使用equals方法比较</p><h2 id="阿里编码规范："><a href="#阿里编码规范：" class="headerlink" title="阿里编码规范："></a>阿里编码规范：</h2><p>关于基本数据类型与包装类型的使用标准如下：</p><ol><li>【强制】所有POJO类属性必须使用包装类数据类型。</li><li>【强制】RPC方法的返回值和参数必须使用包装类数据类型。</li><li>【推荐】所有的局部变量使用基本数据类型。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
            <tag> 包装类-自动拆装箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构复习专用</title>
      <link href="/2019/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E4%B8%93%E7%94%A8/"/>
      <url>/2019/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E4%B8%93%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>[TOC]</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><a id="more"></a><h3 id="求众数"><a href="#求众数" class="headerlink" title="求众数"></a>求众数</h3><p><strong>示例：</strong></p><p>给定一个大小为 <em>n</em> 的数组，找到其中的众数。众数是指在数组中出现次数<strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,1,1,1,2,2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>解题：</strong></p><p>利用一个计数器记录目标数据出现的次数，相同目标次数+1，不同则目标次数-1。一旦计数器变为0则改变目标数据为正在遍历的下一个数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;  <span class="comment">//计数器</span></span><br><span class="line">        <span class="keyword">int</span> maj = nums[<span class="number">0</span>];   <span class="comment">//目标数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maj == nums[i])&#123; <span class="comment">//相同+1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--; <span class="comment">//计数器-1</span></span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">0</span>)&#123; <span class="comment">//如果计数器变为0（出现次数小于当前遍历过数组长度）</span></span><br><span class="line">                    maj = nums[i+<span class="number">1</span>];<span class="comment">//改变目标数据</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解题2：</strong>排序,然后利用出现次数大于length/2。定位到数组下标即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="反转单链表-LeetCode206"><a href="#反转单链表-LeetCode206" class="headerlink" title="反转单链表 [LeetCode206]"></a>反转单链表 [LeetCode206]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode per = <span class="keyword">null</span>;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = per;</span><br><span class="line">            per = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> per;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p>其实就只一直在将<code>cur.next=pre</code>，然后pre变为cur,cur变为next。</p><p><img src="/2019/01/31/数据结构复习专用/反转单链表图解.png" alt="反转单链表图解"></p><h3 id="环形链表（链表是否带环）-LeetCode141"><a href="#环形链表（链表是否带环）-LeetCode141" class="headerlink" title="环形链表（链表是否带环）[LeetCode141]"></a>环形链表（链表是否带环）[LeetCode141]</h3><p><strong>示例1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><p><strong>解答：</strong></p><ol><li><p><strong>利用哈希表Set（无重复值）存储链表节点，头节点向后遍历，只要走到相同的节点，就带环</strong></p><p><strong>反之只要头节点向后遍历到null，则链表无环。</strong></p><p><strong>时间复杂度O(n) 空间复杂度O(n)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(head);</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>利用快慢指针，相差一步的快慢指针，</strong></p><p><strong>时间复杂度O(n) 空间复杂度O(n)</strong></p><p><strong>关于为什么是一个走两步，一个走一步的原因：既然是要相遇，如果快指针走三步，它每次会跳过两个节点，慢指针一次只能走一步，这就可能会错过。快指针每次走两步的话，只会跳过一个节点，无论如何后都会和慢指针相遇。</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">while</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序链表-LeetCode21"><a href="#合并两个有序链表-LeetCode21" class="headerlink" title="合并两个有序链表[LeetCode21]"></a>合并两个有序链表[LeetCode21]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//带头结点的新链表</span></span><br><span class="line">        ListNode cur = newNode;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&amp;&amp;l2!=<span class="keyword">null</span>)&#123;<span class="comment">//谁小，新链表接谁</span></span><br><span class="line">            <span class="keyword">if</span>(l1.val&gt;l2.val)&#123;</span><br><span class="line">                 cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;     <span class="comment">//一个链表完了直接接另一个有序列表</span></span><br><span class="line">            cur.next=l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表的倒数第N个节点-LeetCode19"><a href="#删除链表的倒数第N个节点-LeetCode19" class="headerlink" title="删除链表的倒数第N个节点[LeetCode19]"></a>删除链表的倒数第N个节点[LeetCode19]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>解答：</strong> </p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode newhead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//带头节点</span></span><br><span class="line">        newhead.next = head;</span><br><span class="line">        ListNode fast = newhead;</span><br><span class="line">        ListNode slow = newhead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123; <span class="comment">//快指针先走n+1步</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;  <span class="comment">//同时走</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;  倒数第n个节点的前一个节点</span><br><span class="line">        <span class="keyword">return</span> newhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求链表的中间结点-LeetCode876"><a href="#求链表的中间结点-LeetCode876" class="headerlink" title="求链表的中间结点[LeetCode876]"></a>求链表的中间结点[LeetCode876]</h3><p><strong>示例：</strong></p><p>给定一个带有头结点 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5]</span><br><span class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</span><br><span class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br><span class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><p><strong>快慢指针法</strong></p><ul><li>时间复杂度：O(N)<em>O</em>(<em>N</em>)，其中 N<em>N</em> 是给定列表的结点数目</li><li>空间复杂度：O(1)<em>O</em>(1)，<code>slow</code> 和 <code>fast</code> 用去的空间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast =fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="有效括号-LeetCode20"><a href="#有效括号-LeetCode20" class="headerlink" title="有效括号[LeetCode20]"></a>有效括号[LeetCode20]</h3><p><strong>示例：</strong> </p><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>解答：利用哈希表以Key-Value模型 存储要匹配的两个字符</strong> </p><p>例如： <code>map.put(&#39;)&#39;,&#39;(&#39;);</code>假如出现’)’则在此相邻的必定出现了’(‘与之相对，所以将出现的未匹配成功的字符（匹配字符的左括号）压入栈中，等待右括号出现，立马进行出栈确认，在栈为字符串中率先出现一个右括号则在栈中压入一个“#“。则获取匹配已经失败。</p><p>反之当字符串都经历了这个流程后栈为空时，此时字符串括号匹配。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character,Character&gt; mappings; <span class="comment">//存储括号的对应值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap&lt;Character,Character&gt;();</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;(); <span class="comment">//括号匹配栈</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123; <span class="comment">//按照字符拆分字符串</span></span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="comment">//如果字符串中的字符是一个右半括号</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.mappings.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">char</span> toElement = stack.empty()? <span class="string">'#'</span> :stack.pop();</span><br><span class="line">                <span class="comment">//按照key查找对应的value值即可</span></span><br><span class="line">                <span class="keyword">if</span>(toElement != <span class="keyword">this</span>.mappings.get(c))&#123; <span class="comment">//括号匹配则继续进行，不匹配则返回不匹配</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果字符串中是一个左半括号</span></span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小栈-LeetCode155"><a href="#最小栈-LeetCode155" class="headerlink" title="最小栈[LeetCode155]"></a>最小栈[LeetCode155]</h3><p><strong>示例：</strong></p><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><p><strong>解答：双栈（主栈+最小栈）/（单栈模拟双栈）</strong></p><p><strong>双栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Stack &lt;Integer&gt;stack;</span><br><span class="line">    Stack &lt;Integer&gt;minStack;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.minStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  <span class="comment">//无论如何双栈中压入元素个数相同</span></span><br><span class="line">        <span class="keyword">if</span>(minStack.isEmpty()||x&lt;minStack.peek())</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        minStack.push(minStack.peek());</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;  <span class="comment">//无论如何双栈中抛出元素个数相同</span></span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>单栈模拟双栈：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Stack &lt;Integer&gt;stack;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">            stack.push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.peek();</span><br><span class="line">            stack.push(x);</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;x)&#123;</span><br><span class="line">                stack.push(temp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.get(stack.size()-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="用栈实现队列-LeetCode232"><a href="#用栈实现队列-LeetCode232" class="headerlink" title="用栈实现队列[LeetCode232]"></a>用栈实现队列[LeetCode232]</h3><p><strong>示例：</strong></p><p>使用栈实现队列的下列操作：</p><ul><li>push(x) – 将一个元素放入队列的尾部。</li><li>pop() – 从队列首部移除元素。</li><li>peek() – 返回队列首部的元素。</li><li>empty() – 返回队列是否为空。</li></ul><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);  </span><br><span class="line">queue.peek();  <span class="comment">// 返回 1</span></span><br><span class="line">queue.pop();   <span class="comment">// 返回 1</span></span><br><span class="line">queue.empty(); <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>你只能使用标准的栈操作 – 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><p><strong>解答：</strong> </p><p>利用两个栈，一个栈默认用来存放数据，另一个栈用来实现数据的反转，使用原本栈的操作，来模拟实现队列的出入，查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s1;  <span class="comment">//来回倒数据数据实现出队列入队列的栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; sQueue; <span class="comment">//固定一个栈为存储数据的栈</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1 = <span class="keyword">new</span> Stack();</span><br><span class="line">        sQueue = <span class="keyword">new</span> Stack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//入队列的时候就将数据倒好</span></span><br><span class="line">        <span class="keyword">while</span>(!sQueue.isEmpty())&#123;</span><br><span class="line">            s1.push(sQueue.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        sQueue.push(x);</span><br><span class="line">        <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">            sQueue.push(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sQueue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sQueue.pop();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sQueue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sQueue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sQueue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>另一种解法：异曲同工之妙</strong> </p><p><strong>第一种解法，在入队列的时候倒数据。这种解法，只有在出队列的时候或者查看队列头的时候倒数据。每次出队列就在出队列的栈中出，而入队列的时候只需要将数据入到入队列的栈中。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; inStack;</span><br><span class="line">    Stack&lt;Integer&gt; outStack;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inStack = <span class="keyword">new</span> Stack();</span><br><span class="line">        outStack = <span class="keyword">new</span> Stack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        inStack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!inStack.isEmpty())&#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!inStack.isEmpty())&#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inStack.isEmpty()&amp;&amp;outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="比较含退格的字符串-LeetCode844"><a href="#比较含退格的字符串-LeetCode844" class="headerlink" title="比较含退格的字符串[LeetCode844]"></a>比较含退格的字符串[LeetCode844]</h3><p>示例：</p><p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;ab#c&quot;, T = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;ab##&quot;, T = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “”。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;a##c&quot;, T = &quot;#a#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “c”。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;a#c&quot;, T = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：S 会变成 “c”，但 T 仍然是 “b”。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code>。</li></ol><p><strong>解题：</strong></p><blockquote><ul><li><p>第一感觉是需要使用一个可以执行插入，删除的数据结构用于存储字符串。数组，链表，栈，队列，可变字符串</p></li><li><p>又因为‘#’这个操作是回退，即删除该字符前的一个字符，就类似于键盘上的Backspace按键。“后进先出”-栈</p></li><li><p>两个字符串-双栈</p></li><li>删除，写入就如同入栈出栈，最后比较栈中元素即可。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//双栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; s1 = <span class="keyword">new</span> Stack(); <span class="comment">//字符串1的栈</span></span><br><span class="line">        Stack&lt;Character&gt; s2 = <span class="keyword">new</span> Stack(); <span class="comment">//字符串2的栈</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S.charAt(i)!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                s1.push(S.charAt(i));<span class="comment">//入栈</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!s1.isEmpty())&#123;<span class="comment">//出栈</span></span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(T.charAt(i)!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                s2.push(T.charAt(i));<span class="comment">//入栈</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!s2.isEmpty())&#123;<span class="comment">//出栈</span></span><br><span class="line">                s2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.equals(s2); <span class="comment">//比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本计算器-LeetCode224"><a href="#基本计算器-LeetCode224" class="headerlink" title="基本计算器[LeetCode224]"></a>基本计算器[LeetCode224]</h3><h3 id="逆波兰表达式-LeetCode150"><a href="#逆波兰表达式-LeetCode150" class="headerlink" title="逆波兰表达式[LeetCode150]"></a>逆波兰表达式[LeetCode150]</h3><p><strong>示例</strong></p><p>根据<a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437" target="_blank" rel="noopener">逆波兰表示法</a>，求表达式的值。</p><p>有效的运算符包括 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p><strong>说明：</strong></p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]</span><br><span class="line">输出: 9</span><br><span class="line">解释: ((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]</span><br><span class="line">输出: 6</span><br><span class="line">解释: (4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]</span><br><span class="line">输出: 22</span><br><span class="line">解释: </span><br><span class="line">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure><p><strong>解题：</strong>    </p><p><strong>利用栈，逆波兰表达式将符号前的两个数字(栈顶元素，记录，出栈)按符号进行计算，计算后入栈等待下一个数字和下一个操作符。最后返回栈顶元素即可。</strong>                                                                                       </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; sNumber = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;tokens.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i].equals(<span class="string">"+"</span>)||tokens[i].equals(<span class="string">"-"</span>)||tokens[i].equals(<span class="string">"*"</span>)||tokens[i].equals(<span class="string">"/"</span>))</span><br><span class="line">            &#123; <span class="comment">//操作数处理</span></span><br><span class="line">                <span class="keyword">int</span> a= sNumber.pop();</span><br><span class="line">                <span class="keyword">int</span> b = sNumber.pop();</span><br><span class="line">                <span class="keyword">if</span>(tokens[i].equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                    sNumber.push(b+a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tokens[i].equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                    sNumber.push(b-a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tokens[i].equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">                    sNumber.push(b*a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tokens[i].equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">                    sNumber.push(b/a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//数字处理</span></span><br><span class="line">                sNumber.push(Integer.parseInt(tokens[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sNumber.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="棒球比赛-LeetCode682"><a href="#棒球比赛-LeetCode682" class="headerlink" title="棒球比赛[LeetCode682]"></a>棒球比赛[LeetCode682]</h3><p><strong>示例：</strong></p><p>你现在是棒球比赛记录员。<br>给定一个字符串列表，每个字符串可以是以下四种类型之一：<br>1.<code>整数</code>（一轮的得分）：直接表示您在本轮中获得的积分数。</p><ol start="2"><li><code>&quot;+&quot;</code>（一轮的得分）：表示本轮获得的得分是前两轮<code>有效</code> 回合得分的总和。<br>\3. <code>&quot;D&quot;</code>（一轮的得分）：表示本轮获得的得分是前一轮<code>有效</code> 回合得分的两倍。<br>\4. <code>&quot;C&quot;</code>（一个操作，这不是一个回合的分数）：表示您获得的最后一个<code>有效</code> 回合的分数是无效的，应该被移除。</li></ol><p>每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。<br>你需要返回你在所有回合中得分的总和。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]</span><br><span class="line">输出: 30</span><br><span class="line">解释: </span><br><span class="line">第1轮：你可以得到5分。总和是：5。</span><br><span class="line">第2轮：你可以得到2分。总和是：7。</span><br><span class="line">操作1：第2轮的数据无效。总和是：5。</span><br><span class="line">第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。</span><br><span class="line">第4轮：你可以得到5 + 10 = 15分。总数是：30。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]</span><br><span class="line">输出: 27</span><br><span class="line">解释: </span><br><span class="line">第1轮：你可以得到5分。总和是：5。</span><br><span class="line">第2轮：你可以得到-2分。总数是：3。</span><br><span class="line">第3轮：你可以得到4分。总和是：7。</span><br><span class="line">操作1：第3轮的数据无效。总数是：3。</span><br><span class="line">第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。</span><br><span class="line">第5轮：你可以得到9分。总数是：8。</span><br><span class="line">第6轮：你可以得到-4 + 9 = 5分。总数是13。</span><br><span class="line">第7轮：你可以得到9 + 5 = 14分。总数是27。</span><br></pre></td></tr></table></figure><p><strong>解题：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPoints</span><span class="params">(String[] ops)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; Count = <span class="keyword">new</span> Stack();</span><br><span class="line">        Integer count = <span class="number">0</span>;</span><br><span class="line">        Integer number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String s:ops)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"C"</span>))&#123;</span><br><span class="line">                Count.pop();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"D"</span>))&#123;</span><br><span class="line">                Integer n = Count.peek()*<span class="number">2</span>;</span><br><span class="line">                Count.push(n);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                Integer a = Count.pop();</span><br><span class="line">                Integer b = Count.pop();</span><br><span class="line">                Count.push(b);</span><br><span class="line">                Count.push(a);</span><br><span class="line">                Count.push(a+b);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Count.push(Integer.valueOf(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Count.isEmpty())&#123;</span><br><span class="line">            number+=Count.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下一个更大元素-I-LeetCode496"><a href="#下一个更大元素-I-LeetCode496" class="headerlink" title="下一个更大元素 I[LeetCode496]"></a>下一个更大元素 I[LeetCode496]</h3><p><strong>示例：</strong> </p><p>给定两个<strong>没有重复元素</strong>的数组 <code>nums1</code> 和 <code>nums2</code> ，其中<code>nums1</code> 是 <code>nums2</code> 的子集。找到 <code>nums1</code> 中每个元素在 <code>nums2</code> 中的下一个比其大的值。</p><p><code>nums1</code> 中数字 <strong>x</strong> 的下一个更大元素是指 <strong>x</strong> 在 <code>nums2</code> 中对应位置的右边的第一个比 <strong>x</strong> 大的元素。如果不存在，对应位置输出-1。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 = [4,1,2], nums2 = [1,3,4,2].</span><br><span class="line">输出: [-1,3,-1]</span><br><span class="line">解释:</span><br><span class="line">    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。</span><br><span class="line">    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。</span><br><span class="line">    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 = [2,4], nums2 = [1,2,3,4].</span><br><span class="line">输出: [3,-1]</span><br><span class="line">解释:</span><br><span class="line">    对于num1中的数字2，第二个数组中的下一个较大数字是3。</span><br><span class="line">    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li><code>nums1</code>和<code>nums2</code>中所有元素是唯一的。</li><li><code>nums1</code>和<code>nums2</code> 的数组大小都不超过1000。</li></ol><p><strong>解答：</strong> </p><p>通过<strong>Stack、HashMap</strong>解决</p><blockquote><ol><li><strong>先遍历大数组nums2，首先将第一个元素入栈；</strong></li><li><strong>继续遍历，当当前元素小于栈顶元素时，继续将它入栈；当当前元素大于栈顶元素时，栈顶元素出栈，此时应将该出栈的元素与当前元素形成key-value键值对，存入HashMap中；</strong></li><li><strong>当遍历完nums2后，得到nums2中元素所对应的下一个更大元素的hash表；</strong></li><li><strong>遍历nums1的元素在hashMap中去查找‘下一个更大元素’，当找不到时则为-1。</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">// Stack&lt;Integer&gt; stack = new Stack();//利用栈筛选出nums2中满足条件的一对元素。</span></span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// for(int num:nums2)&#123;                           //利用栈，栈顶元素筛选出nums2中满足条件的一对元素。</span></span><br><span class="line">        <span class="comment">//     while(!stack.isEmpty()&amp;&amp;stack.peek()&lt;num)&#123;</span></span><br><span class="line">        <span class="comment">//         hashMap.put(stack.pop(),num);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     stack.push(num);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.length; i++)&#123;     <span class="comment">//利用数组直接筛选出母数组中符合条件（下标小的小于小标大的元素）的数据对</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =i; j&lt;nums2.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums2[i]&lt;nums2[j])&#123;</span><br><span class="line">                    hashMap.put(nums2[i],nums2[j]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++)&#123;  <span class="comment">//按照子数组中数在Map中进行查找，查找出来就返回大数，反之返回-1</span></span><br><span class="line">            result[i] = hashMap.getOrDefault(nums1[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile-双重检验锁模式</title>
      <link href="/2019/01/31/volatile-%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/31/volatile-%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="1-volatile型变量的特殊规则"><a href="#1-volatile型变量的特殊规则" class="headerlink" title="1.volatile型变量的特殊规则"></a>1.volatile型变量的特殊规则</h2><p>关键字volatile可以说是JVM提供的最轻量级的同步机制，JVM内存模型对volatile专门定义了一些特殊访问规则。</p><p>当一个变量被定义为volatile之后，它具备两种特性。可见性和有序性</p><h2 id="两层语义："><a href="#两层语义：" class="headerlink" title="两层语义："></a>两层语义：</h2><ul><li><strong>第一层语义：</strong>内存可见–可见性</li><li><strong>第二层语义：</strong>禁止指令重排–有序性</li></ul><a id="more"></a><p><strong>可见性：</strong>当一个线程修改了这个变量的值，新值能被其他线程可以立刻得到，而普通变量做不到这一点，普通变量的值在线程之间传递需要通过主内存来完成。</p><p>具体来说，volatile的作用是：<strong>在本CPU对变量的修改直写入主内存中，同时这个写操作使得其他CPU中对应的变量的缓存行无效</strong>，<strong>这样其他线程在读取这个变量时候必须从主内存中读取，所以读取得到的是最新的</strong>，这就是上面说的能被立即“看到”。</p><p>volatile修饰的变量仅仅只拥有这两个性质，<strong>并不拥有原子性，volatile变量的运算在并发下是不安全的，原因java里面的运算并非原子操作。</strong></p><h2 id="volatile修饰的变量如何确保原子性"><a href="#volatile修饰的变量如何确保原子性" class="headerlink" title="volatile修饰的变量如何确保原子性"></a>volatile修饰的变量如何确保原子性</h2><p>由于volatile只保证了可见习性和，有序性。子在不符合以下两条规则的运算场景中，我们仍然需要<strong>通过加锁(synchronized或lock)来保证原子性</strong></p><ol><li>运算结果并不依赖变量的当前值，或者能够确保只有单一线程修改变量的值</li><li>变量不需要与其他的状态变量共同参与不变约束</li></ol><p><strong>并发场景下对于类似++操作如何保证原子性</strong></p><ul><li><strong>加锁，结合synchronized或者lock体系</strong></li><li><strong>使用原子类（java.util.current.atomic包下的所有类-内部使用CAS保证原子性）</strong></li></ul><p><strong>有序性：volatile可以禁止指令重排</strong> 。volatile在其汇编代码中有一个lock操作，这个操作相当一个<strong>内存屏障</strong>，<strong>指令重排不能越过内存屏障</strong>，具体来</p><ul><li><strong>说在执行volatile变量时，内存屏障之前的语句一定被执行过了且结果对后面执行的语句时已知的，而内存屏障后面的语句一定还没有执行到</strong>；</li><li>在进行指令优化时，<strong>在volatile变量之前的语句不能能被重排其之后，相反的其后的语句也必能被重排到之前。</strong></li></ul><h1 id="2-双重检验锁模式（懒汉单例模式）"><a href="#2-双重检验锁模式（懒汉单例模式）" class="headerlink" title="2.双重检验锁模式（懒汉单例模式）"></a>2.双重检验锁模式（懒汉单例模式）</h1><p>双重检验锁模式(double checked locking pattern),是一种使用同步块加锁的方式。程序员称其为双重检查</p><p>锁，因为会有两次检查，一次是在同步块外，一次是在同步块内。</p><h2 id="为什么在同步块内还要再检验一次？"><a href="#为什么在同步块内还要再检验一次？" class="headerlink" title="为什么在同步块内还要再检验一次？"></a>为什么在同步块内还要再检验一次？</h2><p>因为可能会有多个线程一起进入到同步块外的if，如果在同步块内不进行二次检验就会生成多个实例。</p><h2 id="volatile在单例模式中起了什么作用？"><a href="#volatile在单例模式中起了什么作用？" class="headerlink" title="volatile在单例模式中起了什么作用？"></a>volatile在单例模式中起了什么作用？</h2><p>主要是因为懒汉模式，用时再new，但是instance = new Singleto()这句，并非是一个原子操作，事实上再JVM中这句话大概做了以下3件事</p><ol><li><p>给instance分配内存，</p></li><li><p>调用Singleton的构造函数来初始化成员变量</p></li><li><p>将instance对象指向分配的内存空间（执行完这步instance就为非null了）</p><p>但是在JVM的即时编译器中存在指令重排优化。也就事说上面第二步和第三步的顺序是不能保证的，</p><p>最终的执行顺序可能是1-2-3也可能是1-3-2</p><p>如果是后者(1-3-2)，则3执行完毕，2未执行之前，被线程二抢占了，这时instance已经是非null了(但是却没有初始化)，所以哦线程二直接返回instance，然后使用，就会报错。我们只需要将instance变量声明成volatile就可以了。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JVMReview;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: java-SE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: SOYANGA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2019-01-31 19:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;   <span class="comment">//Single Checked</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  <span class="comment">//Double Checked</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hahah"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
            <tag> JVM </tag>
            
            <tag> 重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再识Java-JVM</title>
      <link href="/2019/01/28/%E5%86%8D%E8%AF%86Java-JVM/"/>
      <url>/2019/01/28/%E5%86%8D%E8%AF%86Java-JVM/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略"><a href="#区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略" class="headerlink" title="区域划分-&gt;判断对象是否存活-&gt;垃圾回收器-&gt;对象分配回收策略"></a>区域划分-&gt;判断对象是否存活-&gt;垃圾回收器-&gt;对象分配回收策略</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li>JVM简介</li><li>Java内存区域与内存溢出异常 </li><li>垃圾回收器与内存分配策略 </li><li>常用JVM性能监控与故障处理工具 </li><li>Java内存模型</li></ol><h1 id="一、JVM简介"><a href="#一、JVM简介" class="headerlink" title="一、JVM简介"></a>一、JVM简介</h1><p>1）<strong>虚拟机简介：</strong></p><p>JVM(java Virtual Machine简称。意味java虚拟机){</p><p>虚拟机：指通过软件模拟的具有完整的硬件功能的、运行再一个完全隔离的环境中的完整计算机系统。</p><p>常见虚拟机：JVM，VMware,Vitual BOX</p><p>2）:JVM和其他两个虚拟机的区别：a.VMware与virtualBox【是通过软件模拟物理CPU的指令集物理系统中会有很多的寄存器</p><p>2）：<strong>JVM是通过软件模拟java字节码的指令集，JVM中只保留了PC寄存器，其他寄存器都进行了剪裁，JVM是一台被定制过的现实当中不存在的计算机</strong></p><a id="more"></a><h1 id="二、Java内存区域与内存溢出的异常"><a href="#二、Java内存区域与内存溢出的异常" class="headerlink" title="二、Java内存区域与内存溢出的异常"></a>二、Java内存区域与内存溢出的异常</h1><p>java内存区域的划分-<strong>共6块内存（bulingbuling）</strong></p><p><strong>线程私有区域：</strong>程序计数器，java虚拟机栈，本地方法栈</p><p><strong>线程共享区域：</strong>Java堆，Java方法区，运行时常量池</p><h2 id="2-1线程私有内存："><a href="#2-1线程私有内存：" class="headerlink" title="2.1线程私有内存："></a>2.1线程私有内存：</h2><p>每个线程都具有，且彼此之间相互隔离</p><h3 id="2-1-1程序计数器"><a href="#2-1-1程序计数器" class="headerlink" title="2.1.1程序计数器"></a>2.1.1程序计数器</h3><p>程序计数器是一个<strong>比较小的内存空间</strong>，<strong>当前线程所执行的字节码的行号指令器。</strong></p><blockquote><p>若当前线程执行的是java方法，计数器记录的是正在执行的JVM字节指令地址；</p><p>若当前线程执行的是native方法，计数器数值为空。</p></blockquote><p><em>程序计数器是唯一一块不会产生</em>OOM异常的区域。</p><h3 id="线程私有概念："><a href="#线程私有概念：" class="headerlink" title="线程私有概念："></a>线程私有概念：</h3><p>由于JVM的多线程是通过<strong>线程轮流切</strong>换并<strong>分配处理器执行时间</strong>的方式来实现的，因此在任何一个确定的时刻，一个多处理器（多核处理器则指的是一个内核）都会执<strong>行一个线程中的指</strong>令。因此为了<strong>切换线程</strong>后能<strong>恢复到正确的执行位置</strong>，每个线程都需要有<strong>独立的程序计数器</strong>，<strong>各条线程之间计数器互不影响</strong>，<strong>独立存储</strong>。我们就把类似这类区域成为”线程私有“内存。</p><h3 id="2-1-2Java虚拟机栈（线程私有）"><a href="#2-1-2Java虚拟机栈（线程私有）" class="headerlink" title="2.1.2Java虚拟机栈（线程私有）"></a>2.1.2Java虚拟机栈（线程私有）</h3><p>虚拟机栈描述的是<strong>java方法执行的内存模型</strong>：每个方法执行的同时都会创建一个<strong>栈帧</strong>用于<strong>存储局部变量表，操作数栈，动态链接，方法出口</strong>等。每个方法从调用直至执行完成的过程，就对用一个栈帧在虚拟机栈中入栈和出栈的过程。声明周期与线程相同。</p><p><strong>局部变量表：</strong>存放编译器可知的各种<strong>基本数据类型</strong>（8大数据类型），<strong>对象引用</strong>。局部变量表所需的内存空间在编译期完成分配，当进入一个方法使，这个方法需要在栈帧中分配多大局部变量空间完全是确定的，在执行期间不会改变局部变量表的大小。</p><p>此区域会产生两个异常：</p><ol><li><strong>SOFE:</strong>如果线程请求的栈深度大于虚拟机所允许的深度（<strong>-Xss设置栈容量</strong>），将会抛出StackOverFlowError异常。</li><li><strong>OOM:</strong>虚拟机在动态扩展时无法申请到足够的内存，会抛出OOM(OutOfMermoryError异常)</li></ol><h3 id="2-1-3本地方法栈（线程私有）"><a href="#2-1-3本地方法栈（线程私有）" class="headerlink" title="2.1.3本地方法栈（线程私有）"></a>2.1.3本地方法栈（线程私有）</h3><p>本地方法栈与虚拟机栈的作用完全一致，区别无非就是本地方法栈为虚拟机使用的Native方法服务，而虚拟机栈为JVM执行的Java方法服务。</p><p>在HotSpot虚拟机中，本地方法栈与虚拟机栈是同一块内存区域。</p><h2 id="2-2线程共享内存"><a href="#2-2线程共享内存" class="headerlink" title="2.2线程共享内存"></a>2.2线程共享内存</h2><h3 id="2-2-1Java堆（GC堆）-线程共享"><a href="#2-2-1Java堆（GC堆）-线程共享" class="headerlink" title="2.2.1Java堆（GC堆）-线程共享"></a>2.2.1Java堆（GC堆）-线程共享</h3><p>Java（堆 Java Heap)是JVM管理的<strong>最大内存区域</strong>。所有线程<strong>共享此内存</strong>，在JVM启动时创建，此内存中存放都是<strong>对象实例以及数组，</strong>1.7后新加了字符串</p><p><strong>Java堆是垃圾回收器管理的最主要内存区域。java堆可以处于物理上不连续的内存空间。</strong></p><p><strong>-Xmx</strong>:设置堆最大值</p><p><strong>-Xms:</strong>设置堆的最小值</p><p>如果在堆中没有足够的内存完成对象实例分配，并且堆无法再次扩展时抛出 <strong>OOM异常</strong>。(最频繁发生！)</p><p><strong>OOM:</strong>OutOfMerroryError虚拟机的动态扩展无法申请到足够的内存，会抛出OOM</p><p><strong>内存溢出：</strong>内存中的对象确实还应该存活，但由于堆内存不够用产生的异常。</p><p><strong>内存泄漏：</strong>无用对象无法被GC，扩展内存后还是会报错OOM异常</p><p>内存泄漏与内存溢出区别就在于扩展内存上，内存溢出可以扩展内存来解决，而内存泄漏则无法通过扩展内存的方式来解决。</p><h3 id="2-2-2方法区（静态）-线程共享"><a href="#2-2-2方法区（静态）-线程共享" class="headerlink" title="2.2.2方法区（静态）-线程共享"></a>2.2.2方法区（静态）-线程共享</h3><p>用于存储已被<strong>JVM加载的类信息，常量，静态变量，编译器编译后的代码等数据</strong>，JDK8以前，方法区也叫永久代，JDK8之后称为元空间（Mate Space）之前所说的<strong>静态常量区</strong></p><p><strong>永久代并不意味着数据进入方法区就永远存在</strong>，此区域的内存回收主<strong>要针对常量池的回收</strong>以及对<strong>类型的卸载。</strong></p><ul><li><p><strong>类定义的信息在方法区放着</strong></p><p>public static…(符号引用)也在方法区放着</p></li><li><p><strong>对象产生：符号引用-&gt;类-&gt;具体引用</strong></p><p>执行Test test = new Test();的过程</p><p>首先知道时那个类（<strong>存放在方法区中</strong>）</p><p>最后的具体引用-&gt;符号引用（<strong>从方法区中取出</strong>）</p></li></ul><p>  <strong>JVM规范：</strong>方法区无法满足内存分配需求时抛出OOM</p><h3 id="2-2-3运行时常量池（方法区的一部分）"><a href="#2-2-3运行时常量池（方法区的一部分）" class="headerlink" title="2.2.3运行时常量池（方法区的一部分）"></a>2.2.3运行时常量池（方法区的一部分）</h3><p>运行时常量池是方法区的一部分，存放字面量与符号引用。</p><p><strong>字面量：</strong>字符串（JDK1.7后移动到堆中），final常量，基本数据类型的值</p><p><strong>符号引用：</strong>类和结构的完全限定名，字段名称和描述符，方法名称个描述符。</p><p><strong>完全限定名：</strong>包.类名  权限修饰符</p><p><strong>字面量</strong>：10(基本数据类型的值)</p><h1 id="三、垃圾回收器与内存分配策略"><a href="#三、垃圾回收器与内存分配策略" class="headerlink" title="三、垃圾回收器与内存分配策略"></a>三、垃圾回收器与内存分配策略</h1><p><strong>线程私有的三个内存区域</strong>：程序计数器，虚拟机栈，本地方法栈这三个区域<strong>其生命周期与线程有关</strong>，随线程而生，随线程而灭。并<strong>且这三个区域的内存分配与回收具有确定性，因为当方法结束或者线程结束时，内存就自然跟着线程回收了</strong>。但是只有当主线程，及所有线程结束时，Java堆与方法区这两个区域才会被被完全回收，其声明周期跟随这个项目，或者主线程。</p><h2 id="3-1如何判断对象已”死“"><a href="#3-1如何判断对象已”死“" class="headerlink" title="3.1如何判断对象已”死“"></a>3.1如何判断对象已”死“</h2><p>Java堆中存放几乎所有对象实例，垃圾回收器在对堆进行垃圾回收前，首先要判断这些对象是否存活，那些已经”死去“，判断对象是否已“死”有如下几种算法</p><h3 id="3-1-1引用计数法"><a href="#3-1-1引用计数法" class="headerlink" title="3.1.1引用计数法"></a>3.1.1引用计数法</h3><p>引用计数法描述的算法为：</p><ul><li><h4 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h4><p>给对象增加一个引用计数器，每当有一个地方引用它的时候，计数器就+1，当引用失效的时，计数器就-1，任何时刻计数器为0的对象就是不再被使用的对象，即对象已“死”。</p><p>Python就采用了这个方法进行内存管理。</p></li><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>无法解决循环引用的问题</strong> ：</p><p>但是，在主流的JVM中并没有使用该方法来进行管理内存，<strong>主要原因是因为引用计数无法解决循环引用的问题</strong></p></li></ul><h3 id="3-1-2可达性分析算法-JVM采用"><a href="#3-1-2可达性分析算法-JVM采用" class="headerlink" title="3.1.2可达性分析算法-JVM采用"></a>3.1.2可达性分析算法-JVM采用</h3><p>JVM中采用“可达性分析算法”来判断对象是否存活（同样采用此方法的还有C#,Lisp-最早一门采用动态内存分配的语言）。</p><ul><li><h4 id="算法核心-1"><a href="#算法核心-1" class="headerlink" title="算法核心"></a>算法核心</h4></li></ul><p>通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索走过的路径称为“引用链”，当一个对象到GC Roots 没有任何引用链连接时（从GC Roots到这个对象不可达）时,证明此对象是不可用的，以下图为例</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\GC Root可达性分析.png" alt="GC Root可达性分析"></p><p><strong>其中可达性分析在JVM中的使用时，判定以下对象可以作为一个根节点</strong>(GC Roots)</p><blockquote><ol><li>虚拟机栈（帧栈中的本地变量）<em>中引用对象（方法中的对象）</em> </li><li>方法区中类静态属性引用对象（<em>静态变量）-[局部变量（类的普通对象）除外]</em></li><li>方法区中常量引用对象（常量）</li><li>本地方法栈中JNI(Native)<em>引用的对象</em></li></ol></blockquote><p>JDK1.2以前，Java中引用的定义很传统，如果引用类型的数据中存储的数值代表的是另一块地址的起始地址，就称这块内存代表着一个引用，这种定义有些狭隘，一个对象在这种定义下只有被引用或者没有被引用这两种状态。</p><p>但是我们希望能描述这一类对象：当内存空间还足够时，能够保存在内存中；如果内存空间进行垃圾回收后还是非常紧张，则可以抛弃这一类对象。很多系统中的缓存对象都符合这个场景。</p><h4 id="引用扩充："><a href="#引用扩充：" class="headerlink" title="引用扩充："></a>引用扩充：</h4><p>在JDK1.2之后，java对引用的概念做了扩充。将引用分为</p><p>强引用（Strong Referrnce)</p><p>软引用（Soft Reference）</p><p>弱引用（Weak Reference）</p><p>虚引用（Phantom Reference)四种，这四种引用强度依次递减。</p><ul><li><p>强引用：</p><p>代码中普遍存在的，类似<strong>Object obj = new Object()</strong>;直接new出来的在JVM中只要强引用还存在，垃圾回收器就永远不会回收此类对象实例</p></li><li><p>软引用：</p><p>着力描述一些有用但是不必须的对象，对于仅被软引用指向的对象，<strong>在系统要发生内存溢出之前会将软引用对象进行垃圾回收，若内存够用，这些对象仍然被保留。</strong>在JDK1.2之后提供<strong>SoftReference类</strong>来实现软引用。</p></li><li><p>弱引用：弱引用也时用来描述非必须对象的。但是它的强度要比软引用更弱一点。<strong>被弱引用关联的对象只能生存到下一次垃圾回收发生之前</strong>。当垃圾回收器开始工作时，无论当前内容是否够用，都会回收掉只被弱引用关联的对象。在JDK1.2之后提供了<strong>WeakReference类</strong>来实现弱引用</p></li><li><p>虚引用：虚引用也被称为幽灵引用或者幻影引用，他是<strong>最弱的一种引用关系</strong>，<strong>一个对象是否有虚引用的存在，完全不会对其生命周期时间构成影响</strong>。也无法通过虚引用来取得一个对象的实例，为了一个对象设置虚引用的<strong>唯一目的就是能在这个对象被回收器收到一个系统通知</strong>。在JDK1.2以后，提供了PhantomReference类来实现虚引用。（仅仅是一个通知 GC)</p></li></ul><h2 id="3-2对象自我拯救（已经过期了）"><a href="#3-2对象自我拯救（已经过期了）" class="headerlink" title="3.2对象自我拯救（已经过期了）"></a>3.2对象自我拯救（已经过期了）</h2><p>即便是可达性分析算法中不可达的对象，也并非“非死不可”，这时候他们暂处在“缓刑阶段”要宣告一个对象的真正死亡，至少需要经历两次标记的过程，如果对象在进行可达性分析之后发现没有与GC Roots相连接的引用链，那它将会被<strong>第一时间标记该对象</strong>，<strong>然后进行筛选</strong>，筛选的条件就是此对象是否有必要执行<strong>finalize()方法</strong>。当对象<strong>没有覆盖fianlize()方法</strong>或<strong>者finalize()方法已经被JVM调用过</strong>，虚拟机会将这两种情况视为“没有必要执行”，此时的对象才是真正“死”的对象。</p><p>如果对象被判定为有<strong>必要执行finalize()方法</strong>，那么这个对象会被放置在叫做<strong>F-Queue的队列当</strong>中，并在稍后由一个虚拟机自动建立的，低优先级的<strong>Finalizer线程</strong>去执行（这里所说的执行指的<strong>虚拟机会触发finalize()方法</strong>。<strong>finalize()方法时对象逃脱死亡的最后一次机会</strong>。稍后<strong>GC将对F-Queue中的对象</strong>进行<strong>第二次规模标记</strong>，如果<strong>对象finalize()中成功拯救自己</strong>(<em>只需要重新与引用链上的任何一个对象建立起关联关系即可)</em>，那在<strong>第二次标记时他将会被移除出“即将回收”的集合</strong>；如果对象这时候还是<strong>没有逃脱</strong>，<strong>那基本上它就是真的被回事收了</strong>。</p><p>总结宣告一个对象死亡要经历两次标记</p><ol><li><strong>第一次标记</strong> ：若对象在进行<strong>可达性分析</strong>之后发现到<strong>GC Roots不可达</strong>。此对象会进行一次<strong>finalize()</strong>。筛选的条件是此对象是否有必要执行finalize()方法，当对象没有被<strong>覆盖finalize()</strong>方法或者<strong>finalize()方法已经被JVM调用过</strong>（并不是人为的进行调用），那么<strong>JVM彻底宣告此对象死亡</strong>。</li><li>筛选成功（<strong>对象覆写了Object类的fianlize()方法，并且未被执行过</strong>），会将此对象<strong>放到F-Queue(唤醒队列)</strong> ，如果<strong>对象在finalize()中成功自救(此对象与GC Roots建立联系)</strong>，则对象在<strong>第二次标记时被移除回收集合，成功存活；</strong>若对象在finalize()中仍然与GC Roots不可达 ，宣告死亡。</li></ol><h2 id="3-3回收方法区"><a href="#3-3回收方法区" class="headerlink" title="3.3回收方法区"></a>3.3回收方法区</h2><p><strong>方法区（永久代）的垃圾回收</strong>主要回收的是两部分</p><ol><li>废弃的常量</li><li>无用的类</li></ol><h3 id="3-3-1回收废弃的常量"><a href="#3-3-1回收废弃的常量" class="headerlink" title="3.3.1回收废弃的常量"></a>3.3.1回收废弃的常量</h3><p>回收废弃的常量和回收Java堆中的对象十分类似。以常量池中字面量(直接量)的回收为例，假如一个字符串“abc”已经进入常量池，但是当前系统没<strong>有任何一个String对象引用常量池的”abc“常量</strong>，也没有再其他地方引用这个字面量。<strong>如果发生GC且有必要的化（方法区不够用才会执行）</strong>，这个”abc“常量会被系统清理出常量池。<strong>常量池中的其他类(接口)，方法，字段的符号引用也于此类似。</strong></p><h3 id="3-3-2判断一个类是否是无用类"><a href="#3-3-2判断一个类是否是无用类" class="headerlink" title="3.3.2判断一个类是否是无用类"></a>3.3.2判断一个类是否是无用类</h3><ol><li>该类的<strong>所有实例都已经被回收了</strong>    <em>(Java堆中不存在该类的任何实现)</em></li><li>加载该类的<strong>类加载器已经被回收</strong> </li><li>该类的<strong>class对象没有任何其他地方被引用，也无法通过反射访问该类的所有内容。</strong></li></ol><p>JVM可以对同时满足上述3个条件的无用类进行回收，也仅仅是可以而不是必然会回收，大量使用反射，动态代理等场景都需要对JVM具备类型卸载的功能来防止永久代溢出。</p><h1 id="四、垃圾回收算法"><a href="#四、垃圾回收算法" class="headerlink" title="四、垃圾回收算法"></a>四、垃圾回收算法</h1><h2 id="4-1标记-清除算法"><a href="#4-1标记-清除算法" class="headerlink" title="4.1标记-清除算法"></a>4.1标记-清除算法</h2><ul><li><p><strong>算法核心：</strong></p><p>整个算法分为标记-清除两个阶段</p><p><em>标记阶段</em>：标记出垃圾回收需要的回收对象</p><p><em>清除阶段</em>：一次性清除所有带标记的对象</p></li><li><p><strong>导致的问题</strong>：java不采用标记清除算法</p><ol><li><p>效率问题：</p><p>标记与清除两个阶段<strong>效率都不高</strong></p></li><li><p>空间问题：</p><p>标记清除算法<strong>会产生大量的不连续空间</strong>，导致的主要问题是，若程序中<strong>需要分配较大的连续对象时，由于空间碎片较多时因此无法找到连续的内存空间而不得已再次触发GC。</strong> </p></li></ol></li></ul><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\标记清除算法图解.png" alt=""></p><h2 id="4-2复制算法（新生代垃圾回收算法）"><a href="#4-2复制算法（新生代垃圾回收算法）" class="headerlink" title="4.2复制算法（新生代垃圾回收算法）"></a>4.2复制算法（新生代垃圾回收算法）</h2><p>复制算法是为了解决：标记-清除算法的效率问题。</p><ul><li><p><strong>核心思想：</strong></p><p>将内存<strong>按照容量划分成大小相等的两块</strong>，每次只<strong>使用其中一块内存</strong>，当使用的内存需要进行垃圾回收时，会将此区域的所有<strong>存活对象一次性复制到保留区域</strong>。然后<strong>将使用的内存块一次清理掉</strong>。</p><p>这样的做的好处是每次都对整个半区进行内存回收，内存分配时，就不需要考虑内存碎片等复杂情况，只需要移动堆定指针，按顺序分配即可，此算法实现简单，运行高效。算法的执行流程如下图：</p></li></ul><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\复制算法图解.png" alt="复制算法图解"></p><p>商用虚拟机（包括HotSpot都是采用这种收集算法来回收新生代）</p><ul><li><p><strong>导致问题：</strong> </p><p>复制算法最大的问题在于内存利用率太低，所有商用JVM都对复制算法进行了改进</p></li></ul><p><strong>JVM改进后的复制算法：</strong> </p><p>新生代中98%的对象“朝生夕死”（生命周期短），所以<strong>并不需要按照1：1来划分内存空间</strong>。将内存（<strong>新生代内存）划分为一块较大的Eden（伊甸区）空间</strong></p><p>和<strong>两块较小的Survivor(幸存区)（一块称为Fron区，另一个称为To区）空间</strong>。<strong>每次只是用Eden区和其他一块Suvivor</strong>。当回收时，将Eden和Survivor中<strong>还存活的对象一次性复制到另一块Survivor空间上</strong>，最<strong>后清理掉Eden和使用过的其中一个Survivor空间。</strong></p><p>当Survivor空间不够时，需要依赖其他<strong>内存（老年代）进行分配担保</strong>。</p><p>HotSpot默认Eden与一块Survivor的大小比例是<strong>8:1</strong>，也就是说<strong>Eden:From:To = 8:1:1</strong>。所以每次新生代<strong>可用内存空间为整个新生代容量的90%</strong>,而剩下的<strong>10%用来存放回收后存活的对象</strong>。</p><h4 id="HotSpot复制算法的流程："><a href="#HotSpot复制算法的流程：" class="headerlink" title="HotSpot复制算法的流程："></a>HotSpot复制算法的流程：</h4><ol><li><p>当Eden区满的时候，会触发一次Minor GC，将所有存活对象拷贝到Survivor的From区域，然后一次性清除Eden区；</p></li><li><p>当Eden区再次触发Minor GC,会扫描Eden区和From区，将两块空间的存活对象拷贝到To区，然后一次性清空Eden区和From区</p></li><li><p>当后续Eden区再次发生Minor GC时，会对Eden和To区进行垃圾回收，存活对象移动到From区，后续流程类似，只是将From区和To区作为保留区。</p></li><li><p>部分对象会在From区和To区来回复制，如此交换15次（JVM参数-XX:Max Teburing Threshold,默认为15），最终一直在移动的对象最终会存入老年代。（父债子偿）</p></li><li><p>Survivor区域若无法放下所有存活对象，需要依赖其他内存，如老年代内存进行分配担保。</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\复制算法在JVM的应用.png" alt="复制算法在JVM的应用"></p></li></ol><h2 id="4-3标记-整理算法（老年代垃圾回收算法）"><a href="#4-3标记-整理算法（老年代垃圾回收算法）" class="headerlink" title="4.3标记-整理算法（老年代垃圾回收算法）"></a>4.3标记-整理算法（老年代垃圾回收算法）</h2><p>复制收集算法在对<strong>象存活率较高时</strong>会进行比较多的复制操作，效率会变低。因此在老年代一般不能使用复制算法。</p><ul><li><strong>算法核心</strong></li></ul><p>针对老年代的特点，提出了一种称之为“标记-整理算法”。标记过程仍与“标记-清除”过程一致，但后续步骤不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存。流程图如下：</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\标记整理算法流程图.png" alt="标记整理算法流程图"></p><h2 id="4-4分代收集算法"><a href="#4-4分代收集算法" class="headerlink" title="4.4分代收集算法"></a>4.4分代收集算法</h2><p>当前JVM垃圾收集器都采用的是“分代收集算法”，这个算法并没有新思想，只是根据<strong>对象存活周期的不同</strong>将内存划分几块。</p><p><strong>一般是把Java堆分为新生代和老年代。</strong></p><ul><li><p>在新生代中，每次垃圾回收都会有大批对象死去，只有少量存活，因此我们采用复制算法；</p></li><li><p>而老年代中对象存活率高，没有额外空间对它进行分配担保，就必须采用“标记-清除”或者“标记-整理“算法。</p></li></ul><p>面试题：请问了解Minor GC和Full GC么，这两种GC有什么不一样。</p><blockquote><ol><li>Minor GC 又称为新生代GC：指的是发生在新生代的垃圾回收，因为Java对象大多都具有朝生夕死的特性，因此Minor GC采用复制算法非常频繁，一般回收速度也比较快。</li><li>Full GC又称为老年代GC或者Major GC:指的是发生在老年代的垃圾回收，出现了Major GC，经常会伴随至少一次Minor GC（并非绝对，在Parallel Scavenge收集器中就有直接Full GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ol></blockquote><p>直接进行Full GC 大对象直接扔到老年代中，假如老年代也满了，就直接进行老年代的垃圾回收</p><h2 id="4-5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8"><a href="#4-5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8" class="headerlink" title="4.5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8"></a>4.5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8</h2><h3 id="4-5-1JVM调优部分"><a href="#4-5-1JVM调优部分" class="headerlink" title="4.5.1JVM调优部分"></a>4.5.1JVM调优部分</h3><p>垃圾回收器也分为<strong>两代</strong></p><p><strong>新生代垃圾回收器：</strong>Serial(串行)，ParNew(并行)，Parallel(并行)，Scavenge(并行)</p><p><strong>老年代垃圾回收器：</strong>CMS，Serial Old,Parallel Old</p><p><strong>串行(Serial ,Serial Old):</strong>垃圾回收线程与用户线程在JVM中顺序执行（其中一个执行，都在等待）。</p><p><strong>并行(Paraller,Scavenge,Parallel old):</strong>多个垃圾回收线程一起执行，用户线程仍处于等待。</p><p><strong>并发(CMS):</strong>这才是真正意义上的垃圾回收线程与用户线程一起执行。CMS是第一款垃圾回收器</p><p><strong>全区域垃圾回收器</strong>：G1（并发）</p><p><strong>STW</strong>:当垃圾回收线程工作，用户线程处于等待状态</p><h2 id="五、对象分配策略"><a href="#五、对象分配策略" class="headerlink" title="五、对象分配策略"></a>五、对象分配策略</h2><h3 id="5-1对象有现在Eden分配"><a href="#5-1对象有现在Eden分配" class="headerlink" title="5.1对象有现在Eden分配"></a>5.1对象有现在Eden分配</h3><p>大多数情况下，对象在<strong>新生代Eden区分配</strong>。当Edem区<strong>没有足够的空间进行分配</strong>时，虚拟机将发生一次<strong>Minor GC</strong></p><p><strong>-Xss:栈大小</strong></p><p><strong>-Xms:堆最小内存</strong></p><p><strong>-Xmx:堆最大内存</strong></p><p><strong>-Xmm:新生代内存大小</strong></p><p>-<strong>XX:+survivorRatio=8:Eden区和Survivor区比例-默认是8</strong></p><h2 id="5-2大对象直接进入老年代"><a href="#5-2大对象直接进入老年代" class="headerlink" title="5.2大对象直接进入老年代"></a>5.2大对象直接进入老年代</h2><p>Java典型的大对象就是那种很长的字符串以及数组</p><p>设置大对象标准：</p><p><strong>-XX:PretenureSiveThreadhold = 字节大小（告诉JVM超过该字节大小的对象为对象，内存分配时直接进入老年代</strong></p><p><strong>这样做的目的是</strong>：在于避免Eden区以及Survivor区之间发生大量的内存复制（新生代采用复制算法收集内存）</p><h2 id="5-3长期存活对象进入老年代"><a href="#5-3长期存活对象进入老年代" class="headerlink" title="5.3长期存活对象进入老年代"></a>5.3长期存活对象进入老年代</h2><p>JVM给堆中的每个对象定义了一个堆中<strong>年龄（Age)计数器</strong></p><p><strong>若对象在Eden出生并且经历了一次Minor GC后仍存活且能被Survivor区容纳，将此对象的年龄置为1.此后对象在Survivor区内经历一次Minor GC，年龄就增加一岁，当其年龄增加到一定程度（默认为15），此对象晋升为老年代。</strong> </p><p>晋升为老年代的阈值，可以通过以下参数设置：</p><p><strong>-XX:Max Teburing Threshold</strong> </p><h2 id="5-4动态年龄对象判定"><a href="#5-4动态年龄对象判定" class="headerlink" title="5.4动态年龄对象判定"></a>5.4动态年龄对象判定</h2><p>为了更好的适应内存状态，JVM并不是永远要求对象的年龄必须达到MaxTenuringThreshold才能晋升老年代。如果在<strong>Survivor空间中相同年龄的对象大小的总和</strong>大于<strong>Survivor空间（一个Survivor空间）的一半</strong>，<strong>年龄大于或的等于该年龄的对象就可以直接进入老年代，</strong>无<strong>需等到MaxTenuringThreshold中要求的年龄。</strong></p><h2 id="5-5空间分配担保"><a href="#5-5空间分配担保" class="headerlink" title="5.5空间分配担保"></a>5.5空间分配担保</h2><p>在发生Minor GC之前，虚拟机会检查<strong>老年代最大可用的连续空间</strong>是否<strong>大于新生代所有对象的总空间。</strong> </p><ul><li><p><strong>如果大于：</strong>则此次Minor GC是安全的。</p></li><li><p><strong>如果小于：</strong>则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败</p><p>如果HandlePromotionFailure=true，那么会继续检查老年代最大可以可用连续内存是否大于此前晋升到老年代的对象的平均大小，如果大于，则尝试进行一次Minor GC，<strong>但是这次Minor GC依然是有风险的；</strong> 如果小于或者HandlePromotionFailure=false，则改为进行一次<strong>FUll GC</strong> </p></li></ul><p>上面提到了Minor GC依然会有风险，是因为新生代采用<strong>复制收集算法</strong>，假如大量对象共在Minor GC后任然存活（最极端情况为内存回收后新生代中所有对象均存活），而Survivor空间比较小的，这时就需要老年代进行分配担保，把Survivor无法容纳的对象放到老年代中。<strong>老年代要进行空间分配担保，前提是老年代得有足够的空间来容纳这些对象</strong>，但一共有多少个对象在内存回收后活下来是不可预知的。<strong>因此只好取之前每次垃圾回收后晋升到老年代的对象大小的平均值作为参考</strong>。使用这个平均值与老年代剩余空间进行比较，来决定是否进行Full GC来让老年代腾出更多空间。</p><p>取平均值仍然是一种<strong>概率事件</strong>，如果某次Minor GC后存活的对象陡然增加，远高于平均值的话，必然导致担保失败，如果出现分配担保失败，<strong>就只能在失败后发起一次Full GC</strong>。虽然存在发生这种情况的概率，但是<strong>大部分时候都能够成功分配担保</strong>的，这样就<strong>避免了过于频繁的执行Full G</strong>C。</p><h1 id="六、常用JVM性能监控与故障处理工具"><a href="#六、常用JVM性能监控与故障处理工具" class="headerlink" title="六、常用JVM性能监控与故障处理工具"></a>六、常用JVM性能监控与故障处理工具</h1><h2 id="6-1JDK命令行工具"><a href="#6-1JDK命令行工具" class="headerlink" title="6.1JDK命令行工具"></a>6.1JDK命令行工具</h2><p>“javac” ，“java”   命令实际上都是JDK/bin目录下的命令行程序，除此之外，<strong>bin目录</strong>下还包含用于监控JVM和故障处理的工具</p><p>用于<strong>处理应用程序性问题，定位故障</strong>发挥了很大的作用。</p><table><thead><tr><th>命令名称</th><th>全称</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td>jps</td><td>JVM Process Status Tool</td><td style="text-align:left">显示指定系统内所有的HotSpot虚拟机进程</td></tr><tr><td>jstat</td><td>JVM Statistics Monitoring Tool</td><td style="text-align:left">用于收集Hotspot虚拟机各方面的运行数据</td></tr><tr><td>jinfo</td><td>Conﬁguration Info for Java</td><td style="text-align:left">显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>JVM Memory Map</td><td style="text-align:left">生成虚拟机的内存转储快照，生成heapdump文件</td></tr><tr><td>jhat</td><td>JVM Heap Dump Browser</td><td style="text-align:left">用于分析heapdump文件，他会建立一个HTTP/HTML服务器，让用户在浏览器上查看分析结果</td></tr><tr><td>jstack</td><td>JVM Stack Trace</td><td style="text-align:left">显示虚拟机的线程快照</td></tr></tbody></table><h3 id="6-1-1-jps：虚拟机进程工具"><a href="#6-1-1-jps：虚拟机进程工具" class="headerlink" title="6.1.1 jps：虚拟机进程工具 ~~"></a>6.1.1 jps：虚拟机进程工具 ~~</h3><p><strong>功能：</strong></p><blockquote><p>可列出正在运行的虚拟机进程，并显示虚拟机执行主类（main函数所在的类）名称以及这些进程的<strong>本地虚拟机唯一ID</strong>（Local Virtual Machine Identiﬁer,<strong>LVMID</strong>)。其他的JDK工具大多数需要输入jps查询到LVMD来确定要监控的虚拟机进程。</p></blockquote><p>jps命令格式：<code>jps[options] [hostid]</code></p><p>hostid 可用于查询开启RMI服务的远程虚拟机状态，hostid为RMI注册的主机名</p><p>options有：</p><table><thead><tr><th>options 参数</th><th>意义</th></tr></thead><tbody><tr><td>-q</td><td>只输出LVMD，忽略主类名称</td></tr><tr><td>-m</td><td>输出虚拟机进程启动时传递给主类main()函数的参数</td></tr><tr><td>-l</td><td>输出主类全名，如果进程执行的是jar,输出jar路径</td></tr><tr><td>-v</td><td>输出虚拟机进程启动时JVM参数</td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jps指令.png" alt="jps指令"></p><h3 id="6-1-2jstat：虚拟机统计信息监视器工具"><a href="#6-1-2jstat：虚拟机统计信息监视器工具" class="headerlink" title="6.1.2jstat：虚拟机统计信息监视器工具"></a>6.1.2jstat：虚拟机统计信息监视器工具</h3><p><strong>功能：</strong></p><blockquote><p>用于监控虚拟机各种运行状态信息的命令行工具，它可以显<strong>示本地或远程虚拟机中的类的装载，内存，垃圾回收，JIT编译等运行数据</strong>。在没有GUI图形界面，只提供纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首先工具。</p></blockquote><p>jstat命令格式为：<code>jstat [option vmid[interval count]]</code> </p><p>如果是本地虚拟机进程VMID与LVMID是一致的，如果是远程虚拟机进程，那么VMID格式因该为：</p><p><code>[protocol:][//]lvmid[@hostname[:port]/severname]</code></p><p>参数<strong>interval和count代表查询间隔（单位ms/s）和 次数</strong>，如果省略这两个参数，则默认只查询一次</p><p>选项option代表<strong>用户希望查询的虚拟机信息</strong>，主要分为三类：<strong>类装载，垃圾收集，运行期编译</strong>等状况，具体选项作用如下：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>监视<strong>类装载，卸载次数，总空间以及装载类所消耗的时间</strong></td></tr><tr><td>-gc</td><td>监视<strong>java堆状况，包括Eden区，两个Survivor区，老年代，元空间等的容量，已用空间，GC时间合计等信息</strong></td></tr><tr><td>-gccapacity</td><td>监视内容与-gc基本相同，但是输出为主要关注<strong>java堆各个区域使用到的最大，最小空间</strong></td></tr><tr><td>-gcutil</td><td>监视内容与-gc基本相同，但是输出主要<strong>关注已使用空间占总空间的百分比</strong></td></tr><tr><td>-gccause</td><td>于gcutil功能一样，但是会额外输出<strong>导致上一次GC产生的原因</strong></td></tr><tr><td>-gcnew</td><td>监视<strong>新生代GC状况</strong></td></tr><tr><td>-gcnewcapacity</td><td>监视内容于-gcnew基本相同，输出主要<strong>关注新生代使用到的最大，最小空间</strong></td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jstat指令.png" alt="jstat指令"></p><h3 id="6-1-3jinfo：Java配置信息工具"><a href="#6-1-3jinfo：Java配置信息工具" class="headerlink" title="6.1.3jinfo：Java配置信息工具"></a>6.1.3jinfo：Java配置信息工具</h3><p><strong>功能：</strong> </p><blockquote><p>jinfo用于<strong>查看和调整虚拟机的配置参数</strong></p></blockquote><p>jinfo的命令格式为：</p><p><code>jinfo[option] vmid</code></p><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-flag</td><td>查询线程的参数</td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jinfo指令.png" alt="jinfo指令"></p><p>我们可以用info -flags来查询线程的参数，其中的Non-default VM flags为虚拟机的设置参数，Command line为用户自行设置的参数</p><h2 id="6-1-4jmap：java内存映像工具"><a href="#6-1-4jmap：java内存映像工具" class="headerlink" title="6.1.4jmap：java内存映像工具"></a>6.1.4jmap：java内存映像工具</h2><p><strong>功能：</strong> </p><blockquote><p>生成堆转储快照(一般称为heapdump或<strong>dump文件</strong>)。如果不使用jmp命令，要想获取Java堆转储快照，还有一些比较暴力的手段：譬如在之前用过的。</p></blockquote><blockquote><p>XX+:HeapDumpOnOutOfMemoryError参数，可以让虚拟机在OOM异常出现之后自动生成dump文件。                          </p><p>jmap的作用并不仅仅为了获取dump文件，它还可以查询finalize执行队列，Java堆和永久代的详细信息，如空间使用率，当前使用的是那种收集器。</p></blockquote><p>jmap的命令格式：</p><p><code>jmap[option] vmid</code></p><p>option的常用选项及作用见下表</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-heap</td><td>显示jvm heap详细信息</td></tr><tr><td>-histo</td><td>显示jvm heap中对象统计信息，包括类，实例数量，合计容量,包括对象数组和所占空间大小</td></tr><tr><td>-dump</td><td>生成java堆转储快照。格式为：-dump:[live],format=b,file=filename，其中live子参数说明是否只dump存活的对象</td></tr></tbody></table><h3 id="6-1-5jhat：虚拟机转存储快照分析工具"><a href="#6-1-5jhat：虚拟机转存储快照分析工具" class="headerlink" title="6.1.5jhat：虚拟机转存储快照分析工具"></a>6.1.5jhat：虚拟机转存储快照分析工具</h3><p>与jmap命令搭配使用，用于分析jmap生成的堆转存储快照，jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览中查看。实际工作中使用jhat的几率并不大，因为分析dump文件的工作是一个<strong>耗时且消耗硬件资源的过程</strong>，一般不会在部署机器上分析；<strong>二是jhat分析功能相对来说比较简陋，我们可以使用Visual VM或者MAT等工具实现比jhat更强大更专业的分析功能。</strong></p><p>当屏幕上显示“Sever is ready”后，用户在浏览器中输入“<a href="http://localhost:7000”就可以看到分析结果" target="_blank" rel="noopener">http://localhost:7000”就可以看到分析结果</a></p><h3 id="6-1-6jstack：Java堆栈跟踪工具"><a href="#6-1-6jstack：Java堆栈跟踪工具" class="headerlink" title="6.1.6jstack：Java堆栈跟踪工具"></a>6.1.6jstack：Java堆栈跟踪工具</h3><p>功能：</p><blockquote><p>虚拟机当前时刻的<strong>线程快照</strong>。线程快照指的是当前虚拟机内的每一条<strong>线程正在执行的方法堆栈的集合</strong>，生成线程快照的作用是，可用于定<strong>位线程出现长时间停顿的原因</strong>，如<strong>线程间死锁</strong>，<strong>死循环</strong>，<strong>请求外部资源导致的长时间等待问题</strong>，当线程出现<strong>停顿</strong>时，就可以用jstack各个线程调用的堆栈情况。</p></blockquote><p><code>jstack[option] vmid</code> </p><p><strong>option:</strong> </p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-F</td><td>当正常输出的请求不被响应时，<strong>强制输出线程堆栈</strong></td></tr><tr><td>-l</td><td>除堆栈外，显示关于<strong>锁的附加信息</strong></td></tr><tr><td>-m</td><td>如果调用到本地方法的话，可以线程C/C++的堆栈</td></tr></tbody></table><h1 id="七-Java内存模型"><a href="#七-Java内存模型" class="headerlink" title="七.Java内存模型"></a>七.Java内存模型</h1><p>JVM定义了一致java内存模型来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都达到一致的内存访问效果。</p><p>Java内存模型的主要目标是定义程序中各个变量的访问规则，即在J<strong>VM中将变量存储到内存中和从内存中取出变量的底层细节。</strong>（<strong>此处的变量包括实例字段，静态字段和构成数组对象的元素</strong>）,不包括局部变量和方法参数，因为这两个线程私有，不会被线程共享。</p><h2 id="7-1主内存与工作内存"><a href="#7-1主内存与工作内存" class="headerlink" title="7.1主内存与工作内存"></a>7.1主内存与工作内存</h2><p>工作内存：每个线程独有</p><p>主内存：所有线程共享内存。（堆（大部分），方法区，运行时常量池）</p><p>Java内存模型规定了<strong>所有变量都存储在主内存中</strong>，<strong>每条线程还有的自己的工作内存</strong> ，线程<strong>工作内</strong> 存保存了线程使用到的<strong>变量的主内存副本拷贝</strong>。线程对<strong>变量的所有操作（读取，赋</strong>值等）都必须在<strong>工作内存中进行</strong>，而<strong>不能直接读写到主内存中的变量</strong>。不同线程也<strong>无法直接访问对方工作内存中的变量</strong>，线程间变量值的传递<strong>均需要通过主内存</strong>来完成。</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\线程主内存工作内存.png" alt="线程，主内存，工作内存关系"></p><h2 id="7-2内存间的交互操作"><a href="#7-2内存间的交互操作" class="headerlink" title="7.2内存间的交互操作"></a>7.2内存间的交互操作</h2><p><strong>主内存与工作内存之间的具体交互协议</strong>，即一个变量如何从主内存中拷贝到工作内存，如何从工作内存同步回主内存之类的实现细节，java内存模型中定义了如下8中操作来完成。JVM实现时必须保证下面提及的<strong>每种操作是的原子的，不可再分隔的。</strong></p><ul><li><strong>lock(锁定)：</strong>作用于主内存的变量，它把一个变量标识为一个线程独占的状态   <strong>指令级别的锁</strong> </li><li><strong>unlock(解锁)：</strong>作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。     </li><li><strong>read(读取)  :</strong> 作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。        </li><li><strong>load(载入) :</strong> 作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use(使用) :</strong> 作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎。 </li><li><strong>assign(赋值) :</strong> 作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量。 </li><li><strong>store(存储) :</strong> 作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便后续的write操作 使用。 </li><li><strong>write(写入) :</strong>  作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p>Java内存模型三大特性：</p><ol><li><p><strong>原子性：</strong>由java内存模型来直接保证原子性变量的操作，read,load use store assign 大致可以r认为。基本数据类型的访问式原子的。如若需要更大范围的原子性，需要synchorized关键字约束。（即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行）</p></li><li><p><strong>可见性：</strong>可见性指的式当一个线程修改了共享变量的值，其他线程能够立刻得知这个修改。volatile,synchronized,final三个关键字可以实现可见性。</p></li><li><p><strong>有序性：</strong>如果在本线程内观察所有操作都是有序的，若在线程外观察另一个线程所有操作都是无序的。前半句是指“线程内表现为串行”，后半句是指“指令重拍”和“工作内存与主内存同步延迟现象”。</p><p>tips:<strong>这里的有序性指的是，逻辑上的有序</strong>，即保证执行结果最总不改变，操作先后次序改变不影响最终结果就称有序性。</p></li></ol><p>   JVM具备先天的有序性，即无须通过任何手段都能够保证有序性，称为JVM的happen-before原则，若两个操作的次序无法从happen-bvefore中推导出来，则无法保证其有序性，JVM可以随意对其进行重排序。</p><h3 id="happens-before-先行发生原则"><a href="#happens-before-先行发生原则" class="headerlink" title="happens-before(先行发生原则)"></a>happens-before(先行发生原则)</h3><ul><li><p><strong>程序次序规则：</strong>一个线程内，按照代码顺序，<strong>书写在前面的操作 </strong> 先发生子于 <strong>书写在后面</strong>的操作</p></li><li><p><strong>锁定规则：</strong>一个<strong>unlock操作先行</strong> 发生于 后面<strong>对同一个锁的lock操作</strong></p></li><li><p><strong>volatile变量规则：</strong>对一个变量的<strong>写擦操作</strong> 先发生于 <strong>后面对这个变量的读操作</strong></p></li><li><p><strong>传递规则：</strong>如果操作A 先生于 操作B,而操作B又 先发生于 操作c,则可以得出<strong>操作A</strong> 先发生于 <strong>操作C</strong></p></li><li><p><strong>线程启动规则：</strong>Thread对象的<strong>start()方法调用</strong> 先行发生于 <strong>被中断的代码检测到中断事件的发生</strong>。</p></li><li><p><strong>线程中断规则：</strong>对线程<strong>interrupt()方法调用</strong> 先发生于 <strong>被中断线程的代码检测到中断事件的发生。</strong></p></li><li><p><strong>线程终结规则</strong> ：<strong>线程中所有的操作都</strong>先发生于<strong>线程的终止检测</strong>，我们可以通过Thread.join()方法结束，Thread.isAlive()的返回值手段检测到线程已经终止执行。</p></li><li><p><strong>对象终结规则：</strong>一个<strong>对象的初始化完成</strong>先行发生于它的<strong>finalize()方法的开始</strong>。</p></li></ul><p>  也就是说，要向并发程序正确的执行，必须要保证原子性，可见性，以及有序性。只要一个没有被保证，就有可能导致程序运行不正常。</p><h2 id="7-3volatile型变量的特殊规则"><a href="#7-3volatile型变量的特殊规则" class="headerlink" title="7.3volatile型变量的特殊规则"></a>7.3volatile型变量的特殊规则</h2><p>关键字volatile可以说是JVM提供的最轻量级的同步机制，JVM内存模型对volatile专门定义了一些特殊访问规则。</p><p>当一个变量被定义为volatile之后，它具备两种特性。可见性和有序性</p><p>两层语义：</p><ul><li><strong>第一层语义：</strong>内存可见–可见性</li><li><strong>第二层语义：</strong>禁止指令重排–有序性</li></ul><p><strong>可见性：</strong>当一个线程修改了这个变量的值，新值能被其他线程可以立刻得到，而普通变量做不到这一点，普通变量的值在线程之间传递需要通过主内存来完成。</p><p>具体来说，volatile的作用是：<strong>在本CPU对变量的修改直写入主内存中，同时这个写操作使得其他CPU中对应的变量的缓存行无效</strong>，<strong>这样其他线程在读取这个变量时候必须从主内存中读取，所以读取得到的是最新的</strong>，这就是上面说的能被立即“看到”。</p><p>volatile修饰的变量仅仅只拥有这两个性质，<strong>并不拥有原子性，volatile变量的运算在并发下是不安全的，原因java里面的运算并非原子操作。</strong></p><p>由于volatile只保证了可见习性和，有序性。子在不符合以下两条规则的运算场景中，我们仍然需要<strong>通过加锁(synchronized或lock)来保证原子性</strong></p><ol><li>运算结果并不依赖变量的当前值，或者能够确保只有单一线程修改变量的值</li><li>变量不需要与其他的状态变量共同参与不变约束</li></ol><p><strong>并发场景下对于类似++操作如何保证原子性</strong></p><ul><li><strong>加锁，结合synchronized或者lock体系</strong></li><li><strong>使用原子类（java.util.current.atomic包下的所有类-内部使用CAS保证原子性）</strong></li></ul><p><strong>有序性：volatile可以禁止指令重排</strong> 。volatile在其汇编代码中有一个lock操作，这个操作相当一个<strong>内存屏障</strong>，<strong>指令重排不能越过内存屏障</strong>，具体来</p><ul><li><strong>说在执行volatile变量时，内存屏障之前的语句一定被执行过了且结果对后面执行的语句时已知的，而内存屏障后面的语句一定还没有执行到</strong>；</li><li>在进行指令优化时，<strong>在volatile变量之前的语句不能能被重排其之后，相反的其后的语句也必能被重排到之前。</strong></li></ul><!--more-->]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再识Java-02面向对象</title>
      <link href="/2019/01/28/%E5%86%8D%E8%AF%86Java-02%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/01/28/%E5%86%8D%E8%AF%86Java-02%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向过程编程缺少了可重用性设计</p><p>面向对象三大特征：</p><blockquote><ol><li><p>封装性：所谓封装性，就是把客观事物封装成了抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对于不可信的进行信息隐藏。简而言之就是，<strong>内部操作对外部而言不可见（保护性）</strong></p></li><li><p>继承性：继承是指这样的一种能力：它可以<strong>使现有类的所有功能</strong>，<strong>并在无需重信编写原来类的情况下对这些功能进行扩展</strong></p></li><li><p>多态性（*）：所谓多态就是指一个类实例的<strong>相同方法再不同的情形下有不同的表现形式</strong>。多态的机制使具有不同内部结构的对象可以共享相同的外部接口</p><p>利用多态可以得到良好的设计-&gt;</p></li></ol></blockquote><p>面向对象的最大特征：可以进行生活的抽象</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再识java-01</title>
      <link href="/2019/01/27/%E5%86%8D%E8%AF%86java-01/"/>
      <url>/2019/01/27/%E5%86%8D%E8%AF%86java-01/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="java再识"><a href="#java再识" class="headerlink" title="java再识"></a>java再识</h1><p>初始一见倾心，再识亦如初始。</p><p>​                                                        -java再识有感~</p><p><img src="/2019/01/27/再识java-01/图片\感悟.png" alt="感悟"></p><a id="more"></a><h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><p>变量，常量，函数，语句块</p><ul><li>标识符由字母，数字，下划线，$所组成，其中不能以数字开头，不能用Java中的保留字（关键字）</li><li>标识符采用有意义的简单命名</li><li>“$”不要在代码里出现</li></ul><p>对于类名和变量名，java的标准命名规范为<strong>“驼峰命名法”</strong> :camel:</p><p>对于类名，类名是以大写字母开头的名词：如果类名由多个单词组成，则每个单词的首字母大写。且源文件的文件名必须和公共类的名称相同</p><p>对于变量，如果只含有一个单词，则全部小写；如果变量名由多个单词组成，则从第二个单词开始，每个单词的首字母大写</p><p><strong>阿里编码规范：</strong></p><blockquote><ol><li>代码中的命名均不能以下划线或美元符号开始，也不能以下划线和美元结束。</li><li>代码命名严谨使用拼音与英文混合的方式，更不允许直接使用中文。</li><li><strong>类</strong>名使用<strong>UpperCamelCase风格</strong>，<strong>方法名，参数名，成员变量</strong>，<strong>局部变量</strong>统一采用<strong>lowerCamelCase风格</strong>。</li><li><strong>常量</strong>命名<strong>全部大写</strong>，<strong>单词间用下划线隔开</strong>。</li></ol></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>大数据类型转换小数据类型，必须强转，但有时会有丢失内容</p><blockquote><ol><li>范围小的数据可以自动转变为数据范围大的数据类型（数学计算时）</li><li>数据范围大的数据类型只有强制转换时才能转换类型下的数据类型</li></ol></blockquote><p>关于数据的默认值，默认值在主方法中无效</p><h2 id="方法的定义与使用"><a href="#方法的定义与使用" class="headerlink" title="方法的定义与使用"></a>方法的定义与使用</h2><h3 id="2-1方法重载（重要）"><a href="#2-1方法重载（重要）" class="headerlink" title="2.1方法重载（重要）            ~~"></a>2.1方法重载（重要）            ~~</h3><p>定义：方法名称相同，参数类型或个数不同</p><p>方法的签名：指的是方法名与参数，<strong>返回类型不是签名的一部分</strong></p><p><strong>（im） 不能由两个名字相同，参数类型也相同却返回不同类型值得方法</strong></p><p>范例：重载方法实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        System.out.println(add(<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">        System.out.println(add(<span class="number">5</span>,<span class="number">5</span>,<span class="number">55</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y+z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开发原则：在进行方法重载得时候。要求：方法的返回值一定相同</strong></p><h2 id="2-2方法覆写（重要）"><a href="#2-2方法覆写（重要）" class="headerlink" title="2.2方法覆写（重要）"></a>2.2方法覆写（重要）</h2><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p>数组时引用类型，由内存分配问题：</p><h2 id="3-1数组的动态开辟"><a href="#3-1数组的动态开辟" class="headerlink" title="3.1数组的动态开辟"></a>3.1数组的动态开辟</h2><blockquote><ul><li>数组的动态初始化（声明并开辟数组）</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组类型[] 数组名称 = <span class="keyword">new</span> 数据类型[长度]</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当采用动态数组初始化开辟空间后，数组的每个元素都是该数据类型的默认值；</li><li>数组本身是一个有序的集合操作，所以对于数组的内容操作往往采用循环的模式完成。（数组是一个有限的集合，采用for循环）</li></ol><h2 id="3-2数组的静态开辟"><a href="#3-2数组的静态开辟" class="headerlink" title="3.2数组的静态开辟"></a>3.2数组的静态开辟</h2><p>如果希望数组在定义的同时可以设置内容，那么就采用静态初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[]数组名称 = <span class="keyword">new</span> 数据类型[]&#123;值，值，值...&#125;</span><br></pre></td></tr></table></figure><h2 id="4-对象数组"><a href="#4-对象数组" class="headerlink" title="4.对象数组"></a>4.对象数组</h2><p>对象数组往往是以引用数据类型为住的定义，例如：类，接口</p><p><strong>4.1对象数组的动态初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称[]对象数组名称 = <span class="keyword">new</span> 类名称[长度]</span><br></pre></td></tr></table></figure><p>动态初始化如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    </span><br><span class="line"><span class="keyword">private</span> String name ;     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age ;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;       </span><br><span class="line"><span class="keyword">this</span>.name = name ;         </span><br><span class="line"><span class="keyword">this</span>.age = age ;     </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">",年龄："</span>+<span class="keyword">this</span>.age) ;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person[<span class="number">3</span>];<span class="comment">//动态对象数组初始化，每个元素都是其对应数据类型的默认值</span></span><br><span class="line">per[<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>);</span><br><span class="line">per[<span class="number">1</span>] = <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">2</span>)；</span><br><span class="line">Per[<span class="number">2</span>] = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x= <span class="number">0</span> ;x&lt;per.length;x++)&#123;</span><br><span class="line">    per[x].getInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.2对象数组的静态初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名"</span>+<span class="keyword">this</span>.name+<span class="string">"年龄："</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Test&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    Person[]per = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">       <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>),</span><br><span class="line">       <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">2</span>),</span><br><span class="line">       Person(<span class="string">"王五"</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;;<span class="comment">//对象数组静态初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x= <span class="number">0</span> ;x&lt;per.length;x++)&#123;</span><br><span class="line">    per[x].getInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Java对数组的常用操作"><a href="#5-Java对数组的常用操作" class="headerlink" title="5.Java对数组的常用操作"></a>5.Java对数组的常用操作</h2><ul><li><p>数组排序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Arrays.sort(数组名称)</span><br></pre></td></tr></table></figure><p>只要是基本数据类型的数组，sort都可以进行排序处理（升序处理）</p><p><strong>内部使用的是双轴快速排序</strong></p></li><li><p>数组的部分拷贝：指的是将一个数组的部分内容替换掉另一个数组的部分内容（连续的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(源数组名称，源数组的开始点，目标数组名称，目标数组的开始点，拷贝长度)；  </span><br><span class="line">拷贝长度：单位是元素个数</span><br></pre></td></tr></table></figure></li><li><p>数组的拷贝：返回值是一个  新数组（新开辟的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Arrays.copyOf(源数组的名称，新数组的长度)</span><br></pre></td></tr></table></figure><p><strong>Java类集框架（动态数组）就采用此方法来动态扩容</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven初识</title>
      <link href="/2019/01/25/Maven%E5%88%9D%E8%AF%86/"/>
      <url>/2019/01/25/Maven%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Maven简介和安装"><a href="#Maven简介和安装" class="headerlink" title="Maven简介和安装"></a>Maven简介和安装</h1><p>了解Maven是什么，作什么、且安装</p><p><a href="http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。" target="_blank" rel="noopener">http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。</a></p><p>提供了开发人员构建一个完整的生命周期框架。开发团队可以<strong>自动</strong>完成项目的基础工具建设，<strong>Maven使用标准的目录结构</strong>和<strong>默认构建生命周期</strong>（编译规则）。</p><p>在多人开发团队环境时，Maven可以设置按标标准在非常短的时间里完成配置工作。由于大部分项目的设置都非常检查，并且可以重复使用，Maven让开发人员更加轻松，同时创建报表，检查，构建和测试自动化设置。</p><p>Maven提供了开发人员的方式来管理：</p><ul><li>Builds（创建）</li><li>Documentation（文档）API文档</li><li>Reporting（报告）</li><li>Dependencies (依赖)   </li><li>SCM（软件配置管理）</li><li>Releases (发布) 版本号 Maven的中央仓库</li><li>Distribution (分布)</li><li>mailing list (邮件列表)</li></ul><p>概括来说，Maven<strong>简化和标准化项目建设过程</strong>。<strong>处理编译，分配，文档</strong>，<strong>团队协作和其他任务的无缝衔接。</strong>Maven增加可重用性并负责建立相关的任务。</p><a id="more"></a><p>学习Maven得理由是非常多</p><ul><li>主流IDE(Eclipse,IDEA,Netbean)够内置了Maven</li><li>SpringFramework已经不再提供jar得下载，直接通过Maven进行依赖下载</li><li>在github,开源社区几乎所有流行得java项目都是通过Maven进行构建管理</li><li>主流软件公司也在使用Maven</li></ul><h1 id="2安装"><a href="#2安装" class="headerlink" title="2安装"></a>2安装</h1><p>完成</p><p>mvn package 打包</p><p>mvn clean 删除target临时文件</p><p>java打包:命令    java -jar</p><p>usage: mvn[options] [&lt;goal(s)] [&lt;phase(s)</p><table><thead><tr><th>Options:</th><th></th></tr></thead><tbody><tr><td>-D , –define <arg></arg></td><td>定义系统属性</td></tr><tr><td>-f,–file <arg></arg></td><td>强制指定pom.xml文件，默认为当前目录下的pom.xml</td></tr><tr><td>-h,–help</td><td>显示帮助信息</td></tr><tr><td>-P,–activate-profiles<arg></arg></td><td>逗号分隔活动的profiles列表</td></tr><tr><td>-q,–quiet</td><td>静默退出，只输出错误信息</td></tr><tr><td>-s,–setting <arg></arg></td><td>修改用户的setting.xml文件 读取顺序是 参数指定-&gt;用户目录/.m2/settings.xml-&gt;M3_HOME/conf/settings/xml</td></tr><tr><td>-v,–version</td><td>显示版本信息</td></tr><tr><td>-X,–debug</td><td>DEBUG模式输出处理日志</td></tr></tbody></table><h1 id="Maven实战"><a href="#Maven实战" class="headerlink" title="Maven实战"></a>Maven实战</h1><blockquote><ul><li>掌握Maven项目创建</li><li>掌握使用Maven构建java项目，Web项目</li></ul></blockquote><p>1.Maven创建java普通项目</p><p>mvn -B archetype:generate </p><p>-DarchetypeGroupID=org.apache.maven.archetypes</p><p>-DarchetypeArtifactID=maven-archetype-quicksrart （模名）</p><p>-DarchetypeVersion=1.1（模板版本号） （以上为一个快速的模板） -DgroupId=com.bittech.hello  (组织ID)</p><p>-artifactId=hello-app (项目名)   -version=1.0.0 （项目版本号）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>版本号 ：主版本号.次版本号.小版本号</p><p>小版本号：修改BUG改动后的版本号。</p><p>次版本号：添加，修改功能。</p><p>次版本号：添加功能，修改功能</p><p>大版本号：产品发生很大的变化。</p><p>(项目名)artifactId.version(版本号).packaging(jar)</p><p>指令：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p>发布到中央仓库</p><p>​    申请中央仓库 search.maven.org</p><p>​    settings文件里配置仓库服务认证信息</p><p>​    pom。xml:设置发布仓库地址</p><p>​    申请发布到中央仓库。</p><p>​    申请通过后，进行构架发布</p><p>公司私服</p><p>​    申请公司私服账号</p><p>​    settings中配置仓库服务的认证信息</p><p>​    pom.xml 设置发布仓库地址</p><p>​    发布构建</p><ul><li>配置操作<ul><li>pom.xml中配置信息</li><li>settings.xml中配置信息</li></ul></li></ul><p>发布构件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h1 id="构建可执行jar"><a href="#构建可执行jar" class="headerlink" title="构建可执行jar"></a>构建可执行jar</h1><p>可执行的jar构建是指的通过java命令来执行运行jar构建，类似windows下的exe,Linux下的sh</p><p>在我们打包输出的hello-app-1.0.0 jar通过执行java -jar hello-app-1.0.0.jar输出信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//构建可执行jar</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span> //归档 java里面的</span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.soyanga.HelloApp3<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addExtensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addExtensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                                $&#123;project.name&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                                $&#123;project.version&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                                $&#123;project.groupId&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行打包命令，然后通过jave命令执行jar</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line">java -jar target\hello-app<span class="number">-1.0</span><span class="number">.0</span>.jar</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>从上面的输出信息可以看出，我们打包输出的jar现在可以通过jave命令执行了。</p><p>2.Maven创 java Web项目</p><p>maven创建web项目和应用项目不同的是web项目的打包类型通常是war,以及web项目的目录中有webapp目录用来归档web页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.0 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>2.2目录信息</p><h2 id="1-Maven管理目标"><a href="#1-Maven管理目标" class="headerlink" title="1.Maven管理目标"></a>1.Maven管理目标</h2><p>Maven的管理目标是工程，它是一个软件工程管理工具。对于maven来说，一个软件工程的唯一标识是由<strong>（标识项目写者）组标号（groupId）构件【项目】编号（artifadtId）,版本信息（version）</strong>共同决定的。每个工程都有一个<strong>打包类型</strong>(packaging)，可以是<strong>jar,war,ear或者pom</strong>.<strong>打包类型决定了工程最终产物的类型</strong>，其中<strong>pom类</strong>型用于构建<strong>多模块工程</strong>。工程之间由两种关系：<strong>继承和聚合</strong></p><h2 id="1-1工程依赖关系"><a href="#1-1工程依赖关系" class="headerlink" title="1.1工程依赖关系"></a>1.1工程依赖关系</h2><p>依赖关系的管理是maven最精髓的地方。一个工程可以依赖多个其他工程，通过过工程的唯一标识</p><p>（groupId+artifactId+version）可以明确指明依赖的库及版本，而且能够处理依关系的传递。maven可以指定依赖的作用范围（scope），包括以下几种：</p><table><thead><tr><th>scope</th><th>编译阶段</th><th>测试阶段</th><th>运行</th><th>备注</th></tr></thead><tbody><tr><td>compile</td><td>v</td><td>v</td><td>v</td><td>默认scope</td></tr><tr><td>test</td><td></td><td>v</td><td></td><td>只在测试期依赖，如junit包</td></tr><tr><td>provided</td><td>v</td><td>v</td><td></td><td>运行期由服务器提供，如servlet-api包</td></tr><tr><td>runtime</td><td></td><td>v</td><td>v</td><td>编译器件不需要直接引用</td></tr><tr><td>system</td><td>v</td><td>v</td><td></td><td>编译和测试时由本机环境提供</td></tr></tbody></table><p>maven的依赖关系管理解决了一下重要问腿：</p><ul><li>工程依赖的版本管理</li><li>工程依赖种同一个工程的多版本依赖的冲突问题 -优先高版本</li><li>提供了标准的依赖关系的定义 </li></ul><h2 id="1-2工程聚合与继承"><a href="#1-2工程聚合与继承" class="headerlink" title="1.2工程聚合与继承"></a>1.2工程聚合与继承</h2><p>聚合：pom类型的工程用于构建多模块的工程，这体现了project之间的一种聚合关系：将一系列小的模块聚合成整个产品。通过聚合后的工程可以同时管理每个模块的构建、清理、文档等工作。</p><p>继承：上文提到的pom类型的工程同样可以定义多模块的工程配置信息，其中作为模块的工程的父模块被多模块继承，此时多模块就是该pom类型的工程的子工程，子工程可以复用父工程的配置信息。</p><h1 id="2-Mave核心概念"><a href="#2-Mave核心概念" class="headerlink" title="2.Mave核心概念"></a>2.Mave核心概念</h1><h1 id="2-1Pom"><a href="#2-1Pom" class="headerlink" title="2.1Pom"></a>2.1Pom</h1><p>POM是指<code>porject object Model</code>。pom是一个xml，是maven工作的基础，在执行goal时，maven会去项目的根目录下读取pom.xml获得需要得<strong>配置信息.pom</strong>文件中包含了<strong>项目得信息</strong>和m<strong>aven build项目所需的配置信息</strong>，通常有<strong>项目信息（如版本，成员）</strong>，<strong>项目的依赖</strong>，<strong>插件和goal</strong>，<strong>bulid选项等</strong>等pom是<strong>可以继承</strong>的，通常对于一个大型项目或是多个module情况，<strong>子模块的pom需要指定父模块的pom</strong>。</p><blockquote><p>通过实际操作来讲述POM组成</p></blockquote><h2 id="2-2构件（artifact）"><a href="#2-2构件（artifact）" class="headerlink" title="2.2构件（artifact）"></a>2.2构件（artifact）</h2><p>构件就是一个项目将要产生的文件，可以是jar文件，源文件，二进制文件，war文件，甚至是pom文件。每个artifact都是由<strong>groupId:artifactId:version</strong>组成的标识符唯一识别。需要被使用（依赖）的artifact都放在仓库中。</p><p>artifact的标识也成为构件的坐标，<strong>groupId通常使用创建构件的组织名称或者域名的反转</strong>（比如 org.springframework）;<strong>artifactId是构件的名称</strong>，通常在一个组织创建的构件中是唯一的（比如：spring-4.0.9.RELEASE）</p><p>同一个构件的不同版本：</p><h2 id="2-3仓库"><a href="#2-3仓库" class="headerlink" title="2.3仓库"></a>2.3仓库</h2><p>仓库主要用于获取工程依赖的其他工程的生成物，也可以来部署（deploy）maven工程的生成物。生成物包括各种打包的生成物以及pom文件。如果有必要，一个工程可以部署多个仓库</p><p>仓库可以分为本地库(local)和远程仓库(remote)。本地库通常用于本机的~/.m2/repository文件夹（可以通过settings.xml中的localRepository进行修改），远程库最常见的是maven中央库，此外也会有一些私服库用于企业内部</p><p>常用的仓库列表：</p><ul><li>Maven在线检索：<a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></li><li>中央仓库：<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>阿里：<a href="http://maven.aliyun.com/nexus/cotent/groups/public" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/cotent/groups/public</a></li><li>开源中国：<a href="http://maven.oschina.net/content/groups/public" target="_blank" rel="noopener">http://maven.oschina.net/content/groups/public</a></li><li>Spring社区：<a href="http://maven.spingframework.org/relese" target="_blank" rel="noopener">http://maven.spingframework.org/relese</a></li></ul><h2 id="2-4构件生命周期（Bulid-Liftcycle）"><a href="#2-4构件生命周期（Bulid-Liftcycle）" class="headerlink" title="2.4构件生命周期（Bulid Liftcycle）"></a>2.4构件生命周期（Bulid Liftcycle）</h2><p>maven将工程的构键过程理解为<strong>不同的生命周期和阶段</strong>。在工程的构建过程中，<strong>存在着不同的生命周期，这些生命周期互相独立，之间也没有一定的顺序关系。在每个生命周期又划分为不同的阶段。阶段之间又明确的顺序关系，同一个生命周期内的阶段必须按顺序依次执行。</strong></p><p>maven内置了三个生命周期，并为每个生命周期内置了一些阶段。下面列举出maven内置的生命周期及主要的阶段</p><p>default</p><p>clean</p><p>site</p><h2 id="2-5目标（goal）和插件（plugin）"><a href="#2-5目标（goal）和插件（plugin）" class="headerlink" title="2.5目标（goal）和插件（plugin）"></a>2.5目标（goal）和插件（plugin）</h2><p>Maven中定义的工程中定义了工程周期和阶段是抽象概念，不涉及具体的功能。具体的功能由插件（Plugin）实现目标代表了特定的任务，一个插件可以实现多个目标(Goal)</p><p>为了解插件的功能和共工程阶段，实现高度的可配置性，maven规定插件只是实现目标功能，通过配置来决定在那个阶段执行(Execution)那些目标操作。甚至把一个Goal绑定到多个Phase，以实现复用。</p><p>maven内置可一些默认的插件，并根据不同的工程<strong>packing类型</strong>在各个<strong>phase中默认绑定一些goal</strong>。下表列出default生命周期中各个阶段默认绑定的goal，其中goal按照惯例使用pluguname:goalname的方式标记。</p><p><strong>maven的插件是一种packaging</strong>类型为<strong>maven-plugin的特殊类型工程</strong>，它和普通的<strong>maven工程在使用maven的方法和特性一样的</strong>，不同之处是它<strong>服务与maven工具</strong>，可以通过<strong>常见maven插件</strong>来完成<strong>定制化的工程构件</strong>，<strong>管理的功</strong>能。</p><h1 id="3-Maven常用操作"><a href="#3-Maven常用操作" class="headerlink" title="3.Maven常用操作"></a>3.Maven常用操作</h1><ul><li>mvn clean 清理构件目录 target目录清除</li><li>mvn compile 编译源代码</li><li>mvn test-compile编译测试代码</li><li>mvn test 运行单元测试</li><li>mvn package运行打包</li><li>mvn install 运行安装，生成构建存储都本地仓库</li><li>mvn clean package 清理然后打包</li><li>mvn clean package -Dmaven.test.skip=true清理然后打包，但是跳过测试阶段</li><li>mvn site生成项目站点   3.3 /3.7有bug  使用2.2 或者3.7.1 或者使用以下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：site生成项目网站--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span>  <span class="comment">&lt;!--中文形式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种：site生成项目网站--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- site3.3 3.7 使用以下方法site 原因这个插件更新后的的bug--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Pom-xml配置详细"><a href="#Pom-xml配置详细" class="headerlink" title="Pom.xml配置详细"></a>Pom.xml配置详细</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mven关键设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.soyanga.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目描述--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.soyanga.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>based on maven project<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发者信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>jack@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>master<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>tom@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Develpoer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置所有项目需要依赖的第三方Jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--导入第三方lombok Jar包--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简化类的get，set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有maven生命周期中需要的插件在此配置，插件是一个特殊的maven构建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--site生成项目网站--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--在此添加插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--依赖的jar包添加到classpath--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--设置可执行jar的主类--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.soyanga.hello.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addExtensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addExtensions</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--指定可执行jar依赖包归档的目录前缀--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Title</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Vendor-Id</span>&gt;</span>$&#123;project.groupId&#125;<span class="tag">&lt;/<span class="name">Implementation-Vendor-Id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><!--more-->]]></content>
      
      
      <categories>
          
          <category> Java EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 代码管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-各种协议报头图</title>
      <link href="/2019/01/23/%E7%BD%91%E7%BB%9C-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4%E5%9B%BE/"/>
      <url>/2019/01/23/%E7%BD%91%E7%BB%9C-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络模型（OSI-TCP-IP分层结构）"><a href="#网络模型（OSI-TCP-IP分层结构）" class="headerlink" title="网络模型（OSI/TCP/IP分层结构）"></a>网络模型（OSI/TCP/IP分层结构）</h1><p><img src="/2019/01/23/网络-各种协议报头图/OSI、TCP_IP参考模型.png" alt="OSI、TCP_IP参考模型"></p><a id="more"></a><h1 id="数据报的封装和解包分用"><a href="#数据报的封装和解包分用" class="headerlink" title="数据报的封装和解包分用"></a>数据报的封装和解包分用</h1><p><img src="/2019/01/23/网络-各种协议报头图/封装解包分用.png" alt="封装解包分用"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="DHCP-UDP-长度超过512字节使用TCP"><a href="#DHCP-UDP-长度超过512字节使用TCP" class="headerlink" title="DHCP-(UDP/长度超过512字节使用TCP)"></a>DHCP-(UDP/长度超过512字节使用TCP)</h2><p><strong>动态主机配置协议</strong></p><p>一、为主机申请IP:DHCP态主机配置协议</p><ol><li><p>假设主机最开始并没有连接网络，所以主机需要获取IP地址以及其他信息，那么就需要先使用DHCP来获取。</p></li><li><p>主机生成一个<strong>DHCP请求报文</strong>，并将这个报文放入具有<strong>目的的端口号67</strong>和<strong>源端口号68</strong>的<strong>UDP报文中。</strong></p></li><li><p>该报文文段被放入在一个具有<strong>广播IP目的地址（255.255.255.255）</strong>和<strong>源IP地址（0.0.0.0</strong>）的<strong>IP数据报中</strong></p></li><li><p>包含DHCP请求报文的IP据报则被放置在<strong>MAC帧</strong>中。这个以太网帧具有<strong>目的地址MAC地址FF.FF.FF.FF.FF.F</strong>F使该帧将广播到交换机连接的所有设备</p></li></ol><p>   <strong>以上过程就是将DHCP请求报文一层一层做封装（添加了UDP报头，IP报头字段，数据帧报头字段）</strong> </p><ol start="5"><li><p>连接在<strong>交换机的DHCP服务器</strong>收到广播帧之后，不断向上分解得到<strong>IP数据报</strong>，<strong>UDP数据段，DHCP请求报文</strong> ，之后DHCP服务器生成DHCP,ACK报文。DHCP服务器能够以<strong>CIDR块</strong>的形式（服务器IP子 按位与 服务器子网掩码获取子网地址的范围，并取地址分配给<strong>主机IP地址</strong>）</p><blockquote><p>该报文包含以下信息：</p><ul><li><p><strong>IP地址</strong></p></li><li><p><strong>DNS服务器得IP地址</strong></p></li><li><strong>默认网关路由器的IP地址（第一跳的IP地址）</strong></li><li><strong>子网块==子网掩码</strong></li></ul></blockquote></li></ol><ol start="6"><li>将ACK报文向下进行依次封装成UDP报文段，IP报文，MAC帧,这个以太网帧中<strong>目的地址为主机MAC地址</strong>，<strong>源地址为路由器中的DHCP服务器地址</strong>。</li></ol><p>   <strong>得到的MAC帧进行解包，分用处理，然后应用程DHCP服务器给出响应ACK报文再次向下封装发送回个主机，其中包含的内容如上。</strong> </p><ol start="7"><li><p>包含DHCP ACK报文的<strong>MAC帧</strong>由路由器发送给交换机。交换机是自学习的，并且先前从主机收到的包含DHCP请求的MAC帧，所以交换机知交换机表中查询到，该向那个接口发送该MAC帧。</p></li><li><p>主机接收到包含DHCP的MAC帧，从连路层层层向上解包分用，IP报文，UDP报文段，从UDP报文段中抽取DHCP ACK报文。此时主机的DHCP客户端记录其中的IP地址和DNS服务器的IP地址，在主机的<strong>IP转发表(路由表)</strong>中安装默认网关地址。此时，主机已经初始化所有网络组件，并且准备开始处理web页面的获取。</p></li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h2 id="HTTP报头"><a href="#HTTP报头" class="headerlink" title="HTTP报头"></a>HTTP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><ul><li></li><li>URL</li></ul><p><img src="/2019/01/23/网络-各种协议报头图/URL-网址.png" alt="URL-网址"></p><h1 id="传出层"><a href="#传出层" class="headerlink" title="传出层"></a>传出层</h1><h2 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/UDP报文图.png" alt="UDP报文图"></p><h2 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/TCP协议格式.png" alt="TCP协议格式"></p><ul><li>面向连接过程中为什么要3次握手？</li></ul><ul><li>断开连接时要四次挥手为什么要四次挥手？</li></ul><ul><li>4次挥手主动断开的一方要进入TIME_WAIT为什么要进入TIME_WAIT</li></ul><blockquote><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态</li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值</li></ul></li></ul></blockquote><ul><li>TCP异常问题的解答，客户端进程结束，机器重启，机器断电/网络断开 1</li></ul><blockquote><p>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p></blockquote><blockquote><p>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p></blockquote><ul><li><p>收发数据时，对方接收缓冲区已经满了，我们无法发送数据。那么此时我们什么时候发？此时怎么知道对方的接收窗口已经有数据更新了？</p><blockquote><p> 如果接收端缓冲区满了, 就会将窗⼝大小置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</p></blockquote></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP报头"><a href="#IP报头" class="headerlink" title="IP报头"></a>IP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/IP协议头格式.png" alt="IP协议头格式"></p><ul><li>IP分片，重组</li></ul><ul><li>解决IP地址数量限制</li></ul><ul><li>路由</li></ul><h2 id="ICMP报头"><a href="#ICMP报头" class="headerlink" title="ICMP报头"></a>ICMP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/ICMP报文格式.png" alt="ICMP报文格式"></p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><img src="/2019/01/23/网络-各种协议报头图/ARP数据报格式.png" alt="ARP数据报格式"></p><h2 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h2><p><img src="/2019/01/23/网络-各种协议报头图/以太网网络帧格式.png" alt="以太网网络帧格式"></p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> 图解协议报头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络重点知识总结</title>
      <link href="/2019/01/23/%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/01/23/%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络层ICMP协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82ICMP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82ICMP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p><strong>网络层协议！！！！</strong></p><p>适用于：一个新搭建的好的网络，往往需要先进行一个简单的测试，来验证网络是否畅通；但是IP协议并不提供可靠传输。如果丢包了，IP协议并不能通知传输层是否丢包以及丢包的原因。</p><h2 id="ICMP功能"><a href="#ICMP功能" class="headerlink" title="ICMP功能"></a>ICMP功能</h2><p>ICMP正是提供这种功能的协议；ICMP协议主要功能如下：</p><blockquote><ul><li>确认IP包是否成功到达目标地址</li><li>通知在发送过程中IP包被丢弃的原因</li><li>ICMP也是基于IP协议工作的。但是他并不是提供传输层的功能，所以ICMP协议是网络层协议</li><li>ICMP只能搭载IPv4使用，如果是IPb6的情况要使用的是ICMPv6;</li></ul></blockquote><h2 id="ICMP工作流程"><a href="#ICMP工作流程" class="headerlink" title="ICMP工作流程"></a>ICMP工作流程</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP工作流程.png" alt="ICMP工作流程"></p><h2 id="ICMP报文格式"><a href="#ICMP报文格式" class="headerlink" title="ICMP报文格式"></a>ICMP报文格式</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP报文格式.png" alt="ICMP报文格式"></p><a id="more"></a><p>ICMP大概分为两类报文：</p><blockquote><ul><li>一类是通知出错原因</li><li>一类是用于诊断查询</li></ul></blockquote><h3 id="ICMP报文类型字段"><a href="#ICMP报文类型字段" class="headerlink" title="ICMP报文类型字段"></a>ICMP报文类型字段</h3><table><thead><tr><th>类型（十进制）</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>回送应答</td></tr><tr><td>3</td><td>目标不可达</td></tr><tr><td>4</td><td>原点抑制</td></tr><tr><td>5</td><td>重定向或改变路由</td></tr><tr><td>8</td><td>回送请求</td></tr><tr><td>9</td><td>路由器公告</td></tr><tr><td>10</td><td>路由器请求</td></tr><tr><td>11</td><td>超时</td></tr><tr><td>17</td><td>地址子网请求</td></tr><tr><td>18</td><td>地址子网应答</td></tr></tbody></table><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ping实际操作.png" alt="ping实际操作"></p><blockquote><ul><li>此处的ping连接的是一个域名，而不是一个url，一个域名可以通过DNS解析成IP地址</li><li>ping命令不光校验网络的连通性，同时也会统计响应时间和TTL（IP包中的Time TO Live,生存周周期（IP层跳跳次数））</li><li>ping命令会先发送一个ICMP回送请求给对端，即报文的类型填写的是8</li><li>‘对端接收后会返回一个ICMP 回送应答。</li></ul></blockquote><p>ping命令基于ICMP协议是是实现， 是在网络层. 而端口号, 是传输层的内容. 在ICMP中根本就不关注端口号这样的信息。</p><h2 id="traceroute命令"><a href="#traceroute命令" class="headerlink" title="traceroute命令"></a>traceroute命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/traceroute实际操作.png" alt="traceroute实际操作"></p><p>能够打印出可执行程序主机，一直到目标主机之前经历了多少路由器。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> ICMP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他重要协议和技术</title>
      <link href="/2019/01/22/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/01/22/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h1><p>应用层协议-DNS是一整套从域名映射到IP的系统</p><h2 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h2><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h2 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h2><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><a id="more"></a><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后，发生的事情"><a href="#浏览器中输入URL之后，发生的事情" class="headerlink" title="浏览器中输入URL之后，发生的事情"></a>浏览器中输入URL之后，发生的事情</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li>DNS域名解析</li><li>所以就要先建立连接（三次握手）</li><li>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h2 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h2><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h2 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h2><p>欠一张转换图</p><p>NAPT</p><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h2 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h2><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在热备, 所有的TCP连接也都会断开</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> DNS协议 </tag>
            
            <tag> NAT技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络链路层ARP协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82ARP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82ARP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/22/网络链路层ARP协议/ARP缓存表.png" alt="ARP缓存表"></p><a id="more"></a><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> ARP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-数据链路层以太网协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]</p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h4 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h4><p><img src="/2019/01/22/网络-数据链路层以太网协议/以太网网络帧格式.png" alt="以太网网络帧格式"></p><a id="more"></a><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比地址和ip地址的"><a href="#对比地址和ip地址的" class="headerlink" title="对比地址和ip地址的"></a>对比地址和ip地址的</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP</p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</li><li>TCP在建立连接的过程中, 通信双方会进行MSS协商. </li><li>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </li><li><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></li></ul><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p><ul><li>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> 以太网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络层IP协议</title>
      <link href="/2019/01/21/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/21/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/21/网络-网络层IP协议/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/21/网络-网络层IP协议/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</li><li><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做<strong>DHCP</strong>，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/21/网络-网络层IP协议/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> IP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-TCP扩展</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-TCP%E6%89%A9%E5%B1%95/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-TCP%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h2><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><a id="more"></a><h2 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h2><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区⾥等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><p>粘包问题</p><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h2 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h2><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
          <category> TCP/UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-传输层TCP协议(2)</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(2)/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(2)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h1><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/TCP连接流程图.png" alt="TCP连接流程图"></p><h2 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h2><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><a id="more"></a><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h2 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h2><p><strong>在什么状态干什么事</strong></p><h3 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h3><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h3 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h3><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很⼤数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><p>确认应答机制（ACK）机制详解</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h3 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h3><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太端，就可能影响整提的重传效率</p><p><strong>TCP为了保证无论在任何环境下都能⽐较⾼性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li><em>如果仍然得不到应答, 等待 4</em>500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h3 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h3><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和特高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，超时重传虽然慢了点，但是可以确保有效性，可靠性。</p><p>流量控制（Flow Control）</p><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，谈谈接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增⻓长的那么快, 因此不能使拥塞窗⼝口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, ⽽而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h1 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h1><h2 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h2><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><p>提高性能</p><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h2 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h2><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h2 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h2><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
          <category> TCP/UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-传输层TCP协议(1)</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(1)/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(1)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/20/网络-传输层TCP协议(1)/TCP协议格式.png" alt="TCP协议格式"></p><a id="more"></a><ul><li>源/目的端口号：表示数据从那个进程来，到那个进程去</li><li>32位序号/32位确认号：如下详谈超时重插，去重，数据的顺序到达</li><li>4位TCP报头长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li>6位标志位<ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li>16位窗口大小：：如下详谈流量控制</li><li>16位校验和: 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li>16位紧急指针: 标识哪部分数据是<strong>紧急数据</strong>;</li><li>40字节头部选项: 暂时忽略; </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经建立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>‘网络-传输层UDP协议协议‘</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82UDP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82UDP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><p>UDP协议端格式:</p><p><img src="/2019/01/20/网络-传输层UDP协议/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h2 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h2><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h2 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h2><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h2 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h2><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h2 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h2><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li>DNS: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> UDP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础(2)</title>
      <link href="/2019/01/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-2/"/>
      <url>/2019/01/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络基础2"><a href="#网络基础2" class="headerlink" title="网络基础2"></a>网络基础2</h1><ul><li><p>理解应⽤用层的作用, 初识HTTP协议 </p></li><li><p>理解传输层的作用, 深入理解TCP的各项特性和机制 </p></li><li><p>理解网络层的作用, 深入理解IP协议的基本原理 </p></li><li><p>理解数据链路层的作⽤用, 了解ARP协议 </p></li><li><p>对整个TCP/IP协议有系统的理解 </p></li><li><p>对TCP/IP协议体系下的其他重要协议和技术有一定的了解 </p></li><li><p>学会使⽤用一些分析网络问题的工具和方法</p><p>注意!! 注意!! 注意!! </p></li><li><p>网络编程的理论基础. </p></li><li><p>是一个服务器开发程序员的重要基本功.</p></li></ul><p>  自顶向下讲解：</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>我们写一个解决我们实际问题, 满足我们日常需求的网络程序, 都是在应用层。</p><h2 id="再谈“协议”"><a href="#再谈“协议”" class="headerlink" title="再谈“协议”"></a>再谈“协议”</h2><p>协议是一种 “约定”. socket api的接口, 在读写数据时, 都是按 “字符串” 的方式来发送接收的。我们约定客户端先发送，服务器先接收。是一种客户端与服务器之间的约定。</p><h2 id="网络版计算器"><a href="#网络版计算器" class="headerlink" title="网络版计算器"></a>网络版计算器</h2><p>我们需要实现⼀个服务器版的加法器. 我们需要客户端把要计算的两个加数发过去, 然后由服务器进行计算, 最后再把结果返回给客户端. </p><p>约定方案一：<strong>约定指定格式 </strong> </p><ul><li>客户端发送一个形如”1+1”的字符串;</li><li>这个字符串中有两个操作数, 都是整形; </li><li>两个数字之间会有一个字符是运算符, 运算符只能是 + ; </li><li>数字和运算符之间没有空格;</li></ul><p>约定方案二：<strong>TCP:面向字节流</strong>  :raising_hand_man:</p><ul><li>定义结构体来表⽰示我们需要交互的信息; </li><li>发送数据时将这个结构体按照一个规则转换成字符串, 接收到数据的时候再按照相同的规则把字符串转化回结构体; </li><li>这个过程叫做 “序列化” 和 “反序列化”</li></ul><p>序列化反序列化：JOSN /XML  </p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP（超文本传输协议）</p><p>认识URL–网址</p><p><img src="/2019/01/18/网络基础-2/URL-网址.png" alt="URL-网址"></p><h2 id="urlencode和urldecode"><a href="#urlencode和urldecode" class="headerlink" title="urlencode和urldecode"></a>urlencode和urldecode</h2><p>象/？：等这样的字符在URL中是特殊意义理解，因此该字符不能随意出现。假如要出现必须对带有这些特殊字符进行转义。</p><p>转义规则如下：</p><p>讲需要转码的字符串为16进制，然后从右象左，取4位（不足4位直接处理），每2位做一位，前面加上%，编码最后变成 <code>%XY</code>格式</p><p>例如：</p><p><img src="/2019/01/18/网络基础-2/1547866578248.png" alt="1547866578248"></p><p>？后面的参数将我搜索的内容”<code>C++</code>“中的”<code>+</code>“转变为了”<code>%2B</code>“</p><p>urldecode就是 urlencode的逆过程；可以进行反转义    </p><p><a href="http://tool.chinaz.com/Tools/urlencode.aspx" target="_blank" rel="noopener">URL解码工具</a></p><a id="more"></a><h2 id="HTTP协议格式"><a href="#HTTP协议格式" class="headerlink" title="HTTP协议格式"></a>HTTP协议格式</h2><p>HTTP请求</p><p><img src="/2019/01/18/网络基础-2/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><blockquote><ul><li>首行：[方法]+[URL]+[版本]</li><li>Header:请求的属性，冒号分割的键值对；每组属性之间使用\n分割，遇到空行表示Header部分结束</li><li>Body:空行后面的内容都是Body，Body允许为空字符串，如果Body存在，则则在Header中会有一个 <code>Content-Length</code>属性来标识<strong>Body的长度</strong>;  非GET方法正文部分是可以忽略的。</li></ul></blockquote><p>HTTP是基于<strong>请求响应式</strong>：</p><ul><li>短连接：客户端一请求，服务器一响应，服务器随即断开连接。</li><li>长连接：HTTP1.1优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接</li></ul><p>打开一个网页的过程（简要过程）</p><p>一张网页上有多个元素组成，一次次http请求只能上传一个元素的化（短连接），要看到一个·完整的网页。我们可能要经历多次请求，网页，显示过程-[文字，图片，样式，渲染…….]，效率太低。HTTP1.1以后对其进行了优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接。</p><p>HTTP协议底层是基于TCP协议的：HTTP协议不用关心丢包乱序问题。（应用层）</p><p>实践</p><p>Linux下使用telent工具：远程登陆某一台主机上的一个服务。</p><p>请求：</p><p><img src="/2019/01/18/网络基础-2/HTTP请求实践.png" alt="请求"></p><p>响应：</p><p><img src="/2019/01/18/网络基础-2/HTTP响应实践.png" alt="HTTP响应实践"></p><h2 id="HTTP常见方法"><a href="#HTTP常见方法" class="headerlink" title="HTTP常见方法"></a>HTTP常见方法</h2><table><thead><tr><th>方法</th><th>说明</th><th>支持HTTP协议版本</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>1.0 、1.1</td></tr><tr><td>POST</td><td>传输实体主体</td><td>1.0 、1.1</td></tr><tr><td>PUT</td><td>传输文件</td><td>1.0 、1.1</td></tr><tr><td>HEAD</td><td>获得报文首部</td><td>1.0 、1.1</td></tr><tr><td>DELETE</td><td>删除文件</td><td>1.0 、1.1</td></tr><tr><td>OPTIONS</td><td>询问支持的方法</td><td>1.1</td></tr><tr><td>TRACE</td><td>追踪路径</td><td>1.1</td></tr><tr><td>CONNECT</td><td>要求用隧道协议连接代理</td><td>1.1</td></tr><tr><td>LINK</td><td>建立和资源之间的联系</td><td>1.0</td></tr><tr><td>UNLINK</td><td>断开连接关系</td><td>1.0</td></tr></tbody></table><p>注：<strong>最常用的方法就是GET和POST方法。</strong> </p><p>某些版本没有某些方法是因为该版本处于安全考虑，不支持一些不安全方法。</p><h2 id="HTTP的状态码"><a href="#HTTP的状态码" class="headerlink" title="HTTP的状态码"></a>HTTP的状态码</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>informational(信息状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success(成功状态吗)</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirectio(重定向状态码)</td><td>需要进行附加操作已完成请求</td></tr><tr><td>4XX</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>最常⻅见的状态码, ⽐比如 200(OK), 404(Not Found), 403(Forbidden), 302(Redirect, 重定向), 504(Bad Gateway)</p><h4 id="重定向详解："><a href="#重定向详解：" class="headerlink" title="重定向详解："></a>重定向详解：</h4><p>3XX—Redirectio(重定向状态码)—重定向：</p><p>包头当中会响应一个叫location的字段，一旦浏览器收到这个报文，浏览器会二次发起一次请求。（页面跳转）</p><p><strong>重定向分为：</strong></p><ul><li>临时性重定向​ ​ 饭店临时搬家，贴一张告示临时迁至XXX，过一段时间就回来。先去东门后去西门，过一段时间回来东门:man_cook:  （每次吃饭要先去东门（源网站处，没搬回来），然后再去西门（临时性重定向处））</li><li>永久性重定向  饭店永久搬家，直接从东门搬至西门 :running_man:  ，以后直接去西门（永久性重定向）。</li></ul><p><strong>老板贴的告示：就如同服务器响应的报头中的location字段，（永久性，临时性由状态码体现3XX）</strong></p><h2 id="HTTP常见Header"><a href="#HTTP常见Header" class="headerlink" title="HTTP常见Header"></a>HTTP常见Header</h2><blockquote><ul><li>Content-Type: 正文数据类型(text/html等) HTTP服务器与客户端通信类型。</li><li>Content-Length: Body的长度 </li><li>Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上; </li><li>User-Agent: 声明用户的操作系统和浏览器版本信息; </li><li><strong>referer</strong>: 当前页⾯面是<strong>从哪个页面跳转过来的</strong>;</li><li><strong>location</strong>: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问; </li><li><strong>Cookie:</strong>  用于在客户端存储少量信息. 通常用于实现会话(session)的功能；</li></ul></blockquote><h2 id="实践简单HTTP服务器（Web服务器）"><a href="#实践简单HTTP服务器（Web服务器）" class="headerlink" title="实践简单HTTP服务器（Web服务器）"></a>实践简单HTTP服务器（Web服务器）</h2><p>实现一个最简单的HTTP服务器, 只在网页上输出 “hello world”; 只要我们按照HTTP协议的要求构造数据, 就很容易能做到；</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>传输层往下的网络层，链路层。都是在内核中的，操作系统实现的</p><p>负责数据能够从发送端传输接收端</p><h2 id="再谈端口号"><a href="#再谈端口号" class="headerlink" title="再谈端口号"></a>再谈端口号</h2><p>端口号（Port）标识了一个主机进行通信的不同应用程序；</p><p>在TCP/IP协议中，用<strong>”源IP“，”源端口号“，”目的IP“，”目的端口号“，”协议号“这样一个五组元素</strong>来通信标识（可以通过netstat - n查看）；</p><p>端口号是16位的整数</p><p>端口号的范围划分 </p><blockquote><ul><li>0-1023:知名端口号，HTTP,FTP,SSH等这些广为使用的应用层协议，他们的端口号都是固定的。</li><li>1024-65535：操作系统动态分配的端口号，客户端程序的端口号，就是由操作系统从这个范围分配的。</li></ul></blockquote><p>知名端口号（Well-know Port Number）</p><p>有些服务器是非常常用，为了使用方便，人们约定一些常用的服务器，都是以下这些固定的端口号：</p><blockquote><ul><li>ssh服务器，使用22端口号</li><li>ftp服务器，使用21端口号</li><li>telnet服务器，使用23端口号</li><li>http服务器，使用80端口号</li><li>https服务器，使用443端口号</li></ul></blockquote><p>查看知名端口号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat/etc/services</span><br></pre></td></tr></table></figure><p>一个进程可以绑定（bind）多个端口号,一个端口号不能被多个进程绑定</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>查看网络状态的重要工具</p><p>语法：netstat[选项]</p><p>功能：查看网络状态</p><p>常用选项：</p><blockquote><ul><li>n 拒绝显⽰示别名，能显⽰示数字的全部转化成数字</li><li>l 仅列出有在 Listen (监听) 的服務状态 </li><li>p 显⽰示建⽴立相关链接的程序名 </li><li>t (tcp)仅显⽰示tcp相关选项 </li><li>u (udp)仅显⽰示udp相关选项 </li><li>a (all)显⽰示所有选项，默认不显⽰示LISTEN相关</li></ul></blockquote><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>查看服务器的进程id</p><p>语法：pidof[进程名]</p><p>功能：通过进程名，查看进程id</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>UDP协议端格式</p><p><img src="/2019/01/18/网络基础-2/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h4 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h4><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h3 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h3><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h3 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h3><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li><strong>DNS</strong>: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/18/网络基础-2/TCP协议格式.png" alt="TCP协议格式"></p><ul><li><strong>源/目的端口号</strong>：表示数据从那个进程来，到那个进程去</li><li><strong>32位序号/32位确认号</strong>：如下详谈超时重查，去重，数据的顺序到达</li><li><strong>4位TCP报头长度</strong>：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li><strong>6位标志位</strong><ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li><strong>16位窗口大小</strong>：：如下详谈流量控制（接收者的接收缓冲区）</li><li><strong>16位校验和:</strong> 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li><strong>16位紧急指针</strong>: 标识哪部分数据是<strong>紧急数据</strong>;</li><li><strong>40字节头部选项</strong>: 暂时忽略; </li></ul><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p><h3 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h3><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/18/网络基础-2/TCP连接流程图.png" alt="TCP连接流程图"></p><h3 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h3><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h3 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h3><p><strong>在什么状态干什么事</strong></p><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h4 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h4><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很大数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><h3 id="确认应答机制（ACK）机制详解"><a href="#确认应答机制（ACK）机制详解" class="headerlink" title="确认应答机制（ACK）机制详解"></a>确认应答机制（ACK）机制详解</h3><p><img src="/2019/01/18/网络基础-2/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/18/网络基础-2/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/18/网络基础-2/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h4 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h4><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太断，就可能频繁发送重复的包。</p><p><strong>TCP为了保证无论在任何环境下都能比较高性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li>*如果仍然得不到应答, 等待 4**500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/18/网络基础-2/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h4 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h4><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和提高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，<strong>超时重传虽然慢了点</strong>，但是可以确<strong>保有效性，可靠性</strong>。</p><h3 id="流量控制（Flow-Control）"><a href="#流量控制（Flow-Control）" class="headerlink" title="流量控制（Flow Control）"></a>流量控制（Flow Control）</h3><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是发送端需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，探探接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1倍; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/18/网络基础-2/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增长的那么快, 因此不能使拥塞窗口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, 而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h2 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h2><h4 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h4><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><h4 id="提高性能"><a href="#提高性能" class="headerlink" title="提高性能"></a>提高性能</h4><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h4 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h4><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h3 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h3><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p><h3 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h3><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><h3 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h3><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区里等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><h3 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h3><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h3 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h3><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/18/网络基础-2/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/18/网络基础-2/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><p><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</p></li><li><p><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</p></li><li><p>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</p></li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做DHCP，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li><strong>DHCP</strong>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul><p>、</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]  </p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h3 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h3><p><img src="/2019/01/18/网络基础-2/以太网网络帧格式.png" alt="以太网网络帧格式"></p><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比MAC地址和ip地址"><a href="#对比MAC地址和ip地址" class="headerlink" title="对比MAC地址和ip地址"></a>对比MAC地址和ip地址</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP </p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li><p>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</p></li><li><p>TCP在建立连接的过程中, 通信双方会进行MSS协商. </p></li><li><p>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </p></li><li><p><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></p><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p></li><li><p>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</p></li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/18/网络基础-2/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/ARP缓存表.png" alt="ARP缓存表"></p><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/18/网络基础-2/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p><h1 id="其他重要协议或技术"><a href="#其他重要协议或技术" class="headerlink" title="其他重要协议或技术"></a>其他重要协议或技术</h1><h2 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h2><p>DNS是一整套从域名映射到IP的系统</p><h3 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h3><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h3 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h3><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后会发生什么"><a href="#浏览器中输入URL之后会发生什么" class="headerlink" title="浏览器中输入URL之后会发生什么"></a>浏览器中输入URL之后会发生什么</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li><p>DNS域名解析</p></li><li><p>所以就要先建立连接（三次握手）</p></li><li><p>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</p></li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h1 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h1><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h3 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h3><p>欠一张转换图</p><h3 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h3><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h3 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h3><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在设备, 所有的TCP连接也都会断</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议通讯流程</title>
      <link href="/2019/01/18/TCP%E5%8D%8F%E8%AE%AE%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/01/18/TCP%E5%8D%8F%E8%AE%AE%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议通讯流程"><a href="#TCP协议通讯流程" class="headerlink" title="TCP协议通讯流程"></a>TCP协议通讯流程</h2><p><strong>TCP要建立链接，就需要三次握手</strong> </p><p><strong>TCP保证可靠性：确认应答机制。</strong> </p><p><strong>TCP断开链接，需要4次握手</strong> </p><p>维护链接是要有成本，TCP比UDP消耗更大，因为保证可靠性</p><h3 id="问题：三次握手为什么不是2次呢，不是4次呢？"><a href="#问题：三次握手为什么不是2次呢，不是4次呢？" class="headerlink" title="问题：三次握手为什么不是2次呢，不是4次呢？"></a>问题：三次握手为什么不是2次呢，不是4次呢？</h3><p>客户端发起链接<strong>请求（SYN）</strong>，服务器对其<strong>响应</strong>（<strong>SYN+ACK</strong>），客户端再紧接着<strong>确认</strong>(<strong>ACK)</strong>。</p><p>客户端发起链接<strong>请求</strong>，服务器对其<strong>响应</strong>，在网络中报文可能丢失，</p><h4 id="为什么不是2次"><a href="#为什么不是2次" class="headerlink" title="为什么不是2次"></a>为什么不是2次</h4><p>客户端发送的报文丢失，链接失败</p><p>但是客户端发送（<strong>请求</strong>）给服务器的报文没丢失，且服务器发送的报文（<strong>响应</strong>）发出后，服务器认为已经建立链接，但是客户端此时并能没有接收报文（报文在网络中传输），客户端认为并没有建立起链接。</p><p>服务器认为链接建立好了，服务器就要求维护这个链接，<strong>服务器需要花成本去维护</strong>。，但是这个链接并不是双方认可的链接。</p><p>如果服务器发送的<strong>响应报文</strong>，丢失了，客户端认为并没有链接，就会继续发送<strong>一个新的请求报文</strong>给服务器。此时服务器接收到<strong>请求报文</strong>，发送自己的<strong>响应报文</strong> 给客户端客户,服务器又认为链接已经建立，就又会<strong>花成本维护</strong>一个这个链接。</p><p><strong>所以长此以往，服务器上就会有众多的闲时链接，导致服务器资源不够，服务器瘫痪。</strong></p><p><strong>两次握手有着致命的缺陷。</strong></p><p>2次握手情况下，假如人利用这种方式攻击服务器，服务器就会瘫痪，但是3次握手情况下服务器不会产生故障，攻击者也会得逞只会自己主机上会产生众多闲时链接自作自受。</p><p><strong>三次握手前两次发送报文丢失了，服务器客户端不会认为链接已经建立。不会发生上述情况。</strong></p><p><strong>分析最后一次确认链接报文发送过程中丢失了</strong>，客户端认为链接成功，服务器认为报文丢失了链接失败了。</p><p>此时会发生以上的相反情况，客户端上就会有众多的闲时链接。</p><p>但是服务器永远是多个客户端链接的，一对多的。得保证服务器的安全，所以是三次。</p><h4 id="为什么不是4次-6-8"><a href="#为什么不是4次-6-8" class="headerlink" title="为什么不是4次 /6/8"></a><strong>为什么不是4次</strong> <strong>/6/8</strong></h4><p>这个就像是踢球一样，在谁的脚下发起最后的射门，谁就有责任对这个求负责。</p><p>最后一次链接谁发决定谁可能会产生闲时链接。</p><h4 id="为什么不是5次7次"><a href="#为什么不是5次7次" class="headerlink" title="为什么不是5次7次"></a>为什么不是5次7次</h4><p>没有必要这样，3次握手已经可以避免上述服务器瘫痪的操作，5次7次就很多余而且还会导致链接成功几率降低。</p><a id="more"></a><h2 id="如何理解："><a href="#如何理解：" class="headerlink" title="如何理解："></a>如何理解：</h2><p><strong>谈恋爱例子</strong></p><p>下面是基于TCP协议的客户端/服务器的一般流程：</p><p><strong>男方客户端</strong>  <strong>女方服务器</strong></p><p><strong>链接：</strong>  <strong>三次挥手</strong> </p><p>男方说咱们在一起吧（SYN）</p><p>女生说好的,什么时候(SYN+ACK)</p><p>男生说就现在（ACK）<strong>女生接受到后，此时才确认关系</strong> </p><p><strong>维护两个人的恋爱关系需要彼此双发都维护起来。彼此双方丢需要花费成本。</strong> </p><p><strong>断开链接：四次握手</strong>  </p><p>断开链接的过程是双发的过程。</p><p>男方一直打游戏不上进女生忍不下去了，要分手。</p><p>谁先提出分手都可以</p><p>女方该说的我都说了,我要和你分手（断开链接）（FIN）</p><p>男生说好的。（ACK）</p><p>男方说能做的我都做了，我也要和你分手（断开链接）（FIN）</p><p>女方说好的。（ACK）</p><p>三次握手（有了这个关系，才对我们保证可靠性提供前提条件）——&gt;TCP（可靠传输，面向链接）。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络套接字</title>
      <link href="/2019/01/18/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2019/01/18/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络编程套接字"><a href="#网络编程套接字" class="headerlink" title="网络编程套接字"></a>网络编程套接字</h1><h2 id="学习要点："><a href="#学习要点：" class="headerlink" title="学习要点："></a>学习要点：</h2><ul><li>认识IP地址，端口号，网络字节序等网络编程中的基本概念；</li><li>学习socket api的基本用法；</li><li>能够实现一个简单的udp客户端/服务器；</li><li>能够实现一个简单的tcp客户端/服务器（单连接版本，多进程版本，多线程版本）；</li><li>理解tcp服务器建立连接，发送数据，断开连接的流程；</li></ul><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP协议有两个版本，IPv4和IPv6。我们整个的课程，凡是提到IP协议，没有特殊说明的，默认都是IPv4</p><ul><li>IP地址是IP协议中，用来标识网络中不同主机地址；</li><li>对于IPv4来说，IP地址是一个4字节，32位整数；</li><li>我们通常也常用也使用“点分十进制”的字符串表示IP地址，例如 198.168.0.1;用点分割的每一个数字表示一个字节，范围是0-255；</li></ul><h3 id="理解源IP地址和目的的IP地址"><a href="#理解源IP地址和目的的IP地址" class="headerlink" title="理解源IP地址和目的的IP地址"></a>理解<strong>源IP地址</strong>和目的的IP地址</h3><p>IP数据包头部中，有两个IP地址，分别叫做源IP地址，和目的IP地址。</p><p>网络通信信息，不止只用IP地址标识，不能标识主机中的那个应用发送接收的消息。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口号（port）是传输层协议内容</p><ul><li>端口号是一个2字节16位的整数</li><li>端口号是用来标识一个进程，告诉操作系统，当前的这个数据要交给那一个进程来处理</li><li>IP地址+端口号能够标识网络上的某一台主机的某个进程</li><li>一个端口号能被一个进程占用</li></ul><p><strong>IP地址+端口号称之为socket</strong>  </p><p>socket是进程通信（跨网络）</p><p><strong>一个进程可以绑定多个端口号；单一个端口号不能被多个进程绑定</strong></p><h3 id="理解源端口号和目的端口号"><a href="#理解源端口号和目的端口号" class="headerlink" title="理解源端口号和目的端口号"></a>理解源端口号和目的端口号</h3><p>传输层协议（TCP和 UDP ）的数据段中有两个端口号，分别叫做源端口号和目的端口号，就是在描述“数据是谁发的，要发个给是谁”。</p><a id="more"></a><h2 id="认识TCP协议"><a href="#认识TCP协议" class="headerlink" title="认识TCP协议"></a>认识TCP协议</h2><p>我们先对TCP（Transmission Control Protocol传输控制协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>有连接</li><li>可靠传输</li><li>面向字节流</li></ul></blockquote><p><strong>定义数据再传输过程中的一些标准和细节问题</strong> </p><h2 id="认识UDP协议"><a href="#认识UDP协议" class="headerlink" title="认识UDP协议"></a>认识UDP协议</h2><p>此处了解一下UDP（User Datagram Protocol 用户数据报协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>无连接</li><li>不可靠传输</li><li>面向数据报</li></ul></blockquote><p><strong>两种协议区别：</strong></p><p>领导交给任务给下层员工例子。</p><ul><li><p>UDP一个交给别人做（无保证）-速度快</p></li><li><p>TCP一个自己认真做（有保证）-速度慢。</p></li></ul><p>自来水公司例子TCP，不关心数据的大小可调控数据传输大小，按字节流进行。——-面向字节流</p><p>送快递例子UDP，按完整的报文进行发送。——-面向数据报</p><h2 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h2><p>内存中的多字节数据相对于内存地址有大端和小端之分, 磁盘⽂文件中的多字节数据相对于⽂文件 中的偏移地址也有大端小端之分, <strong>网络数据流同样有大端小端之分</strong>. 那么<strong>如何定义网络数据流的地址</strong>呢? </p><blockquote><ul><li>发送主机通常将<strong>发送缓冲区中</strong>的数据按内存地址<strong>从低到⾼高的顺序</strong>发出; </li><li>接收主机把从网络上接到的字节依次保存在<strong>接收缓冲区</strong>中,也<strong>是按内存地址从低到高</strong>的顺序保存; </li><li>因此,网络数据流的地址应这样规定:<strong>先发出的数据是低地址,后发出的数据是高地址.</strong> </li><li>TCP/IP协议规定,网络数据流应采⽤用<strong>大端字节</strong>序,即<strong>低地址高字节</strong>.</li><li>不管这台主机是大端机还是小端机, 都<strong>会按照这个TCP/IP规定的网络字节序来发送/接收数据;</strong> </li><li>如果当前发送主机是<strong>小端, 就需要先将数据转成大端</strong>; 否则就忽略, 直接发送即可;</li></ul></blockquote><p>为了网路程序具有可以移植性，使同样的C代码在大端小端计算机上编译后都能正常运行，可以调用以下库函数<strong>做网络字节序和主机字节序的转换</strong></p><p><img src="/2019/01/18/网络套接字/C语言大端小段转换.png" alt="1547781909980"></p><ul><li>这些函数名很好记,h表⽰示host,n表⽰示network,l表⽰示32位⻓长整数,s表⽰示16位短整数。 </li><li>例如htonl表⽰示将32位的长整数从主机字节序转换为网络字节序,例如将IP地址转换后准备发送。</li><li>如果主机是小端字节序,这些函数将参数做相应的大小端转换然后返回; </li><li>如果主机是大端字节序,这些函数不做转换,将参数原封不动地返回。 </li></ul><h1 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h1><h2 id="Socket-API简介"><a href="#Socket-API简介" class="headerlink" title="Socket  API简介"></a>Socket  API简介</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>socket API是⼀一层抽象的网络编程接⼝口,适⽤用于各种底层网络协议,如IPv4、IPv6,以及后⾯面要讲的UNIX Domain Socket. 然⽽而, 各种网络协议的地址格式并不相同。</p><p>Sockaddr *指针 接收套接字，套接字有多种，所以我们用了不同的结构来表示不同的套接字。</p></blockquote><ul><li>IPv4和IPv6的地址格式定义在netinet/in.h中,IPv4地址⽤用sockaddr_in结构体表⽰示,包括16位地址类 型, 16位端⼝口号和32位IP地址. </li><li>IPv4、IPv6地址类型分别定义为常数AF_INET、AF_INET6. 这样,只要取得某种sockaddr结构体的 ⾸首地址,不需要知道具体是哪种类型的sockaddr结构体,就可以根据地址类型字段确定结构体中的内 容. </li><li>socket API可以都⽤用struct sockaddr *类型表⽰示, 在使⽤用的时候<strong>需要强制转化成sockaddr_in; 这样的 好处是程序的通⽤用性,</strong> 可<strong>以接收IPv4, IPv6, 以及UNIX Domain Socket各种类型的sockaddr结构体 指针做为参数;</strong> </li></ul><p><img src="/2019/01/18/网络套接字/不同套接字结构体.png" alt="不同套接字结构体"></p><h3 id="Sockaddr结构"><a href="#Sockaddr结构" class="headerlink" title="Sockaddr结构"></a>Sockaddr结构</h3><h3 id="Sckaddr-in结构"><a href="#Sckaddr-in结构" class="headerlink" title="Sckaddr_in结构"></a>Sckaddr_in结构</h3><blockquote><p>虽然socket api的接⼝口是sockaddr, 但是我们真正在基于IPv4编程时, 使⽤用的数据结构是sockaddr_in; 这个结构 ⾥里主要有三部分信息: <strong>地址类型, 端口号, IP地址.</strong></p></blockquote><h3 id="in-addr结构"><a href="#in-addr结构" class="headerlink" title="in_addr结构"></a>in_addr结构</h3><blockquote><p>in_addr⽤用来表⽰示⼀一个IPv4的IP地址. 其实就是⼀一个32位的整数;</p></blockquote><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>服务器端：</p><ul><li><p>创建 socket   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息 ,地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的IP地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机端口号序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理 // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接可以进行通信了</p></li><li><p>使⽤用sendto和recvfrom来进⾏行数据读写。</p></li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>先将网络序列转换为主机序列</li><li>socket的参数使⽤用SOCK_DGRAM表⽰示UDP </li><li>使用sendto和recvfrom来进⾏行数据读写</li></ul><h2 id="地址转换函数"><a href="#地址转换函数" class="headerlink" title="地址转换函数"></a>地址转换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><ul><li><p>创建 socket //返回一个文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>) <span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息，地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理  // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要进行连接(监听) ，并进行失败处理//开始监听socket (TCP, 服务器) </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(listen(sock,<span class="number">10</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"listen"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他主机向服务器发起连接请求，请求连接客户端，客户端接收请求信息，进入事件循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="comment">//传入绑定监听的套接字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"><span class="comment">//成功的话返回一个文件描述符（用于通信的文件描述符）</span></span><br></pre></td></tr></table></figure></li><li></li></ul><h2 id="Socket-API详解"><a href="#Socket-API详解" class="headerlink" title="Socket API详解"></a>Socket API详解</h2><p>下⾯面介绍程序中⽤用到的socket API,这些函数都在sys/socket.h中</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket():"></a>Socket():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>socket()打开一个网络通讯端⼝口,如果成功的话,就像open()一样返回⼀一个⽂文件描述符; </li><li>应⽤用程序可以像读写文件一样⽤用read/write在网络上收发数据;利用socket的返回值；</li><li>如果socket()调⽤用出错则返回-1；</li><li>对于IPv4,domain参数指定位AF_INET;</li><li>对于TCP协议，type参数指定为SOCK_STREAM, 表⽰示⾯面向流的传输协议 ;对于UDP协议,type参数指定为SOCK_DGRAM 表⽰示⾯面向数据报的传输协议。</li><li>protocol参数不了解</li></ul></blockquote><h3 id="bind"><a href="#bind" class="headerlink" title="bind():"></a>bind():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>服务器程序所监听的网络地址和端口号通常是固定不变的,客户端程序得知服务器程序的地址和端 口号后就可以向服务器发起连接; 服务器需要调⽤用bind绑定一个固定的网络地址和端口号; </li><li>bind()成功返回0,失败返回-1。 </li><li>bind()的作⽤用是将参数sockfd和addr绑定在⼀一起, 使sockfd这个⽤用于网络通讯的文件描述符监听 addrs所描述的地址和端⼝口号; </li><li>前⾯面讲过,struct sockaddr *是⼀一个通⽤用指针类型,addr参数实际上可以接受多种协议的sockaddr 结构体,⽽而它们的⻓长度各不相同,所以需要第三个参数aaddresslen指定结构体的长度; 。不同套接字有不同的套接字结构体.</li></ul></blockquote><p>但是传入不同的套接字结构体后，我们要结构体中的结构IP体协议类型，IP地址和端口号由主机序列转变为网络序列（默认是大端）。</p><p>方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h4 id="客户端bind"><a href="#客户端bind" class="headerlink" title="客户端bind()"></a>客户端bind()</h4><p>由于客户端不需要固定的端⼝口号,因此不必调⽤用bind(),客户端的端⼝口号由内核⾃自动分配. </p><p>注意: </p><blockquote><ul><li>客户端不是不允许调⽤用bind(), 只是没有必要调⽤用bind()固定⼀一个端⼝口号. 否则如果在同⼀一台机器上 启动多个客户端, 就会出现端⼝口号被占⽤用导致不能正确建⽴立连接; </li><li>服务器也不是必须调⽤用bind(), 但如果服务器不调⽤用bind(), 内核会⾃自动给服务器分配监听端口, 每次 启动服务器时端⼝口号都不⼀一样, 客户端要连接服务器就会遇到⿇麻烦; </li></ul></blockquote><h3 id="listen"><a href="#listen" class="headerlink" title="listen():"></a>listen():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>listen()声明sockfd处于监听状态, 并且最多允许有backlog个客户端处于连接等待状态, 如果接收到 更多的连接请求就忽略, 这⾥里设置不会太(一般是5), 具体细节同学们课后深⼊入研究; </li><li>listen()成功返回0,失败返回-1; </li></ul></blockquote><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>int listen(int sockfd, int backlog);中backlog：为什么一般会设为5。</p><p>保证服务器链接一直处于满载过程，利用率高。所以服务器要维护一个链接队列，连接队列维护也需要成本，所以链接队列也不能太长。</p><h3 id="accept"><a href="#accept" class="headerlink" title="accept():"></a>accept():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr* addr,  <span class="keyword">socklen_t</span>* addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>三次握手完成后,服务器调用accept（）接收连接；</li><li>如果服务器调用accept（）时还没有客户端的连接请求,就阻塞等待直到有客户端连接上来; </li><li>addr是一个传入参数,accept()返回时传出客户端的地址和端⼝口号;</li><li>如果给addr参数传入传出参数（value-result argument），传入调用者提供的，缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度(有可能没有占满调⽤用者提供的缓冲区); </li></ul></blockquote><p>理解accept的返回值：</p><p><strong>Linux中一切皆文件</strong> </p><blockquote><p><strong>返回值为一个文件描述符，文件描述符对应的是进程中打开文件。其中进程（结构体）中的打开的文件，与文件描述符（结构体）之间用一个数组指针对应维护起来，所以accept（）返回的int类型是维护这两者关系的一个数组指针的下标。就可以找到这个进程对应打开的文件。</strong> </p><p>这个数组在Linuxz内核中对应的是一个叫fd_array的数组。</p></blockquote><p>例子衣服店门口的占的拉客的导购员。</p><blockquote><p><strong>socket返回的文件描述符：用于socket接收新的连接的。</strong></p><p><strong>accept:返回的文件描述符，用于输入输出流。</strong></p><p><strong>不断的socket链接交给accept返回不同的用于输入输出流的文件描述符。</strong> </p></blockquote><p>利用read write来进行数据的读写操作。</p><p>read的返回值如果为0，表示对端断开了链接。</p><h3 id="connect-客户端"><a href="#connect-客户端" class="headerlink" title="connect():客户端"></a>connect():客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>客户端需要调⽤用connect()连接服务器; </li><li>connect和bind的参数形式一致, 区别在于bind的参数是自己的地址, 而connect的参数是对⽅方的地址; </li><li>connect()成功返回0,出错返回-1;</li></ul></blockquote><h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><ul><li><p>netstat -nlup 查看UDP链接</p></li><li><p>netstat -nltp 查看TCP链接</p></li></ul><p>实验测得的现象</p><ul><li>打开文件的生命周期是随进程的。文件就会被关闭，链接就会关闭</li></ul><h2 id="多进程版"><a href="#多进程版" class="headerlink" title="多进程版"></a>多进程版</h2><h4 id="多进程版解决思路："><a href="#多进程版解决思路：" class="headerlink" title="多进程版解决思路："></a>多进程版解决思路：</h4><p>在服务器端的事件循环里添加子进程，子进程区处理IO操作，父进程继续获得新连接。</p><p>在获取子进程时，会继承父进程的监听文件描述符，子进程只需要进行处理IO只需要IO处理的文件描述符。所有子进程关闭监听文件描述符，子进程完成IO操作就退出exit(0)即可。</p><p>父进程不需要IO操作只需要进程监听操作，父进程关闭IO文件描述符即可。</p><h3 id="会引发僵尸进程"><a href="#会引发僵尸进程" class="headerlink" title="会引发僵尸进程"></a>会引发僵尸进程</h3><p>但是子进程退出后，父进程还在不断进行监听操作，子进程此时退出后，资源还没有被父进程回收，子进程就会进入僵尸状态，资源就会被一直浪费。</p><h4 id="解决：（孤儿进程处理法）"><a href="#解决：（孤儿进程处理法）" class="headerlink" title="解决：（孤儿进程处理法）"></a>解决：（孤儿进程处理法）</h4><ul><li>wait():不行，阻塞式会让父进程进入阻塞状态，还得等到子进程退回出后父进程才能再次监听。:</li></ul><ul><li><p>在子进程中继续调用frok（）并让子进程退出，让孙子进程去执行IO操作。</p></li><li><p>父进程waitpid(id,NULL,0);等待的是子进程。</p></li><li><p>但是孙子进程会成为孤儿进程，被1号进程所领养。孙子进程进行IO完毕后，就会被1进程回收。（将回收操作交给操作系统）。</p></li></ul><h2 id="多线程版"><a href="#多线程版" class="headerlink" title="多线程版"></a>多线程版</h2><p>多进程系统消耗太大，所系我们用轻量级进程-线程</p><p>创建线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_create(&amp;tid,<span class="literal">NULL</span>,service,(<span class="keyword">void</span>*)fa); <span class="comment">//传入IO的文件描述符</span></span><br></pre></td></tr></table></figure><p>将线程进行分离：主线程也是要等待创建出来的其他线程，阻塞式，所以不行</p><p>那么我们就进行线程分离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(tid);</span><br></pre></td></tr></table></figure><p>在分离的线程里面进行，IO完成关闭文件描述符，最后线程进行退出。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础(1)</title>
      <link href="/2019/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80(1)/"/>
      <url>/2019/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80(1)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络基础（1）"><a href="#网络基础（1）" class="headerlink" title="网络基础（1）"></a>网络基础（1）</h1><p><strong>重点：</strong></p><ul><li>网络发展背景，对局域网/广域网的概念有基本认识</li><li>了解网络协议的意义，重点理解TCP/IP五层结构模型</li><li>网络传输的基本流程，理解封装和分用</li></ul><h2 id="计算机网络背景"><a href="#计算机网络背景" class="headerlink" title="计算机网络背景"></a>计算机网络背景</h2><ul><li>在同一个局域网内两台主机是可以直接通信的。</li><li>任何一个在局域网上的主机，在不欠运营费的情况下是可以访问公网下的任意一台主机的。</li><li>不在同一个局域网的主机可以通信的原因，通过公网这座桥梁读写操作。</li></ul><p><strong>网络发展</strong></p><p><strong>独立模式</strong>：计算机之间相互独立；分别计算数据，把数据加工处理完后又必须拷贝到另一台机器。</p><p><strong>机器传输数据之间是人工过程，太过繁琐</strong></p><p><strong>网络互联:</strong> 多台计算机连接在一起, 完成数据共享，<strong>冯诺依曼体系（系统) 是网络</strong>，只是连接线不同。</p><p>但是<strong>长距离传输数据容易丢失</strong>，而且传输速度慢。解决–<strong>TCP协议：解决数据安全，丢包问题</strong>。<strong>IP解决查找问题。</strong> </p><p><strong>局域网LAN:</strong> 计算机数量更多了, 通过交换机和路由器连接在一起，<strong>交换机：</strong>最低层对数据进行数据帧交换。 </p><p><strong>广域网WAN:</strong> 将远隔千里的计算机都连在一起</p><p><strong>所谓</strong> “局域网” 和 “广域网” 只是一个相对的概念. 比如, 我们有 “天朝特色” 的广域网, 也可以看做一个比较大的局域网。</p><a id="more"></a><h2 id="认识协议"><a href="#认识协议" class="headerlink" title="认识协议"></a>认识协议</h2><p>“协议是一种<strong>约定</strong>“ -<strong>多方遵守的协议（数据层面的相关约定）</strong> </p><p>快递例子：</p><p><strong>买洗面奶：</strong> </p><p>（卖家把洗面奶包装发个快递公司，快递公司把（准确）快递发给买家，买家需要拆包装）</p><p>​                                                             <strong>封装                       分用                                  解包</strong> </p><p><strong>协议保证数据正确性：</strong> 计算机之间的传输媒介是光电信号，通过”频率“和”强弱“来表示0和1这样的信息，要像传递各种不同信息，就需要约定好双方的数据格式。</p><p><strong>方言例子：</strong> </p><blockquote><ul><li>计算机生产商有很多；</li><li>计算机操作系统，也很多；</li><li>计算机网络硬件设备，还有很多；</li><li>如何让这些不同厂商之间生产的计算机能够相互顺畅的通信? 就需要有人站出来, 约定一个共同的标准, 大家都来遵守, 这就是 <strong>网络协议;</strong> </li></ul></blockquote><h2 id="网络协议初始"><a href="#网络协议初始" class="headerlink" title="网络协议初始"></a>网络协议初始</h2><p><strong>协议分层-网络协议栈</strong> <strong>-层状结构</strong>-<strong>（网络工程中）功能上相互独立，逻辑上解耦</strong></p><p> 打电话例子</p><p>为了让和我们更好的使用协议，认识协议。网络上会使用分层。</p><p><strong>原因：</strong>通信过程中，<strong>有相同语言</strong> （一层协议比如<strong>汉语</strong>）</p><p>​       语音通过电话之间的协议（无线电协议）进行传输，传输给电话另一端的人（实现人-人通话）</p><p>​       当我们通过座机通话时，我们人语言方式还不变但是中间协议变了（座机协议）</p><p>​        分层作用达到软件工程解耦作用，一层出故障不会影响下层。你说话结巴了电话通信也断断续续的？</p><p><strong>网络协议一定时层状的</strong>，<strong>一定是同层协议之间的通信，直接通信。</strong> </p><p> <strong>分层最大的好处在于封装。</strong></p><h2 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h2><ul><li><strong>OSI</strong>(Open System Interconnection ,开放系统互连) 七层网络模型称为开放式系统互联参考模型，是一种逻辑上定义和规范</li><li><strong>把网络从逻辑上分为7层</strong>，每一层都有相关，相对应的物理设备，比如路由器，交换机；</li><li>OSI七层网络模型是一种<strong>框架性</strong>的设计方法，其主要的功能就是帮助不同类型的主机实现数据传输</li><li>它最大的优点是将<strong>服务，接口和协议</strong>这三个概念明确地<strong>区分</strong>开，概念清除，理论也比较完整，通过7个层次化地结构模型使不同系统不同网络之间实现可靠地通讯；</li><li>但是，它即复杂又不实用，所以我们来详细了解<strong>TCP/IP四层模型</strong>。</li></ul><h2 id="TCP-IP五层（或四层）模型"><a href="#TCP-IP五层（或四层）模型" class="headerlink" title="TCP/IP五层（或四层）模型"></a>TCP/IP五层（或四层）模型</h2><p>TCP/IP是一组协议的代名词，它还包括许多协议，组成了<strong>TCP/IP协议簇</strong>. TCP/IP通讯协议采⽤用了5层的层级结构，<strong>每⼀层都呼叫它的下一层所提供的网络</strong>来完成自己的需求. </p><p><img src="/2019/01/16/网络基础(1)/OSI、TCP_IP参考模型.png" alt="OSI、TCP_IP参考模型"></p><p>一般而言</p><ul><li>对于一台主机, 它的<strong>操作系统内核</strong>实现了从<strong>传输层到物理层</strong>的内容; </li><li>对于一台<strong>路由器</strong>, 它实现了从<strong>网络层到物理层</strong>; </li><li>对于一台<strong>交换机</strong>, 它实现了从<strong>数据链路层到物理层</strong>; </li><li>对于<strong>集线器</strong>, 它只实现了<strong>物理层</strong>; </li></ul><p>理解：</p><p><strong>路由器：</strong>在网络层，网络包，网络包转发。</p><p><strong>交换机：</strong>工作在局域网，转发数据帧。</p><p><strong>集线器：</strong>物理层，解决长距离传输信号变弱。，增强信号。</p><p>但是并不绝对. 很多<strong>交换机也实现了网络层的转发</strong>; 很多<strong>路由器也实现了部分传输层的内容(比如端口转发</strong>);</p><h2 id="网络传输基本流程"><a href="#网络传输基本流程" class="headerlink" title="网络传输基本流程"></a>网络传输基本流程</h2><h3 id="网络传输流程图"><a href="#网络传输流程图" class="headerlink" title="网络传输流程图"></a>网络传输流程图</h3><p>同一个网段内的两台主机进行文件传输</p><table><thead><tr><th style="text-align:left">应用层                                   TeInet、FTP和e-mail等 Http 、SSH</th></tr></thead><tbody><tr><td style="text-align:left">传输层                                    TCP和UDP     –负责网路传输</td></tr><tr><td style="text-align:left">网络层                                     IP、ICMP和IGMP</td></tr><tr><td style="text-align:left">链路层                                     设备驱动程序及接口卡  –网卡驱动、数据帧</td></tr></tbody></table><h3 id="局域网通信"><a href="#局域网通信" class="headerlink" title="局域网通信"></a>局域网通信</h3><p><strong>以太网：</strong>这种基于冲突检测的网络称之为以太网。</p><p><strong>所有用户向局域网发送数据</strong></p><ul><li>发生冲突，采用冲突避免算法进行处理</li><li>若没有发生冲突，或者冲突已经解决就会直接可以进行通信。</li><li>避免冲突算法：分时间发送数据</li></ul><p>在局域网通信中每个主机在底层都有<strong>一个唯一的标识符</strong>——网卡中的序列号：MAC地址（全球唯一的地址）</p><p><strong>混杂模式的网卡：</strong>可以抓取任意一个在局域网中的包。</p><h2 id="数据的解包分用的过程"><a href="#数据的解包分用的过程" class="headerlink" title="数据的解包分用的过程"></a>数据的解包分用的过程</h2><p><strong>任何通信的行为都是从上层驱动的。</strong></p><p><strong>例子：图在下端</strong></p><p>A客户端（应用层）发送向客户端B一个请求</p><p>（<strong>发送信息</strong>）A客户端发送的信息从应用层<strong>一层一层</strong>的（<strong>封装</strong>）发送到最底层链路层，然后再发到以太网上去，</p><p>B客户端从链路层中获取的数据向上<strong>一层一层</strong>（<strong>解包，分用</strong>）的发送到B客户端的应用层。(<strong>获取信息</strong>)</p><p><strong>CPU：</strong>对数据进行封装处理，数据在内存中发送给网卡。</p><p>​    网卡中的信息发送到，内存中，CPU进行解包处理。</p><p><strong>封装：</strong> </p><p>当前层添加<strong>报头</strong>，（<strong>应用层</strong>）上层添加<strong>有效载荷</strong>（<strong>数据</strong>）</p><p><strong>分用：</strong>除了最顶层协议，任何一个协议它的报头当中，一定包<strong>含一个字段</strong>，这个字段用来表明，<strong>要将自己的有效载荷要交个上层的哪一个协议</strong>，只要有了个字段，就准确地将我们地报文实现向上交付了。</p><p><strong>解包：</strong> </p><p>拆去报头，拿出有效载荷（<strong>数据</strong>）</p><p><strong>应用层协议：</strong> </p><p>如何使用有效载荷（<strong>数据</strong>）</p><p><strong>根据当层协议将数据进行报头和有效载荷的拆解</strong></p><p>把数据链路层的数据叫做：数据帧</p><p>网络层IP层的数据叫做：数据报</p><p>传输层TCP层数据叫做：数据段</p><p>传输层UDP层数据叫做：数据报</p><p><img src="/2019/01/16/网络基础(1)/封装解包分用.png" alt="封装解包分用"></p><p>两台计算机通过TCP\IP协议通讯的过程如下所示（以上是文字叙述）</p><h2 id="TCP-IP通讯过程（两台主机在同一个局域网当中）"><a href="#TCP-IP通讯过程（两台主机在同一个局域网当中）" class="headerlink" title="TCP/IP通讯过程（两台主机在同一个局域网当中）"></a><strong>TCP/IP通讯过程（两台主机在同一个局域网当中）</strong></h2><p><img src="/2019/01/16/网络基础(1)/两台主机在同一个局域网当中的通信.png" alt="两台主机在同一个局域网当中的通信"></p><p>跨网段的主机的文件传输. 数据从一台计算机到另一台计算机传输过程中要经过一个或多个路由器。</p><p><strong>交换机的应用</strong>: （大局域网中的应用）</p><p>交换机会有效的划分，碰撞域（冲突）</p><p>将大局域网拆分为多个小的局域网，拆分成的局域网中发送的信息，先交给交换机，交换将没有发生碰撞的信息发送到以太网上去。（碰撞的信息不发送到以太网上去，才用冲突算法进行解决。解决后再发送到局域网上去)。</p><p><strong>路由器的应用：</strong>路由器的作用连接局域网对网道网的数据进行转发。</p><p>路由器横跨两个局域网，路由器至少连接两个网卡，既有两个网卡的MAC地址（硬件地址）。</p><p><strong>ifconfig：</strong>查看当前Linux虚拟机的网络</p><p><strong>ens33: </strong> 当前网络接口</p><p><strong>inet:</strong> <strong>IP地址</strong> 占4个字节，一共<strong>32个bit位</strong>   </p><p>（硬件地址）<strong>MAC网卡地址</strong>：占6个字节，一共<strong>48个bit位</strong></p><p><strong>lo：</strong>本地环回接口</p><p>每一个硬件设备都有可能都会向服务器推送设备，IP地址不够了。</p><p>所以部署IPV6</p><p>IPV6:<strong>128bit位</strong></p><p>两种方式确定一个主机。产生一个问题：</p><p>唐僧取经例子：</p><p>IP地址从一个到另一个IP地址（提供大致方向）</p><p>其中经过不同的网卡（主机），所以我们的Mac地址一直在变（每次传输更靠近IP地址）</p><p>MAC地址一致在变，真正的进行数据传输。</p><h2 id="不同局域网之间的网络传输"><a href="#不同局域网之间的网络传输" class="headerlink" title="不同局域网之间的网络传输"></a>不同局域网之间的网络传输</h2><p><strong>路由器的应用：</strong>路由器的作用连接局域网对网道网的数据进行转发。</p><p>路由器横跨两个局域网，路由器至少连接两个网卡，<strong>既有两个网卡的MAC地址（硬件地址）</strong> </p><p>路由器有<strong>两个的接口**</strong>两张网卡<strong>，分别连接两个</strong>（<strong>两个独立的MAC地址</strong>），一个网卡连接以太网去驱动程序，右侧的这个连接里令牌环驱动程序。</p><p><img src="/2019/01/16/网络基础(1)/不同局域网内的网络通信.png" alt="不同局域网内的网络通信"></p><p>A主机自顶向下进行交付，封装到网络层时（查找自己的路由表）发现要去的目标IP不再同一个局域网。</p><p>所以发出数据的地址传自己的IP、MAC，目标地址传路由器的MAC地址。</p><p>数据帧由A主机发送到局域网上，所有局域网内的所有主机都受到了这条消息，其他主机收到消息后要做第一件事情，解包然后对对比，对比自己的IP地址与数据帧中解包出来的目的IP地址。</p><p>路由器的链路层以太网的驱动程序，对比发现这个包是发给它的，所以它把数据封装把数据向上传递给路由器的网络层，然后路由器进行一番路由，路由器将报文交付到下层，进行封装（报头中含有目标地址IP，和令牌环环的地址），最后令牌环将数据发送给主机B的令牌环驱动程序。</p><p>报文在整个过程中IP地址一致不变，IP层以上认为全球的网络称之为IP网络。（唯一IP）</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/01/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/01/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>正则表达式概念</li><li>正则表达式应用场景</li><li>正则表达式三要素</li><li>正则表达式特殊符号</li><li>扩展正则和基础正则</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><ul><li>正则表达式Regular Expression）是用于描述一组字符串特征的模式，用来匹配特定的字符串。通过特殊字符+普通字符来进行模式描述，从而达到文本匹配目的的工具</li><li>寻人启事</li><li>正则表达式目前被集成到各种文本编辑器/文本处理工具当中</li></ul></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><strong>验证</strong>：表单提交，进行用户名密码验证</li><li><strong>查找</strong>：从大量信息中快速提取指定内容，在一批url中，查找指定url</li><li><strong>替换</strong>：将指定格式的文本，进行正则匹配查找，找到后进行特定替换（vim文本替换符）</li></ul><h2 id="正则表达式的基本要求"><a href="#正则表达式的基本要求" class="headerlink" title="正则表达式的基本要求"></a>正则表达式的基本要求</h2><ul><li>字符类</li><li>数量限定符</li><li>位置限定符</li><li>特殊符号</li></ul><p>grep是一款Linux下按行进行匹配文本的工具。通常是Linux下处理文本的第一步，带有很多有用的选项。采用的是贪心算法</p><blockquote><ul><li>-E :使用扩展正则匹配</li><li>–color:将匹配的到的内容进行语法高亮</li></ul></blockquote><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>.</td><td>匹配任意一个字符</td><td>abd.可以匹配abcde、abc9等</td></tr><tr><td>[]</td><td>匹配括号中的任意一个字符</td><td>[abc]d,可以匹配ad,bd,或带有d的字符集</td></tr><tr><td>-</td><td>在[ ]括号内表示字符范围</td><td>[0-9a-fA-F]可以匹配一位16进制数字</td></tr><tr><td>^</td><td>位于[]括号内的开头，匹配除考好中的字符之外的任意一个字符</td><td>[^xy] 1匹配除了xy之外的任意一个字符 可以怕匹配a1,b1但不能匹配x1,y1</td></tr><tr><td>[[:xxx:]]</td><td>grep工具预定义的一下些命名字符类</td><td>[[:alpha:]]匹配一个字母，[[:digit:]]匹配一个数字</td></tr></tbody></table><a id="more"></a><p><img src="/2019/01/16/正则表达式/gerp练习.png" alt="gerp练习"></p><h2 id="数量限定符"><a href="#数量限定符" class="headerlink" title="数量限定符"></a>数量限定符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>？</td><td>紧跟在他前面的单元应匹配零次或一次</td><td>[0-9]?\.[0-9]匹配0.0、2.3、.5等，由于.在正则表达式中是一个特殊字符，所以需要用\转义一下，取字面值</td></tr><tr><td>+</td><td>紧跟在他前面的单元应匹配一次或多次</td><td>[a-zA-Z0-9_.-]+@[a-zA-z0-9_.-]+\.[a-zA-Z0-9_.-]+匹配email地址</td></tr><tr><td>*</td><td>紧跟在他前面的单元应匹配零次或多次</td><td>[0-9][0-9]<em>匹配至少一位数字，等价于[0-9]+.[a-zA-z_]+[a-zA-Z_0-9]\</em>匹配C语言标识符</td></tr><tr><td>{N}</td><td>紧跟在他前面的单元应匹配精确匹配N次</td><td>[1-9][0-9]{2}匹配从100到999的整数</td></tr><tr><td>{N,}</td><td>紧跟在他前面的单元应匹配至少N次</td><td>[1-9][0-9][2,]匹配三位以上（含三位)的整数</td></tr><tr><td>{,M}</td><td>紧跟在他前面的单元应匹配最多M次</td><td>[0-9]{,1}相当于[0-9]?     Linux下的grep不支持</td></tr><tr><td>{N,M}</td><td>紧跟在他前面的单元应匹配至少N次,最多M次</td><td>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1.3}\.[0-9]{1.3}匹配IP地址</td></tr></tbody></table><h2 id="位置限定符"><a href="#位置限定符" class="headerlink" title="位置限定符"></a>位置限定符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>^</td><td>匹配行首的位置</td><td>^Contennt匹配位于一行开头的Content</td></tr><tr><td>$</td><td>匹配行末的位置</td><td>;\$匹配位于一行结尾的；号，^$匹配空行</td></tr><tr><td>\&lt;</td><td>匹配以单词开头的位置（所有）</td><td>\&lt;th匹配…this,但不匹配ethernet、tenth</td></tr><tr><td>\&gt;</td><td>匹配以词结尾的位置（所有）</td><td>p\&gt;匹配leap…,但不匹配parent,sleepy</td></tr><tr><td>\b</td><td>匹配以单词开头置或以单词结尾的位置（所有）</td><td>\bat\b匹配…at…,但不匹配cat、atexit、batch</td></tr><tr><td>\B</td><td>匹配非以单词开头或以单词结尾的位置（所有）</td><td>\Bat\B匹配battery,但不匹配…attend、hat…</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>\</td><td>转义字符，普通字符转义为特殊字符，特殊字符转义为普通字符</td><td>普通字符&lt;写成\&lt;表示单词开头的位置，特殊字符.写成\.以及\写成\\就当作普通字符</td></tr><tr><td>()</td><td>将正则表达式的一部分括起来组成一个单元，可以对整个单元使用数量限定符</td><td>([0-9]{1,3}\.){3}[0-9]{1,3}匹配IP地址</td></tr><tr><td>\</td><td></td><td>连接两个子表达式，表示或的关系</td><td>n(o\</td><td>either)匹配no 或neither</td></tr></tbody></table><h2 id="扩展正则和基准正则"><a href="#扩展正则和基准正则" class="headerlink" title="扩展正则和基准正则"></a>扩展正则和基准正则</h2><p>区别：正则表达式的Extended规范和Basic规则基本相同。只是Basic规范下，有些字符<code>?+{}|（）</code>  应解释为普通字符，要表示上述特殊含义则需要加上\转义</p><p>反之，在Extended规范下，<code>？+{}|（）</code> 应被解释为普通字符，要表示上述特殊含义则需要加上<code>\</code>转义。</p><p>所以<code>grep</code> 工具带上<code>-E</code> 选项，表示使用扩正则来进行匹配，若没有，则表示使用基准正则进行匹配.</p>]]></content>
      
      
      <categories>
          
          <category> 文本匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinuxPOSIX信号量</title>
      <link href="/2019/01/16/LinuxPOSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
      <url>/2019/01/16/LinuxPOSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="POSIX信号量"><a href="#POSIX信号量" class="headerlink" title="POSIX信号量"></a>POSIX信号量</h1><p>POSIX信号量和System信号量作用相同，都是用于同步操作，达到无冲突访问共享资源的目的。但是POSIX可以用于线程同步、互斥。</p><p><strong>信号量：本质上是一把<em>计数器</em>，他用来描述临界资源当中资源数目的多少。</strong></p><h3 id="初始化信号量"><a href="#初始化信号量" class="headerlink" title="初始化信号量"></a><strong>初始化信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">pshared:<span class="number">0</span>表⽰示线程间共享，⾮非零表示进程间共享    </span><br><span class="line">value：信号量初始值</span><br></pre></td></tr></table></figure><h3 id="销毁信号量"><a href="#销毁信号量" class="headerlink" title="销毁信号量"></a><strong>销毁信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destory</span><span class="params">(<span class="keyword">sem_t</span>*sem)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="等待信号量"><a href="#等待信号量" class="headerlink" title="等待信号量"></a><strong>等待信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能：等待信号量，会将信号量的值减<span class="number">1</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="信号量理解："><a href="#信号量理解：" class="headerlink" title="信号量理解："></a><strong>信号量理解：</strong></h3><p>当一个线程申请到信号量，信号量的计数器减一，线程就访问临界资源了。</p><p>释放信号量，信号量<strong>计数器</strong>加一。</p><p><strong>(二元)信号量</strong>且信号量的计数器设置为1就相当于一个互斥锁。</p><p>每个线程都能访问到信号量资源，<strong>信号量本身就是临界资源。</strong></p><p><strong>保证PV操作的原子性：</strong></p><p><strong>P操作：</strong>信号量申请操作是原子的</p><p><strong>V操作：</strong>信号量释放操作是原子的</p><h2 id="基于环形队列的生产者消费者模型"><a href="#基于环形队列的生产者消费者模型" class="headerlink" title="基于环形队列的生产者消费者模型"></a>基于环形队列的生产者消费者模型</h2><p><img src="/2019/01/16/LinuxPOSIX信号量/基于环形队列的生产者消费者模型.png" alt="基于环形队列的生产者消费者模型"></p><a id="more"></a><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p>处理有些公共资源修改比较少，读的机会比较多。通常情况下读的过程，往往伴随着查找的操作，中间耗时很长。给这种代码段加锁，会极大的降低我们程序的效率。</p><p><strong>读写锁本质是一种自旋锁</strong>:-&gt;<strong>[长时间等人短时间等人的例子]</strong> 是比较浪费CPU的操作</p><p><strong>目标线程在临界资源的待的时间长短</strong></p><p>长时间等待：<strong>挂起等待（阻塞）</strong></p><p>短时间等待：<strong>选择自旋式等待（轮询）</strong></p><p><strong>读者写着模型分析321原则：</strong>【写黑板报，读黑板报关系】</p><p>读者与读者之间：<strong>共享关系</strong></p><p>写者与写者之间：<strong>互斥关系</strong></p><p>读者与写着之间：<strong>互斥，同步关系</strong></p><p><strong>2种角色</strong></p><p><strong>1个场所</strong></p><table><thead><tr><th>当前锁状态</th><th>读写请求</th><th>写锁请求</th></tr></thead><tbody><tr><td>无锁</td><td>可以</td><td>可以</td></tr><tr><td>读锁</td><td>可以</td><td>阻塞</td></tr><tr><td>写锁</td><td>阻塞</td><td>阻塞</td></tr></tbody></table><blockquote><p><strong>注意：写独占，读共享，写锁优先级高</strong></p></blockquote><p>读写锁接口</p><p>初始化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,const pthread_rwlockattr _t *restrict attr)；</span><br></pre></td></tr></table></figure><p>销毁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br></pre></td></tr></table></figure><p>加锁和解锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  读锁加锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  写锁加锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  解锁</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程同步</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux同步"><a href="#Linux同步" class="headerlink" title="Linux同步"></a>Linux同步</h1><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><blockquote><ul><li>当一个线程互斥地访问某个变量时，它可能发现在其他线程状态改变值之前，它什么也做不了。</li><li>例如一个线程访问队列时，发现队列为空，它只能等待，只到其它线程将一个节点添加到队列中。 这种情况就需要⽤用到条件变量。</li></ul></blockquote><p><strong>同步解决了进程饥饿问题</strong></p><h2 id="条件变量函数"><a href="#条件变量函数" class="headerlink" title="条件变量函数"></a>条件变量函数</h2><p>初始化条件变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *rest rict attr)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">cond：要初始化的条件变量    </span><br><span class="line">attr：<span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>销毁条件变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond）</span></span></span><br></pre></td></tr></table></figure><p>等待条件满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mute x)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">cond：要在这个条件变量上等待    </span><br><span class="line">mutex：互斥量，后⾯面详细解</span><br></pre></td></tr></table></figure><p>唤醒等待</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="生产消费者"><a href="#生产消费者" class="headerlink" title="生产消费者"></a>生产消费者</h1><p>分析：</p><p>生产者生产者之间的关系—互斥关系（不能共享）</p><p>生产者消费者之间的关系—互斥关系，同步关系</p><p>消费者消费者之间的关系—互斥关系（不能共享）</p><p><strong>交易场所：超市</strong></p><p>321原则： 3种关系，2个角色，1 个交易场所</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程中可重入VS线程安全</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%8F%AF%E9%87%8D%E5%85%A5VS%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%8F%AF%E9%87%8D%E5%85%A5VS%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="可重入VS线程安全"><a href="#可重入VS线程安全" class="headerlink" title="可重入VS线程安全"></a>可重入VS线程安全</h2><p>概念：</p><blockquote><ul><li>线程安全：多个线程并发同一段代码时，不会出现不同结果。常见对全局变量或静态变量进行操作，并且没有锁保护的情况下，会出现该问题。</li><li>重入：同一函数被不同的执行流程钓调用，当前一个流程还没有执行完，就有其他执行流再次进入，我们称之为重入。一个函数在重入的条件下，运行结果不会出现任何不同或者任何问题，则该函数被称为可重入函数，否则不是。</li></ul></blockquote><a id="more"></a><h2 id="常见的线程安全不安全问题"><a href="#常见的线程安全不安全问题" class="headerlink" title="常见的线程安全不安全问题"></a>常见的线程安全不安全问题</h2><blockquote><ul><li>不保护共享变量的函数</li><li>函数状态随时被调用，状态发变化的函数</li><li>返回指向静态变量指针的函数</li><li>调用线程不安全函数的函数</li></ul></blockquote><h2 id="常见的线程安全的情况"><a href="#常见的线程安全的情况" class="headerlink" title="常见的线程安全的情况"></a>常见的线程安全的情况</h2><blockquote><ul><li>每个线程对全局变量或者静态变量只有读取权限，而没有写入的权限，一般来说这些线程是安全的</li><li>类或者接口对于线程来说都是原子操作</li><li>多个线程之间的切换不会导致该接口的执行结果存在二义性</li></ul></blockquote><h2 id="常见不可重入的情况"><a href="#常见不可重入的情况" class="headerlink" title="常见不可重入的情况"></a>常见不可重入的情况</h2><blockquote><ul><li>调用了malloc/free函数，因为malloc函数使用全局链表来管理堆的</li><li>调用了标准I/O库函数，标准I/O库的很多实现都以不可重入的方式使用全局数据结构 </li><li>可重入函数体内使用了静态的数据结构</li></ul></blockquote><h2 id="常见的可重入函数的情况"><a href="#常见的可重入函数的情况" class="headerlink" title="常见的可重入函数的情况"></a>常见的可重入函数的情况</h2><blockquote><ul><li>不是使用静态变量或全局变量</li><li>不使用用malloc或new开辟出来的空间</li><li>不调用课不可重入的函数</li><li>不返回静态或者全局数据，所有数据都有函数的调用者提供</li><li>使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据</li></ul></blockquote><h2 id="可重入与线程安全联系"><a href="#可重入与线程安全联系" class="headerlink" title="可重入与线程安全联系"></a>可重入与线程安全联系</h2><blockquote><ul><li>函数是可重入的，线程就是安全的</li><li>函数是不可重入，那就不能由多个线程使用，有可能引发线程安全问题</li><li>如果一个函数由全局变量，那么这个函数即不是线程安全的也不是可重入的。</li></ul></blockquote><h2 id="可重入与线程安全的区别"><a href="#可重入与线程安全的区别" class="headerlink" title="可重入与线程安全的区别"></a>可重入与线程安全的区别</h2><blockquote><ul><li>可重入函数是线程安全函数的一种</li><li>线程安全不一定可重入，而可重入函数则一定是线程安全的。</li><li>如果将对临界资源的访问加上锁，则这个函数是线程安全的，但如果这个重入函数，若锁还未释放则会产生死锁（自己进入自己锁好的函数，本线程被挂起，本线程带着锁且被挂起，线程携带的锁永远不会被释放–<strong>死锁</strong>），因此是不可重入的。</li></ul></blockquote><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a><strong>死锁的概念</strong></h3><ul><li><blockquote><p>死锁是指在一组进程中的各个进程均占有不会释放的资源，但因互相申请被其他进程所占有不会释放的资源而处于一种永久等待状态。</p></blockquote></li></ul><h3 id="死锁的四个必要条件"><a href="#死锁的四个必要条件" class="headerlink" title="死锁的四个必要条件"></a><strong>死锁的四个必要条件</strong></h3><blockquote><ul><li>互斥条件：一个资源每次只能被一个执行流使用</li><li>请求与保持条件：一个执行流因请求资源而阻塞时，对已获得资源保持不放</li><li>不剥夺条件：一个执行已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干执行流之间形成一种头尾相接的循环等待资源的关系。</li></ul></blockquote><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><blockquote><ul><li>破坏死锁四个必要条件</li><li>加锁顺序一致  所有线程申请锁的顺序是一定</li><li>避免未释放场景</li><li>资源一次性分配</li></ul></blockquote><h2 id="避免死锁的算法"><a href="#避免死锁的算法" class="headerlink" title="避免死锁的算法"></a>避免死锁的算法</h2><blockquote><ul><li><p>死锁检测算法</p></li><li><p>银行家算法</p><p>哲学家就餐问题</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程互斥</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h1><h3 id="进程线程间的互斥相关背景概念"><a href="#进程线程间的互斥相关背景概念" class="headerlink" title="进程线程间的互斥相关背景概念"></a>进程线程间的互斥相关背景概念</h3><ul><li><strong>临界资源</strong>：多线程执行流共享的资源叫做临界资源</li><li><strong>临界区</strong>：每个线程内部，访问临界资源的代码，就叫做临界区</li><li><strong>互斥</strong>：任何时刻，互斥保证有且只有一个执行流进入临界区，访问临界资源，通常对临界资源起保护作用</li><li><strong>原子性</strong>：不被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成</li></ul><h2 id="–-操作并不是原子的操作，而是对应三条汇编指令"><a href="#–-操作并不是原子的操作，而是对应三条汇编指令" class="headerlink" title="–/++操作并不是原子的操作，而是对应三条汇编指令"></a>–/++操作并不是原子的操作，而是对应三条汇编指令</h2><ul><li>load:将共享变量从内存加载到寄存器中</li><li>update:更新寄存器里面的值，执行-1操作</li><li>store：将新值，从寄存器中写回共享变量的内存地址中</li></ul><p>要解决++/–操作不是原子的要做到以下3点</p><ol><li>代码必须有互斥行为：当代码进入到临界区执行时，不允许其他线程进入该临界区</li><li>如果多个线程同时要求执行临界区的代码时。并且临界区没有线程在执行，那么只允许一个线程进入该临界区。</li><li>如果线程不在临界区中执行，那么该线程不能阻止其他线程进入临界区。</li></ol><p><img src="/2019/01/16/Linux多线程互斥/Lock原理图.png" alt="Lock原理图"></p><a id="more"></a><h2 id="mutex-互斥量"><a href="#mutex-互斥量" class="headerlink" title="mutex(互斥量)"></a>mutex(互斥量)</h2><blockquote><ul><li>大部分情况，线程使用的数据都是局部变量，变量的地址空间在线程的栈空间内，这种情况，变量的归属单个线程，其他线程无法获取这种变量</li><li>但是有的时候，很多变量都需要线程共享，这样的变量称为共享变量，可以通过数据的共享，完成线程之间的交互</li><li>多个线程并发操作共享变量，会带来一些问题。</li></ul><p>通常情况下同步是要互斥为前提的，同步可以保证多个执行流按照特定有效的顺序去访问临界资源。</p></blockquote><p><strong>总结：</strong>互斥了解决数据的二义性问题，安全性，正确性问题。</p><p>同步互斥可以让多个线程，多个进程之间可以协同工作。</p><h2 id="1-互斥锁（mutex）"><a href="#1-互斥锁（mutex）" class="headerlink" title="1.互斥锁（mutex）"></a>1.互斥锁（mutex）</h2><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作共享变量会有问题的售票系统</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> tickets = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> * <span class="title">buyTicket</span><span class="params">(<span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> * thread = (<span class="keyword">char</span>*) arg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             usleep(<span class="number">1000</span>);</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"%s get a ticket ,num:%d\n"</span>,thread,tickets);</span><br><span class="line">            tickets--;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%s quit!\n"</span>,thread);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1,t2,t3,t4;</span><br><span class="line">    pthread_create(&amp;t1,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 1"</span>);</span><br><span class="line">    pthread_create(&amp;t3,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 3"</span>);</span><br><span class="line">    pthread_create(&amp;t4,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 4"</span>);    </span><br><span class="line">    pthread_join(t1,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t2,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t3,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t4,<span class="literal">NULL</span>);                                                                                                                             </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加锁后 互斥</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> ticket = <span class="number">100</span>; <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">route</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">char</span> *id = (<span class="keyword">char</span>*)arg;    </span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);        </span><br><span class="line">        <span class="keyword">if</span> ( ticket &gt; <span class="number">0</span> ) &#123;           </span><br><span class="line">            usleep(<span class="number">1000</span>);            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s sells ticket:%d\n"</span>, id, ticket);           </span><br><span class="line">            ticket--;            </span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);            <span class="comment">// sched_yield(); 放弃CPU       </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);            </span><br><span class="line">            <span class="keyword">break</span>;       </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">pthread_t</span> t1, t2, t3, t4;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, route, <span class="string">"thread 1"</span>);    </span><br><span class="line">    pthread_create(&amp;t2, <span class="literal">NULL</span>, route, <span class="string">"thread 2"</span>);   </span><br><span class="line">    pthread_create(&amp;t3, <span class="literal">NULL</span>, route, <span class="string">"thread 3"</span>);   </span><br><span class="line">    pthread_create(&amp;t4, <span class="literal">NULL</span>, route, <span class="string">"thread 4"</span>);</span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t2, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t3, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t4, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex锁必须先初始化，互斥锁用完后，必须删除互斥锁</p><p>锁的初始化</p><ul><li>静态初始化</li></ul><p><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER</code></p><ul><li><p>动态初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> pthread_mutexattr <span class="keyword">_t</span> *<span class="keyword">restrict</span> attr)</span></span>;    参数：        mutex：要初始化的互斥量        attr：<span class="literal">NULL</span>`</span><br></pre></td></tr></table></figure><p>销毁互斥量 </p><p>销毁互斥量需要注意： </p><ul><li><p>使⽤用PTHREAD_ MUTEX_ INITIALIZER初始化的互斥量不需要销毁 </p></li><li><p>不要销毁⼀一个已经加锁的互斥量 </p></li><li><p>已经销毁的互斥量，要确保后⾯面不会有线程再尝试加锁</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_mutex_destroy(pthread_mutex_t *mutex)；</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>互斥量加锁和解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_mutex_lock(pthread_mutex_t *mutex); int pthread_mutex_unlock(pthread_mutex_t *mutex); 返回值:成功返回0,失败返回错误号</span><br></pre></td></tr></table></figure><blockquote><p>调⽤用pthread_ lock 时，可能会遇到以下情况: 互斥量处于未锁状态，该函数会将互斥量锁定，同时返回成功 发起函数调⽤用时，其他线程已经锁定互斥量，或者存在其他线程同时申请互斥量，但没有竞争到互 斥量，那么pthread_ lock调⽤<strong>会陷⼊入阻塞，等待互斥量解锁。</strong> </p></blockquote><p><strong>trylock：非阻塞式获取锁</strong></p><p><strong>总结：</strong></p><p><strong>锁本身是临界资源</strong>，但是申请锁的操作是原子性的。所以才可以使用锁保护临界资源。</p>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程控制</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><h2 id="POSIX线程库"><a href="#POSIX线程库" class="headerlink" title="POSIX线程库"></a>POSIX线程库</h2><blockquote><ul><li>与线程有关的函数构成了⼀一个完整的系列，绝⼤大多数函数的名字都是以“pthread_”打头的 </li><li>引入头文件</li><li>链接这些线程库时要使用编译命令”-lpthread”选项</li></ul></blockquote><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：创建⼀一个新的线程 </span><br><span class="line">原型    int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*star t_routine)(void*), void *arg); </span><br><span class="line">参数    thread:返回线程ID    attr:设置线程的属性，attr为<span class="literal">NULL</span>表⽰示使⽤用默认属性    start_routine:是个函数地址，线程启动后要执⾏行的函数    arg:传给线程启动函数的参数</span><br><span class="line">返回值：成功返回<span class="number">0</span>；失败返回错误码</span><br></pre></td></tr></table></figure><p>错误检查: </p><ul><li>传统的⼀一些函数是，成功返回0，失败返回-1，并且对全局变量errno赋值以指⽰示错误。</li><li>pthreads函数出错时不会设置全局变量errno（⽽而⼤大部分其他POSIX函数会这样做）。⽽而是将错误 代码通过返回值返回 </li><li>pthreads同样也提供了线程内的errno变量，以⽀支持其它使⽤用errno的代码。对于pthreads函数的错 误，建议通过返回值判定，因为读取返回值要比读取线程内的errno变量的开销更小</li></ul><a id="more"></a><h2 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h2><p>pthread库中</p><p><strong>线程需要等待：</strong></p><ul><li>已经退出的线程，其空间没有被释放，仍然在进程的地址空间内。 </li><li>创建新的线程不会复用刚才退出线程的地址空间。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：等待线程结束 </span><br><span class="line">原型    <span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **value_ptr)</span></span>; </span><br><span class="line">参数    thread:线程ID    value_ptr:它指向一个指针，后者指向线程的返回值 </span><br><span class="line">返回值：成功返回<span class="number">0</span>；失败返回错误码</span><br></pre></td></tr></table></figure><blockquote><p><strong>线程等待，当前发起等待线程被挂起（阻塞式），等待被等待退出。</strong></p></blockquote><p>retval：被等待线程退出的返回值。（不关注就传一个NULL）</p><p>线程退出几种情况：</p><ul><li>线程运行完了结果对</li><li>线程运行完了结果不对</li><li>线程没运行完出异常</li></ul><p>但是一个进程中的线程异常退出，整个进程就退出了，发起等待线程也就被终止，所以不关注出异常情况。</p><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><p>如果需要只终止某个线程而不终止整个进程,可以有三种方法:</p><ol><li>从线程函数return 退出码。这种方法对主线程不适用,从main函数return相当于调用exit。 </li><li>线程可以调用pthread_ exit（退出码）终止自己。 </li><li>一个线程可以调用pthread_ cancel终止同一进程中的另一个线程</li></ol><ul><li>pthread_exit函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：线程终止 </span><br><span class="line">原型    <span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *value_ptr)</span></span>; </span><br><span class="line">参数    value_ptr:value_ptr不要指向一个局部变量。 </span><br><span class="line">返回值：无返回值，跟进程一样，线程结束的时候无法返回到它的调用者（自身）</span><br></pre></td></tr></table></figure><ul><li>需要注意,pthread_exit或者return返回的指针所指向的内存单元必须是全局的或者是用malloc分配的,不能在线程函数 的栈上分配,因为当其它线程得到这个返回指针时线程函数已经退出了。</li><li>pthread_cancel函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：取消一个执行中的线程 </span><br><span class="line">原型    int pthread_cancel(pthread_t thread); </span><br><span class="line">参数    thread:线程ID </span><br><span class="line">返回值：成功返回0；失败返回错误码</span><br></pre></td></tr></table></figure><p>调用<strong>join函数</strong>的线程将挂起等待,直到id为thread的线程终止。thread线程以不同的方法终止,通过pthread_join得到的终 止状态是不同的，总结如下:</p><blockquote><p>1.如果thread线程通过<strong>return</strong>返回,value_ ptr所指向的单元里存放的是thread线程函数的返回值。 2. 如果thread线程被别的线程调用<strong>pthread_ cance</strong>l异常终掉,value_ ptr所指向的单元里存放的是常数<strong>PTHREAD_ CANCELED   ——返回值为：-1。</strong> </p><p>3.如果thread线程是自己调用<strong>pthread_exit</strong>终止的,value_ptr所指向的单元存放的是传给<strong>pthread_exit的参数。</strong> </p><p>4.如果对thread线程的<strong>终止状态不感兴趣,可以传NULL给value_ ptr参数</strong>。</p></blockquote><h2 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h2><ul><li>默认情况下，新创建的线程是joinable的，线程退出后，需要对其进行pthread_join操作，否则无法释放资 源，从而造成系统泄漏。</li><li>如果不关心线程的返回值，join是一种负担，这个时候，我们可以告诉系统，当线程退出时，自动释放线程 资源。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure><p>可以是线程组内其他线程对目标线程进行分离，也可以是线程自己分离:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(pthread_self());</span><br></pre></td></tr></table></figure><p>joinable和分离是冲突的，一个线程不能既是joinable又是分离的。</p><p>joinable和分离是冲突的，一个线程不能既是joinable又是分离的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux线程ID和进程ID</title>
      <link href="/2019/01/16/Linux%E7%BA%BF%E7%A8%8BID%E5%92%8C%E8%BF%9B%E7%A8%8BID/"/>
      <url>/2019/01/16/Linux%E7%BA%BF%E7%A8%8BID%E5%92%8C%E8%BF%9B%E7%A8%8BID/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux查看正在运行的线程"><a href="#在Linux查看正在运行的线程" class="headerlink" title="在Linux查看正在运行的线程"></a><strong>在Linux查看正在运行的线程</strong></h1><p><strong><code>ps -aL</code></strong></p><h1 id="线程ID和进程ID"><a href="#线程ID和进程ID" class="headerlink" title="线程ID和进程ID"></a>线程ID和进程ID</h1><p><img src="/2019/01/16/Linux线程ID和进程ID/线程ID和进程ID.png" alt="线程ID和进程ID"></p><p>同一个进程内部的线程（多个执行流）用getpid()返回的是一个一个PID。（用户级id）</p><a id="more"></a><ul><li>一个进程里面对应多个PCB(线程的PCB) </li></ul><table><thead><tr><th>用户态</th><th>系统调用</th><th>内核进程描述符中对应的结构</th></tr></thead><tbody><tr><td>线程ID</td><td>pid_t gettid(void);</td><td>pid_t pid(操作系统调度的线程号) 操作系统级别 //c库中被没有间接调用 tid = syscall(SYS_gettid);——<strong>LWP</strong></td></tr><tr><td>进程ID</td><td>pid_t getpid(void);</td><td>pid_t tgid (进程组ID)  用户级  直接可以调用**</td></tr></tbody></table><p><strong>LWP - getttid()  –pid</strong> (操作系统级别)</p><p><strong>ps命令中的-L选项，会显示如下信息：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost linux]<span class="meta"># ps -eLf |head -1 &amp;&amp; ps -eLf |grep a.out |grep -v grep UID        PID  PPID   LWP  C NLWP STIME TTY          TIME CMD </span></span><br><span class="line">root     <span class="number">28543</span> <span class="number">22937</span> <span class="number">28543</span>  <span class="number">0</span>    <span class="number">2</span> <span class="number">15</span>:<span class="number">32</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./a.out </span><br><span class="line">root     <span class="number">28543</span> <span class="number">22937</span> <span class="number">28544</span>  <span class="number">0</span>    <span class="number">2</span> <span class="number">15</span>:<span class="number">32</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./a.out</span><br></pre></td></tr></table></figure><ul><li>LWP:线程ID，既gettid()系统调用的返回值。 </li><li>NLWP:线程组内线程的个</li></ul><blockquote><p>Linux提供了gettid系统调用来返回其线程ID，可是glibc并没有将该系统调用封装起来，在开放接口来共程序员使 用。如果确实需要获得线程ID，可以采用如下方法：     #include &lt;sys/syscall.h&gt;   pid_t tid;   tid = syscall(SYS_gettid);</p></blockquote><p><strong>当一个线程的pid=tgid则这个线程是主线程</strong></p><p>线程ID及进程地址空间布局</p><ul><li><p>pthread_create函数会产生一个线程ID，存放在第一个参数指向的地址中。该线程ID(库级别操作id)和前面所说的线程ID（pid）不是一回事。</p></li><li><p>前面讲的线程ID属于进程调度的范畴。因为线程是轻量级进程，是操作系统调度器的最小单位，所以需要 一个数值来唯一表示该线程。 </p></li><li><p>pthread_ create函数第一个参数指向一个虚拟内存单元，该内存单元的地址即为新创建线程的线程ID，属于 NPTL线程库的范畴。线程库的后续操作，就是根据该线程ID来操作线程的。 线程库NPTL提供了pthread_ self函数，可以获得线程自身的ID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_t</span> pthread_self(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程概念</title>
      <link href="/2019/01/14/Linux%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/01/14/Linux%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程的概念（复习）-铺垫"><a href="#线程的概念（复习）-铺垫" class="headerlink" title="线程的概念（复习）-铺垫"></a>线程的概念（复习）-铺垫</h1><ul><li>进程是<strong>分配系统资源的基本单位</strong></li><li>线程是<strong>一个标准的进程(一个执行流的进程)</strong></li></ul><p><img src="/2019/01/14/Linux线程概念/Linux线程图解.png" alt="Linux线程图解"></p><h2 id="1-理解（Linux下）"><a href="#1-理解（Linux下）" class="headerlink" title="1.理解（Linux下）"></a>1.理解（Linux下）</h2><p><strong>线程是在进程的内部运行的：</strong>线程是在进程的地址空间内运行的，共享一份虚拟地址空间。</p><p><strong>线程大部分资源都是共享的</strong>。（共用一个虚拟地址空间）</p><p><strong>进程大部分资源都是独立的</strong>。（每个一个进程都有自己独自的一份虚拟地址空间）</p><p>CPU是只能识别PCB的，但是他无法区分进程还是线程。所以Linux当中CPU看到的一个进程相当于一个轻量级进程（&lt;=一个标准的进程(一个执行流的进程)）</p><p>Linux下没有一份真正意义的进程。使用进程模拟线程。</p><p>TCB ThreadContrlClock 线程控制块</p><p><img src="/2019/01/14/Linux线程概念/线程概念.png" alt="线程概念"></p><a id="more"></a><h2 id="2-线程的资源"><a href="#2-线程的资源" class="headerlink" title="2.线程的资源"></a>2.线程的资源</h2><ul><li><strong>私有资源</strong></li></ul><blockquote><ol><li>线程ID</li><li>一组寄存器（上下文保护）</li><li>线程栈</li><li>erro</li><li>信号屏蔽字</li><li>调度优先级</li></ol></blockquote><ul><li><strong>共享资源</strong></li></ul><blockquote><ol><li>同有个地址空间</li><li>文件描述符</li><li>每种处理信号处理方式（忽略，默认，自定义）</li><li>当前工作目录</li><li>用户id和组id</li></ol></blockquote><h2 id="3-线程优点"><a href="#3-线程优点" class="headerlink" title="3.线程优点"></a>3.线程优点</h2><blockquote><ul><li>创建线程比创建一个进程代价小</li><li>与进程之间切换相比，线程之间的切换需要操作系统的工作小的多</li><li>线程占用的资源要比进程少很多</li><li>能充分利用多处理器的可并行数量</li><li>在等待慢速IO操作的同时，程序可以执行其他任务</li><li>计算密集型应用，为了能在多处理器系统上运行，将计算分解到多个线程中实现</li><li>IO密集型应用，为了提高性能，将IO操作重叠。线程可以同时等待不同IO操作</li></ul></blockquote><h2 id="4-线程缺点"><a href="#4-线程缺点" class="headerlink" title="4.线程缺点"></a>4.线程缺点</h2><ul><li>性能损失<ul><li>一个很少被外部事件阻塞的计算密集型线程往往⽆无法与共它线程共享同⼀一个处理器。如 果计算密集型线程的数量⽐比可⽤用的处理器多，那么可能会有较⼤大的性能损失，这⾥里的性 能损失指的是增加了额外的同步和调度开销，⽽而可⽤用的资源不变。</li></ul></li></ul><ul><li><p>健壮性降低</p><ul><li>编写多 程需要更全⾯面更深⼊入的考虑，在一个多线程程序⾥里，因时间分配上的细微偏差 或者因共享了不该共享的变量⽽而造成不良影响的可能性是很⼤大的，换句话说线程之间是 缺乏保护的。</li></ul></li><li><p>缺乏访问控制</p><ul><li>进程是访问控制的基本粒度，在⼀一个线程中调⽤用某些OS函数会对整个进程造成影响</li></ul></li><li><p>编程难度提高</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-javaIO</title>
      <link href="/2019/01/06/14-javaIO/"/>
      <url>/2019/01/06/14-javaIO/</url>
      
        <content type="html"><![CDATA[<h1 id="Java高级开发之JavaIO"><a href="#Java高级开发之JavaIO" class="headerlink" title="Java高级开发之JavaIO"></a>Java高级开发之JavaIO</h1><p>IO部分的重点：五个类（File、OutputStream、InputStream、Reader、Writer）一个接口（Serializable）</p><h1 id="1-File文件操作类"><a href="#1-File文件操作类" class="headerlink" title="1.File文件操作类"></a>1.File文件操作类</h1><p>在java.io包中，File类是唯一一个与文件本身操作（创建，删除，取得信息）有关的程序类</p><h2 id="1-1File类的基本使用"><a href="#1-1File类的基本使用" class="headerlink" title="1.1File类的基本使用"></a>1.1File类的基本使用</h2><p>java.io.File类是一个普通的类，直接产生实例化对象即可，两个构造方法如下：</p><blockquote><p>public File(String pathname);</p><p>public File(String parent,String child); //设置父路径和子类</p></blockquote><p>如果要进行文件的基本操作，可以使用FIle类的如下方法；</p><blockquote><p>创建一个新文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOExcepotion</span></span><br></pre></td></tr></table></figure><blockquote><p>判断一个文件是否存在</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> bollean <span class="title">exists</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>由于java具有跨平台特性但是，在实际项目部署环境可能与开发环境不同.那么这个时候路径的问题就很麻烦。Windows下面使用的是“\”,而Unix系统下使用的是“/”。所以使用路径分隔符时都会采用File类的一个常量”<code>public static final String separator</code>“来描述</p>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-视图</title>
      <link href="/2019/01/06/12-%E8%A7%86%E5%9B%BE/"/>
      <url>/2019/01/06/12-%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="12-视图"><a href="#12-视图" class="headerlink" title="12.视图"></a>12.视图</h1><p>MySQL5添加了对视图的支持。</p><p>视图是一个<strong>虚拟的表</strong>。其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。<strong>视图的数据变化会影响到基表，基表的数据变化也会影响到视图。</strong></p><p>视图可以把查询包装成一个虚拟表（临时表），方便检索。</p><a id="more"></a><h2 id="12-1使用视图的作用"><a href="#12-1使用视图的作用" class="headerlink" title="12.1使用视图的作用"></a>12.1使用视图的作用</h2><blockquote><ul><li><strong>重用SQL语句</strong></li><li><strong>简化复杂的SQL操作。在编写查询后，可以方便地重新利用而不必知道它地基本查询细节</strong></li><li><strong>使用表地组成部分而不是整个表</strong></li><li><strong>保护数据。可以给用户授予表地特定部分的访问权限而不是整个表的访问权限。</strong>(提高安全性)</li><li><strong>更改数据格式和表。视图可以返回与底层表的表示和格式不同的数据。</strong></li></ul></blockquote><p>在视图创建后，可以利用与表基本相同的方式利用他们。可以对视图执行select操作，过滤和排序数据，将视图联结到其他视图或者表，甚至能添加更新操作（添加更新数据存在某种限制）</p><h3 id="12-1-2视图带来的性能问题"><a href="#12-1-2视图带来的性能问题" class="headerlink" title="12.1.2视图带来的性能问题"></a>12.1.2视图带来的性能问题</h3><p>因为视图本省不包含数据，所以每次检索使用视图时，都必须处理查询执行时所需的任一个检索。如果你用了多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降的很厉害。因此在部署使用了大量视图的应用前，应该进行测试。</p><h2 id="12-2视图的规则和限制"><a href="#12-2视图的规则和限制" class="headerlink" title="12.2视图的规则和限制"></a>12.2视图的规则和限制</h2><ul><li>与表名相同，视图也需要唯一名称</li><li>对于可以创建的视图数目没有限制</li><li>对于创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予</li><li>视图可以像表一样嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图</li><li>order by可以用在视图中，但是如果从该视图检索数据的select语句也包含order by,那么该视图中的order by将被覆盖。</li><li>视图不能索引[^1]，也不能有关联的触发器[^2]或默认值。</li></ul><p>[^1]: 视图是一张临时表（存储引擎 myisam） 不能有主键<br>[^2]: view procedure  ,trigger(触发器)：会监听 一些update 等 相当于一个切面</p><ul><li><p>视图可以和表一起使用，例如，编写一条联结表和视图的select语句。 </p><p>​                                                                          `</p></li></ul><h2 id="12-3视图使用"><a href="#12-3视图使用" class="headerlink" title="12.3视图使用"></a>12.3视图使用</h2><ul><li>创建视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名 as select 语句</span><br></pre></td></tr></table></figure><ul><li>查看创建视图的语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create view 视图名</span><br></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名</span><br></pre></td></tr></table></figure><ul><li>更新视图</li></ul><blockquote><p>可以先用<code>drop</code>再用<code>create</code>，也可以直接用<code>create or replace view</code><br>如果要更新的视图不存在，则第二条更新语句就会创建一个新的视图；<br>如果要更新的视图存在；则第二条根更新的语句会替代原有视图。</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create view v_ename_dname as select ename,dname from emp,dept where emp.deptno = dept.deptno;</span><br><span class="line">Query OK, 0 rows affected (0.25 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_scott |</span><br><span class="line">+-----------------+</span><br><span class="line">| dept            |</span><br><span class="line">| emp             |</span><br><span class="line">| exam            |</span><br><span class="line">| salgrade        |</span><br><span class="line">| stu             |</span><br><span class="line">| v_ename_dname   |</span><br><span class="line">+-----------------+</span><br><span class="line">6 rows in set (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from  v_ename_dname;</span><br><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br><span class="line">14 rows in set (0.12 sec)</span><br></pre></td></tr></table></figure><ul><li>修改了视图，对基表数据有影响</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">update v_ename_dname set dname=&apos;sales&apos;  where ename=&apos;CLARK&apos;; </span><br><span class="line">select * from EMP  where ename=&apos;CLARK&apos;;</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">| empno  | ename | job     | mgr  | hiredate            | sal     | comm | deptno |</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">| 007782 | CLARK | MANAGER | 7839 | 1981-06-09 00:00:00 | 2450.00 | NULL |     10 |</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| deptno | dname      | loc      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | sales      | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>修改了基表，。对视图也有影响</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update emp set deptno=20 where ename=&apos;james&apos;; -- 修改基表</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from v_ename_dname where ename = &apos;james&apos;;</span><br><span class="line">+-------+----------+</span><br><span class="line">| ename | dname    |</span><br><span class="line">+-------+----------+</span><br><span class="line">| JAMES | RESEARCH |   &lt;-视图中的数据发生了变化</span><br><span class="line">+-------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名;</span><br></pre></td></tr></table></figure><h2 id="12-4利用视图简化更复杂的联结"><a href="#12-4利用视图简化更复杂的联结" class="headerlink" title="12.4利用视图简化更复杂的联结"></a>12.4利用视图简化更复杂的联结</h2><p>从上面的例子就可以看出，我再次从筛选出来的视图中查找时，就不需要再写where from 条件，直接使用视图即可。</p><blockquote><p>创建可重用的视图：创建不受特定数据限制的视图是一种好办法。扩展视图的范围不仅可以使得它能被重用，而且甚至更多有用。这样做不需要创建和维护多个类似视图</p></blockquote><h2 id="12-5用视图过滤不想要的数据"><a href="#12-5用视图过滤不想要的数据" class="headerlink" title="12.5用视图过滤不想要的数据"></a>12.5用视图过滤不想要的数据</h2><p>视图对应普通的where子句也很有用。</p><blockquote><p>where子句和where子句如果从检索数据时使用了一条where子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p></blockquote><h2 id="12-6使用视图与计算字段"><a href="#12-6使用视图与计算字段" class="headerlink" title="12.6使用视图与计算字段"></a>12.6使用视图与计算字段</h2><p>将用select 筛选出来的的计算字段的语句将筛选出来的结果作为视图用运用，简化SQL语句，便于查找。</p><h2 id="12-7更新视图（详解）"><a href="#12-7更新视图（详解）" class="headerlink" title="12.7更新视图（详解）"></a>12.7更新视图（详解）</h2><p>通常，视图是可以更新的（即，可以对视图 insert、update、delete）。更新一个视图将更新其基表，因为视图是一个虚拟表，其中并没有真实存在数据而只是select筛选出来的数据的整合成一个临时表而已。如果你对视图进行修改，则实际上是对其基表增加或删除，修改。</p><p>但是并非所有视图都是可以更新的。基本上说，如果MySQL不能正确地确定被更新的数据，则不允许更新（包括插入删除）。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新：</p><ul><li>分组（使用group by）;</li><li>联结；</li><li>子查询；</li><li><p>聚集函数（min()、count()、sum() 等）；</p></li><li><p>distinct;</p></li><li>导出（计算）列</li></ul><p>即视图基本不能进行更新，这不是一种严重的限制，其实视图主要用于数据检索的。</p><blockquote><p>一般，视图应该用于检索（select语句）而不是用于更新(insert,update和delete)。</p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><strong>视图是一个虚拟的表。他们包含的不是数据而是根据需要检索出来的数据的查询。视图提供了一种MySQL的Select语句层次的封装，可以用来简化数据处理以及重新格式化基础数据或保护基础数据。</strong></p><ul><li>与表一样，必须唯一命名（不能出现同名视图或表名）</li><li>创建视图数目无限制，但要考虑复杂查询创建为视图之后的性能影响 </li><li>视图不能添加索引，也不能有关联的触发器或者默认值 </li><li>视图可以提高安全性，必须具有足够的访问权限 </li><li><code>order by</code> 可以用在视图中，但是如果从该视图检索数据 <code>select</code>中也含有 <code>order by</code> ,那么该视图中的 <code>order by</code> 将被覆盖 </li><li>视图可以和表一起使用</li></ul><h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><p><strong>牛客：针对actor表创建视图actor_name_view</strong></p><p><a href="https://www.nowcoder.com/practice/b9db784b5e3d488cbd30bd78fdb2a862?tpId=82&amp;&amp;tqId=29806&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/sql/question-ranking" target="_blank" rel="noopener">牛客：针对actor表创建视图actor_name_view</a></p><p><strong>题目描述：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">针对actor表创建视图actor_name_view，只包含first_name以及last_name两列，并对这两列重新命名，first_name为first_name_v，last_name修改为last_name_v：</span><br><span class="line">CREATE TABLE IF NOT EXISTS actor (</span><br><span class="line">actor_id smallint(5) NOT NULL PRIMARY KEY,</span><br><span class="line">first_name varchar(45) NOT NULL,</span><br><span class="line">last_name varchar(45) NOT NULL,</span><br><span class="line">last_update timestamp NOT NULL DEFAULT (datetime(&apos;now&apos;,&apos;localtime&apos;)))</span><br></pre></td></tr></table></figure><p>分析：写视图就是先思考select语句即可</p><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view actor_name_view  as select first_name as first_name_v , last_name as last_name_v from actor;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-事务管理</title>
      <link href="/2019/01/05/11-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/05/11-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="11-事务管理"><a href="#11-事务管理" class="headerlink" title="11-事务管理"></a>11-事务管理</h1><p>事务就是一组DML语句组成，这些语句在逻辑上存在着相关性，这一组DML语句要么成功，要么全部失败，是一个整体。MySQL提供一种机制，保证我们达到这样的效果。事务还规定不同的客户端看到的数据是不相同的。</p><p>事务处理是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果。利用事务处理，可保证一组操作不会中途停止，他们或者作为整体执行，或者完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表。如果发生错误，则进行回退（撤销操作）以恢复数据库到某个已知且安全的状态。</p><a id="more"></a><p>基本术语：</p><blockquote><ul><li><strong>事务（transaction）指一组SQL语句；</strong></li><li><strong>回退（rollback）指撤销指定SQL语句的过程</strong></li><li><strong>提交（Commit）指将未储存的SQL语句结果写入数据库表；</strong></li><li><strong>保留点（savepoint）指事处理中设置的临界占位符（place-holder），你可以对它发布退回（与回退整个事务处理不同）</strong></li></ul></blockquote><h2 id="11-2-事务处理基本操作"><a href="#11-2-事务处理基本操作" class="headerlink" title="11.2  事务处理基本操作"></a>11.2  事务处理基本操作</h2><p>案例：</p><p>银行转账的例子更需要考虑事务问题。</p><ul><li><p>创建测试表</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table account(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(50) not null default &apos;&apos;,</span><br><span class="line">    -&gt; balance decimal(10,2) not null default 0.0</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure></li><li><p>开始一个事务</p><p><code>start transaction</code>  <code>begin</code></p></li><li><p>创建一个保存点</p><p><code>savepoint 保存点名</code></p></li><li><p>回到保存点（根据具体情况）</p><p><code>rollback to 保存点名</code> <code>release savepoint</code></p></li><li><p>提交结束当前事务</p><p><code>commit;</code> <code>rollback</code></p></li><li><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction; -- 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint aa; -- 设置保存点aa</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(1,&apos;张三&apos;,10); --添加一条存款记录</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint bb; -- 设置保存点bb</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(2,&apos;李四&apos;，100000)； -- 再添加一条记录</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(2,&apos;李四&apos;,100000); -- 再添加一条存款记录</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from account; -- 两条记录都在</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">| id | name   | balance   |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">|  1 | 张三   |     10.00 |</span><br><span class="line">|  2 | 李四   | 100000.00 |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback to bb;  -- 发现后来添加这一条记录是误操作。所以回滚到bb状态 </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from account; -- 第二条记录没了</span><br><span class="line">+----+--------+---------+</span><br><span class="line">| id | name   | balance |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">|  1 | 张三   |   10.00 |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-2事务处理注意事项"><a href="#11-2事务处理注意事项" class="headerlink" title="11.2事务处理注意事项"></a>11.2事务处理注意事项</h2><ul><li><p>如果没有设置保存点，也可以回滚，只是回滚到事务的开始。直接使用 rollback(前提事务还没有提交)</p></li><li><p>如果一个事务被提交了（Commit）,则不可以回退（rollback）</p></li><li><p>可以选择回退到哪一个保存点</p></li><li><p>innnoDB支持事务，MyISAM不支持事务</p></li><li><p>开始事务 start transaction</p></li><li><p>rollback只能在一个事务处理内使用（在执行一条start transaction命令之后）</p></li></ul><h3 id="小tips"><a href="#小tips" class="headerlink" title="小tips:"></a>小tips:</h3><blockquote><p><strong>事务处理用来管理insert,update和delete语句，不能回退select,create,drop语句，如果你执行回退，他们不会被撤销。</strong>DDL语句和隐式修改MySQL构架的语句：<code>set password</code> ,<code>create user</code>…</p><p>管理语句：<code>cache index</code> <code>load indeex</code>  <code>analyze table</code>…</p></blockquote><h2 id="11-3使用Commit"><a href="#11-3使用Commit" class="headerlink" title="11.3使用Commit"></a>11.3使用Commit</h2><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这就是所谓的隐含提交(implicit commot)，即提交（写或保存）操作就是自动进行的。</p><p>但是在事务处理块中，提交不会隐含地进行。为进行明确地提交，使用commit语句。commit语句后当前事务就已经结束了，在事务中保存地回退点就不再存在了。</p><p>【以下仅个人理解】</p><p>可以这样理解事务地执行过程，开始一个事务后所有的SQL语句（insert，delete,update）执行的结果都在内存中保存并未真实的写入物理磁盘中（文件），一个回退点就相当标记当前时刻临时表中（内存）的状态，当执行回退时，就像栈一样的之前的语句从语句栈中弹出，返回表的回退点的状态。</p><p><strong>当commit执行后，或者rollback语句执行后事务回关闭。</strong>将内存中的有效SQL语句对应表写回物理磁盘中表（文件）  【<strong>此处的rollback语句并非是<code>rollback to 回退点</code>语句，回滚的回退点的语句并不能真正结束事务，还需显示的调用commit 或 rollback语句</strong>】</p><p><strong>当一个事务中某行语句执行出错时，commit之前的一条语句，则自动回退到执行错误语句的前面且事务并没有被提交，假如再使用<code>start transaction</code>则会提交之前的事务，开始新的事务。</strong></p><h3 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips:"></a>小Tips:</h3><blockquote><p>隐含事务关闭：当commit执行后，或者rollback语句执行后事务回关闭，事务回自动关闭（将来的更改将会隐式的提交）</p></blockquote><h2 id="11-4使用保留点"><a href="#11-4使用保留点" class="headerlink" title="11.4使用保留点"></a>11.4使用保留点</h2><p>简单的rollback和commit语句就可以写入或撤回整个事务处理。但是，只是对简单的事务处理才能这样做，更复杂的事务处理可能需要部分提交或回退。</p><p>回退点<code>savepoint 回退点名称</code> ，如果重复使用回退点的名称，则覆盖新的回退点。</p><p><strong>释放保留点</strong>：<code>rollback to 保留点名称</code> 、release savepoint(MySQL 5以来)</p><h2 id="11-5更改默认的提交行为"><a href="#11-5更改默认的提交行为" class="headerlink" title="11.5更改默认的提交行为"></a>11.5更改默认的提交行为</h2><p>默认MySQL行为是自动提交所有更改。换句话说，任何时候你执行一条MySQL语句，该语句实际上就是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br></pre></td></tr></table></figure><p>autocommit标志决定是否自动提交更改，不管有没有commit语句。设置autocommit 为（假 0）指示MySQL不自动提交更改（直到autocommit被设置为真为止）</p><blockquote><p>改标志autocommit针对每一个连接而不是服务器的。</p></blockquote><h2 id="11-6-事务的隔离级别"><a href="#11-6-事务的隔离级别" class="headerlink" title="11.6 事务的隔离级别"></a>11.6 事务的隔离级别</h2><p>当我们有多个客户端同时操作数据库的某张表，如何进行隔离操作？MySQL提供了个隔离级别</p><p>当MySQL表被多个线程或者客户端开启各自事务操作数据库中的数据库时，MySQL提供了一种机制，可以让不同的事务操作数据时，具有隔离性。从而保证数据的一致性。</p><h3 id="11-6-1无隔离性的带来问题"><a href="#11-6-1无隔离性的带来问题" class="headerlink" title="11.6.1无隔离性的带来问题"></a>11.6.1无隔离性的带来问题</h3><p>1.脏读</p><p>是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交数据中，这时，另外事务也访问这个数据，然后使用了这个不是最新的数据。</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Mary的原工资为1000，财务人员将Mary的工资改为8000（但未提交事务）</span><br><span class="line">2.Mary读取自己的工资，发现自己的工资变为8000，很开心！</span><br><span class="line">3.而财务发现自己操作有误，回滚了事务，Marry工资变为了1000，Marry读到的工资数8000是一个脏数据。</span><br><span class="line">解决:在事务修改完成并提交后才可以读取到数据，则可避免该问题</span><br></pre></td></tr></table></figure><p>2.不可重复读</p><p>是指一个事务内，多次读同一数据。在这个事务还没结束时，另外一个事务也访问该同一数据。那么，在第一个事务中两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据有可能不一样。这样读发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复度。（即不读到相同的数据内容）</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.在事务1中，Marry读取到自己工资为1000，操作并没有完成。</span><br><span class="line">2.在事务2中，这时财务人员修改了Marry的工资为2000，并提交事务。</span><br><span class="line">3.在事务1中，Marry再次读取到自己的工资时，工资变了2000</span><br><span class="line">解决方法：在事务修改完成并提交后才可以读取到数据，则可避免该问题</span><br></pre></td></tr></table></figure><p>3.幻读</p><p>是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改设计到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入了一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就像发生了幻觉一样。</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">目前工资为1000的员工有10人。   </span><br><span class="line">1.事务1,读取所有工资为1000的员工。    </span><br><span class="line">2.这时事务2向employee表插入了一条员工记录，工资也为1000    </span><br><span class="line">3.事务1再次读取所有工资为1000的员工 共读取到了11条记录，          </span><br><span class="line">解决办法：如果在操作事务完成数据处理之前，任何其他事务都不可以添加新数据，则可避免该问题</span><br></pre></td></tr></table></figure><p><strong>备注</strong>：不可重复读的<strong>重点是修改</strong>：同样的条件, 你读取过的数据,再次读取出来发现值不一样了 幻读的重点在 于新增或者删除：同样的条件, 第1次和第2次读出来的记录数不一样</p><h3 id="11-6-2事务的隔离级别"><a href="#11-6-2事务的隔离级别" class="headerlink" title="11.6.2事务的隔离级别"></a>11.6.2事务的隔离级别</h3><table><thead><tr><th>隔离级别</th><th style="text-align:left">脏读</th><th style="text-align:left">不可重复读</th><th style="text-align:left">幻读</th><th style="text-align:left">加锁读</th></tr></thead><tbody><tr><td></td><td style="text-align:left">1修改未提交2读1回滚2读</td><td style="text-align:left">1读2修改提交1再读</td><td style="text-align:left">1读2增加3读（发现多了一条数据）</td><td style="text-align:left"></td></tr><tr><td>读未提交(read uncommitter）</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>读已提交(read committed)</td><td style="text-align:left">✖</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>可重复读(repeatable read)</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>可串行化读(serializable)</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">加锁</td></tr></tbody></table><ul><li>设置事务的隔离级别</li></ul><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><ul><li>查看当前隔离级别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>隔离级别：客串行化例子：</li></ul><ol><li>当客户端A在执行select过程中（还没有提交结束事务），DBMS会对库加锁，如果这时客户端B执行插入，只要还没释放锁，插入不进去，会将B的update语句放入阻塞队列，直到释放了锁或超时。</li></ol><blockquote><p><strong>说明：mysql默认的隔离级别是可重复读，一般情况下不要修改，修改完后一定要修改回去，要不然就会一直保持直到关闭客户端。</strong></p></blockquote><h2 id="11-7事务的ACID特性"><a href="#11-7事务的ACID特性" class="headerlink" title="11.7事务的ACID特性"></a>11.7事务的ACID特性</h2><ul><li><strong>原子性（Atomicity）</strong></li></ul><p>事务是应用中最小的执行单位，具有不可再分的特征，事务是应用中不可再分的最小逻辑执行体。</p><ul><li><strong>一致性（Consistency</strong>）</li></ul><p>事务执行的结果，必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库只包含事务成功提交的结果 时，数据库处于一致性状态。如果系统运行发生中断，某个事务尚未完成而被迫中断，而改未完成的事务对数据库 所做的修改已被写入数据库，此时数据库就处于一种不正确（不一致）的状态。因此一致性是通过原子性来保证的。</p><ul><li><strong>隔离性（lsolation）</strong></li></ul><p>各种事务的执行互不干扰，任意一个事务的内部操作对其他并发事务都是隔离的。也就是说，并发执行的事务之间不能看到对方的中间状态。并发执行的事务之间不能互相影响。</p><ul><li><strong>持久性（Durability）</strong></li></ul><p>持久性是指一个事务一旦被提交，它对数据库所做的改变都要记录到永久存储其中（如：磁盘）。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-索引特性</title>
      <link href="/2019/01/04/10-%E7%B4%A2%E5%BC%95%E7%89%B9%E6%80%A7/"/>
      <url>/2019/01/04/10-%E7%B4%A2%E5%BC%95%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="10索引特性（重点-）"><a href="#10索引特性（重点-）" class="headerlink" title="10索引特性（重点**）"></a>10索引特性（重点**）</h1><p>索引：提高数据库的性能，索引是物美价廉的东西。不用增加内存，不用该程序，不用调sql ,只要执行正确的<code>create index</code>，查询 ==速度== 就能提高成百上千倍。但是查速度的提高是以插入，更新，删除的速度为代价的，这些写操作，增加了大量的IO。所以它的价值，在于提高==海量数据的键锁速度==。</p><p><strong>常见索引分为：</strong></p><ul><li>主键索引（primary key)</li><li>唯一键索引（unique）</li><li>普通索引 (index)</li><li>全文索引（fulltext）–解决中文索引问题</li></ul><p><strong>索引部分目前只做简单学习，下来将索引部分详细研究后再对本篇博客做补充。</strong></p><a id="more"></a><p><strong>练习</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">-- 构建一个8000000条记录的数据 --构建的海量表数据需要有差异性，所以使用存储过程来创建， 拷贝下面代码就可以了，暂时不用理解</span><br><span class="line"> </span><br><span class="line">-- 产生随机字符串 </span><br><span class="line">delimiter $$ </span><br><span class="line">create function rand_string(n INT) </span><br><span class="line">returns varchar(255) </span><br><span class="line">begin  </span><br><span class="line">declare chars_str varchar(100) default   &apos;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&apos;; </span><br><span class="line">declare return_str varchar(255) default &apos;&apos;; </span><br><span class="line">declare i int default 0; </span><br><span class="line">while i &lt; n do    </span><br><span class="line">set return_str =concat(return_str,substring(chars_str,floor(1+rand()*52),1));   set i = i + 1;   </span><br><span class="line">end while;  </span><br><span class="line">return return_str;  </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">--产生随机数字 delimiter $$ </span><br><span class="line">create function rand_num() </span><br><span class="line">returns int(5) </span><br><span class="line">begin  </span><br><span class="line">declare i int default 0; </span><br><span class="line">set i = floor(10+rand()*500); </span><br><span class="line">return i; </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">--创建存储过程，向雇员表添加海量数据 </span><br><span class="line">delimiter $$ </span><br><span class="line">create procedure insert_emp(in start int(10),in max_num int(10))</span><br><span class="line">begin </span><br><span class="line">declare i int default 0;  </span><br><span class="line">set autocommit = 0;   </span><br><span class="line">repeat  set i = i + 1;  </span><br><span class="line">insert into EMP values ((start+i) ,rand_string(6),&apos;SALESMAN&apos;,0001,curdate(),2000,400,rand_num());  </span><br><span class="line">until i = max_num </span><br><span class="line">end repeat; </span><br><span class="line">commit; </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> -- 执行存储过程，添加8000000条记录 </span><br><span class="line"> call insert_emp(100001, 8000000);</span><br></pre></td></tr></table></figure><p>目前没有进行mysql sql编程的经验，以下只做这几点的概述。</p><p>关于<code>delimiter $$</code>的意思</p><blockquote><p>将分隔符； 临时性的改为$$  防止在函数中出现” ; “会导致直接执行。<code>用完后改回来。delimiter ;</code></p></blockquote><p>建立处海量数据的表（8000000条数据）</p><ul><li><p>查询员工编号为9998877的员工，MySQL会从第一条数据开始遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp whrer empno=998877;</span><br></pre></td></tr></table></figure><p>耗时4.93秒（耗时时间跟储存介质即电脑中储存mysql数据的硬盘有关），在实际项目中，本机是由一个人来操作的，假如放到公网中，同时又10000个人并发查询，则就可能引起死机</p><p><strong>解决办法：</strong>创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table emp add index(empno);</span><br></pre></td></tr></table></figure><p>耗时0.1秒都不到大大加快了查询速度，但是创建索引的过程还是耗时挺久的4秒左右。</p><p>粗略估计增加了快500倍。</p></li></ul><h2 id="10-1查询过程中的基本原理"><a href="#10-1查询过程中的基本原理" class="headerlink" title="10.1查询过程中的基本原理"></a>10.1查询过程中的基本原理</h2><ul><li><p>没有索引时：执行<code>select * from emp whrer empno=998877;sql语句是对这张存有海量数据的表进行整表的查询</code></p></li><li><p>而增加索引，会让表中数据形成一棵树（MySQL 中默认引擎innodb是形成一颗B+树）影响查询速度的是<strong>树的深度</strong></p><p>B+树 是 普通二叉树的升级版，减少了树的深度。</p><p>B+Tree：详解</p><p><a href="https://zhuanlan.zhihu.com/p/24309634" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24309634</a></p></li></ul><h2 id="10-2创建索引"><a href="#10-2创建索引" class="headerlink" title="10.2创建索引"></a>10.2创建索引</h2><h3 id="10-2-1创建主键索引"><a href="#10-2-1创建主键索引" class="headerlink" title="10.2.1创建主键索引"></a>10.2.1创建主键索引</h3><ul><li><p>第一种方式：</p><p>==在创建表的时候，直接在字段名后面直接指定<code>primay key</code>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(30)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><p>==在创建表最后，指定某列或者几列为主键索引==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>第三种方式：</p><p>==创建表之后再添加主题==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ccreate table  user3(</span><br><span class="line">    id int, </span><br><span class="line">    name varchar(30)</span><br><span class="line">); </span><br><span class="line">-- 创建表以后再添加主键 </span><br><span class="line">alter table user3 add primary key(id);</span><br></pre></td></tr></table></figure></li></ul><p><strong>主键索引的特点</strong>：</p><ul><li>一个表中，最多有一个主键索引，当然可以使复合主键 </li><li>主键索引的效率高（主键不可重复） </li><li>创建主键索引的列，它的值不能为null，且不能重复 </li><li>主键索引的列基本上是int</li></ul><h3 id="10-2-2唯一键的创建"><a href="#10-2-2唯一键的创建" class="headerlink" title="10.2.2唯一键的创建"></a>10.2.2唯一键的创建</h3><ul><li><p>第一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 在表定义时，在某列后直接指定unique唯一属性。 </span><br><span class="line">create table user4(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表时，在表的后面指定某列或某几列为unique </span><br><span class="line">create table user5(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30), </span><br><span class="line">    unique(name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table user6(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30)</span><br><span class="line">）； </span><br><span class="line">-- </span><br><span class="line">alter table user6 add unique(name);</span><br></pre></td></tr></table></figure></li></ul><p><strong>唯一索引的特点：</strong></p><ul><li>一个表中，可以有多个唯一索引 </li><li>查询效率高 如果在某一列建立唯一索引，必须保证这列不能有重复数据 </li><li>==如果一个唯一索引上指定not null，等价于主键索引==</li></ul><h3 id="10-2-3-普通索引的创建"><a href="#10-2-3-普通索引的创建" class="headerlink" title="10.2.3 普通索引的创建"></a>10.2.3 普通索引的创建</h3><ul><li>第一种方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user8(id int primary key,     </span><br><span class="line">name varchar(20),     </span><br><span class="line">email varchar(30),     </span><br><span class="line">index(name) --在表的定义最后，指定某列为索引 </span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>第二种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table user9(id int primary key,  name varchar(20),  email varchar(30)); </span><br><span class="line">alter table user9 add index(name); </span><br><span class="line">-- 创建完表以后指定某列为普通索引</span><br></pre></td></tr></table></figure></li><li><p>第三种方式</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table user10(id int primary key,  </span><br><span class="line">name varchar(20),  </span><br><span class="line">email varchar(30)</span><br><span class="line">); </span><br><span class="line">-- 创建一个索引名为 idx_name 的索引    </span><br><span class="line">create index idx_name on user10(name);</span><br></pre></td></tr></table></figure><p>普通索引的特点：</p><ul><li>一个表中可以有多个普通索引，普通索引在实际开发中用的比较多 </li><li>如果某列需要创建索引，==但是该列有重复的值==，那么我们就应该使用普通索引 </li></ul><h3 id="10-2-4全文索引"><a href="#10-2-4全文索引" class="headerlink" title="10.2.4全文索引"></a>10.2.4全文索引</h3><p>当文章字段或有大量文字的字段进行检索时，会使用到全文索引。MySQL提供全文索引机制。之前是只有在MyISAM引擎，现在innodb引擎也支持全文索引。但是默认支持的是英文，你不支持中文。</p><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE articles (    </span><br><span class="line">id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,    </span><br><span class="line">title VARCHAR(200),    </span><br><span class="line">body TEXT,    </span><br><span class="line">FULLTEXT (title,body) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO articles (title,body) VALUES    </span><br><span class="line">(&apos;MySQL Tutorial&apos;,&apos;DBMS stands for DataBase ...&apos;),    </span><br><span class="line">(&apos;How To Use MySQL Well&apos;,&apos;After you went through a ...&apos;),    </span><br><span class="line">(&apos;Optimizing MySQL&apos;,&apos;In this tutorial we will show ...&apos;),    </span><br><span class="line">(&apos;1001 MySQL Tricks&apos;,&apos;1. Never run mysqld as root. 2. ...&apos;),    </span><br><span class="line">(&apos;MySQL vs. YourSQL&apos;,&apos;In the following database comparison ...&apos;),    </span><br><span class="line">(&apos;MySQL Security&apos;,&apos;When configured properly, MySQL ...&apos;);</span><br></pre></td></tr></table></figure><ul><li>查询有没有’database‘数据</li></ul><p>如果使用如下方式查询，虽然查询出结果，但是没有用到全文索引.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from artices where body like &apos;%database%&apos;;</span><br><span class="line"></span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">| id | title             | body                                     |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |</span><br><span class="line">|  5 | MySQL vs. YourSQL | In the following database comparison ... |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br></pre></td></tr></table></figure><p>可以使用explain工具看一下，是否使用到索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from articles where body like &apos;database&apos;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE  -- ：简单查询</span><br><span class="line">        table: articles</span><br><span class="line">   partitions: NULL   -- possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</span><br><span class="line">         type: ALL    -- ：全表查询</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL   -- &lt;==key为null表示没有用到索引</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL    -- 显示索引的哪一列被使用了，如果可能的话，是一个常数</span><br><span class="line">         rows: 6       -- ：这个值是innodb预估的一个值(并不是是一个准确值)MYSQL认为必须检查的用来返回请求数据的行数</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.02 sec)</span><br></pre></td></tr></table></figure><ul><li>全文索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select * from articles</span><br><span class="line">    -&gt; where match(title,body) against (&apos;database&apos;);</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">| id | title             | body                                     |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |</span><br><span class="line">|  5 | MySQL vs. YourSQL | In the following database comparison ... |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">2 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure><p>通过explain来分析这个sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  explain SELECT * FROM articles WHERE MATCH (title,body) AGAINST (&apos;database&apos;)\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: articles</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: fulltext  -- 全文索引</span><br><span class="line">possible_keys: title</span><br><span class="line">          key: title     -- &lt;=key 用到了title</span><br><span class="line">      key_len: 0</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>关于explain 分析后的结果参数内容含义解释如下：<a href="https://www.cnblogs.com/yycc/p/7338894.html" target="_blank" rel="noopener">https://www.cnblogs.com/yycc/p/7338894.html</a></p><h2 id="10-3查询索引"><a href="#10-3查询索引" class="headerlink" title="10.3查询索引"></a>10.3查询索引</h2><ul><li>第一种方法： <code>show key from 表明</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show keys from articles\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: articles  -- :表名</span><br><span class="line">   Non_unique: 0   -- 0表示唯一索引</span><br><span class="line">     Key_name: PRIMARY-- &lt;=主键索引</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id-- 索引在那里列</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null:</span><br><span class="line">   Index_type: BTREE   ： -- 以二叉树形式的索引</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: articles</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: title</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: title</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">        Table: articles</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: title</span><br><span class="line"> Seq_in_index: 2</span><br><span class="line">  Column_name: body</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><p>第二种方式：<code>show index from 表明;</code></p></li><li><p>第三种方式（信息比较简略）：<code>desc 表明：</code></p></li></ul><h2 id="10-4删除索引"><a href="#10-4删除索引" class="headerlink" title="10.4删除索引"></a>10.4删除索引</h2><ul><li>第一种方法-删除主键索引：<code>alter table 表明 drop primary key;</code></li><li>第二种方法-其他索引的删除： <code>alter table 表明 drop index 索引名; 索引名就是show keys from 表名种的key_name字段</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user10 drop index idx_name;</span><br></pre></td></tr></table></figure><ul><li>第三种方法方法：drop index 索引名 on 表名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index name on user10;</span><br></pre></td></tr></table></figure><h2 id="10-5索引创建原则"><a href="#10-5索引创建原则" class="headerlink" title="10.5索引创建原则"></a>10.5索引创建原则</h2><ul><li>比较频繁作为查询条件的字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件（主要业务的要求）</li><li>更新非常频繁的字段不适合当作创建索引</li><li>不会出现在where子句中的字段不该创建索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-表的内外连接</title>
      <link href="/2019/01/03/09-%E8%A1%A8%E7%9A%84%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/01/03/09-%E8%A1%A8%E7%9A%84%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>配合食用效果极佳 </strong></p><p><strong>内连接查询：</strong>往往使用频繁，可以配合多种查询方法食用。</p><p>内连接就是两表的笛卡儿积表的基础上进行筛选</p><p><strong>外连接查询：</strong>首先要确定<strong>基准表</strong>（<strong>基准信息</strong>），即左连接的左表，右连接的右表。然后确定<strong>结合表</strong>，结合表需要的筛选条件。</p><a id="more"></a><h1 id="09-表的内外连接"><a href="#09-表的内外连接" class="headerlink" title="09 表的内外连接"></a>09 表的内外连接</h1><h2 id="9-1内链接"><a href="#9-1内链接" class="headerlink" title="9.1内链接"></a>9.1内链接</h2><p>内连接实际上就是利用where子句对两种表形成的笛卡儿积进行筛选，我们前面学习的查询都是内连接，也是在开发过程中使用的最多的连接查询</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表1 inner join 表2 on 连接条件 and其他连接条件;</span><br></pre></td></tr></table></figure><blockquote><p>之前学的就是内连接</p></blockquote><p>显示smith的名字和部门名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 之前写法</span><br><span class="line">select ename,dename from emp,dept where emp.deptno=dept.deptno and ename=&apos;smith&apos;;</span><br><span class="line"></span><br><span class="line">-- 标准内连接写法</span><br><span class="line">select ename,dename from emp inner join dept on emp.deptno=dept.depyno and ename=&apos;smith&apos;;</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>inner join就是inner join两个表的笛卡儿积中筛选on 后的条件</p><h2 id="9-2外连接"><a href="#9-2外连接" class="headerlink" title="9.2外连接"></a>9.2外连接</h2><p>外连接分为左连接右连接。（记住一种自己熟悉的即可）</p><h3 id="9-2-1左外连接"><a href="#9-2-1左外连接" class="headerlink" title="9.2.1左外连接"></a>9.2.1左外连接</h3><p><strong>左外连接:</strong>  如果联合查询的时，左侧的表我们完全显示 </p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名1 left join 表名2 on 连接条件</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>left join就是左表（一定显示）和右表中on后筛选后的表的结合（以左表为基础上添加（符合筛选条件的）右表）</p><h3 id="9-2-2右外连接"><a href="#9-2-2右外连接" class="headerlink" title="9.2.2右外连接"></a>9.2.2右外连接</h3><p><strong>右连接：</strong>如果联合查询，右侧的表完全显示我们就说是右外连接。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表明1 right join 表明2 on 连接条件</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>left join就是右表（一定显示）和左表中on后筛选后的表的结合（以右表为基础上添加（符合筛选条件的）左标）</p><p><strong>小练习：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 键两张表</span><br><span class="line">create table stu (id int, name varchar(30));  -- 学生表 </span><br><span class="line">insert into stu values(1,&apos;jack&apos;),(2,&apos;tom&apos;),(3,&apos;kity&apos;),(4,&apos;nono&apos;); </span><br><span class="line"></span><br><span class="line">create table exam (id int, grade int);  -- 成绩表</span><br><span class="line">insert into exam values(1, 56),(2,76),(11, 8);</span><br></pre></td></tr></table></figure><ul><li><p><strong>查询所有学生的成绩，如果没有这个学生的成绩，也要将学生的个人信息显示出来。</strong></p><p><strong>分析：</strong>关键字:所有学生， 成绩，（没有成绩也要显示出来） （<strong>以学生表为基准表，结合成绩表</strong>）外连接（左右都可以）</p><p><strong>左外连接：</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu left inner exam on stu.id=exam.id;</span><br></pre></td></tr></table></figure><p>​    <strong>右外连接：</strong>（不适合，因为一般都是基准表在结合表的前面显示）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stu.* from exam right inner stu on stu.id=exam.id;</span><br><span class="line"></span><br><span class="line">-- 改为：（太麻烦）</span><br><span class="line">select stu.id ,stu.name,exam.id,exam.grade from exam right join stu on stu.id=exam.id;</span><br></pre></td></tr></table></figure><ul><li><strong>对stu表和exam表联合查询，把所有的成绩都显示出来，即使这个成绩没有学生与它对应，也要显示出来</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu right join exam on stu.id=exam.id;</span><br></pre></td></tr></table></figure><ul><li><p><strong>列处部门名称和这些部门的员工信息，同时列出没有员工的部门</strong></p><p><strong>分析：</strong>关键字（部门名称，这些部分的员工信息，列出没有员工的部门）（<strong>以部门名称基准表，结合与员工表</strong>）外连接（左右都可以）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 方法一：</span><br><span class="line">select d.dname, e.* from dept d left join emp e on d.deptno=e.deptno; </span><br><span class="line">-- 方法二： </span><br><span class="line">select d.dname, e.* from emp e right join dept d on d.deptno=e.deptno;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>内连接查询：往往使用频繁，可以配合多种查询方法食用。</p><p>内连接就是两表的笛卡儿积表的基础上进行筛选</p><p>外连接查询：首先要确定<strong>基准表</strong>（<strong>基准信息</strong>），即左连接的左表，右连接的右表。然后确定<strong>结合表</strong>，结合表需要的筛选条件。</p></blockquote><blockquote><p><strong>SQL</strong>查询中各个关键字的执行先后顺序：</p><p>from &gt; on&gt; join &gt; where &gt; group by &gt; with &gt; having &gt; select &gt; distinct &gt; order by &gt; limit</p></blockquote><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>1.<a href="https://leetcode-cn.com/problems/rank-scores/" target="_blank" rel="noopener">178. 分数排名</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</span><br><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Create table If Not Exists Scores (Id int, Score DECIMAL(3,2))；</span><br><span class="line">Truncate table Scores</span><br><span class="line">insert into Scores (Id, Score) values (&apos;1&apos;, &apos;3.5&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;2&apos;, &apos;3.65&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;3&apos;, &apos;4.0&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;4&apos;, &apos;3.85&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;5&apos;, &apos;4.0&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;6&apos;, &apos;3.65&apos;)；</span><br></pre></td></tr></table></figure><p><strong>解答</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">a.Score as Score,</span><br><span class="line">count(*) as Rank</span><br><span class="line">from Scores a inner join (select distinct Score from Scores ) b </span><br><span class="line">where a.Score&lt;=b.Score</span><br><span class="line">group by a.id</span><br><span class="line">order by Rank;</span><br></pre></td></tr></table></figure><p>2.<a href="https://leetcode-cn.com/problems/exchange-seats/" target="_blank" rel="noopener">626. 换座位</a></p><p><strong>题目描述：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</span><br><span class="line"></span><br><span class="line">其中纵列的 id 是连续递增的</span><br><span class="line"></span><br><span class="line">小美想改变相邻俩学生的座位。</span><br><span class="line"></span><br><span class="line">你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</span><br><span class="line"></span><br><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习复合查询</title>
      <link href="/2019/01/03/MySQL%E7%BB%83%E4%B9%A0%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/01/03/MySQL%E7%BB%83%E4%B9%A0%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>复合查询（重点）</strong></p><ul><li>函数得使用</li></ul><ul><li><p>多表查询</p></li><li><p>自连接</p></li><li><p>子查询</p></li></ul><a id="more"></a><h1 id="07-MySQL-函数"><a href="#07-MySQL-函数" class="headerlink" title="07-MySQL 函数"></a>07-MySQL 函数</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote><p>查找字符串’10,A,B’ 中逗号’,’出现的次数cnt。</p></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(&apos;10,A,B&apos;)-length(replace(&apos;10,A,B&apos;, &apos;,&apos; ,&apos;&apos;)) as cnt;</span><br></pre></td></tr></table></figure><h1 id="08-MySQL-复合查询"><a href="#08-MySQL-复合查询" class="headerlink" title="08-MySQL 复合查询"></a>08-MySQL 复合查询</h1><h2 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote><p>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, s.salary from employees as e, salaries as s where e.emp_no =s.emp_no and e.hire_date = s.from_date order by e.emp_no desc;</span><br></pre></td></tr></table></figure><p><strong>解决2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, s.salary from employees as e inner join salaries as s on e.emp_no = s.emp_no and e.hire_date = s.from_date order by e.emp_no desc;</span><br></pre></td></tr></table></figure><h2 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2.题目描述"></a>2.题目描述</h2><blockquote><p>针对库中的所有表生成select count(*)对应的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; create table emp_bonus(</span><br><span class="line">&gt; emp_no int not null,</span><br><span class="line">&gt; recevied datetime not null,</span><br><span class="line">&gt; btype smallint not null);</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_emp` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&apos;select count(*) from &apos;,t.TABLE_NAME,&apos;;&apos;) AS cnts  from (select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database()) t;</span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;select count(*) from &quot;||name||&quot;;&quot; as cnts  from sqlite_master where type=&apos;table&apos;</span><br></pre></td></tr></table></figure><h2 id="3-题目描述"><a href="#3-题目描述" class="headerlink" title="3.题目描述"></a>3.题目描述</h2><blockquote><p>获取所有非manager的员工emp_no</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no from employees as e left join dept_manager as d on e.emp_no =d.emp_no where d.dept_no is null</span><br></pre></td></tr></table></figure><h2 id="4-题目描述"><a href="#4-题目描述" class="headerlink" title="4.题目描述"></a>4.题目描述</h2><blockquote><p>获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。<br>结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_emp` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, m.emp_no as manager_no from dept_emp as e inner join dept_manager as m on e.dept_no = m.dept_no where e.to_date = &apos;9999-01-01&apos; and m.to_date = &apos;9999-01-01&apos; and e.emp_no != m.emp_no;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
            <tag> MySQL数据库练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习</title>
      <link href="/2019/01/02/MySQL%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/01/02/MySQL%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL基本查询得练习（基础部分）</strong></p><p>MySQL学习得关键多连多练多练！！！</p><a id="more"></a><h1 id="MySQL小练"><a href="#MySQL小练" class="headerlink" title="MySQL小练"></a>MySQL小练</h1><h2 id="06-MySQL基本查询"><a href="#06-MySQL基本查询" class="headerlink" title="06-MySQL基本查询"></a>06-MySQL基本查询</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><blockquote><p>对于表actor批量插入如下数据<br>`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE  IF NOT EXISTS actor  (`</span><br><span class="line">&gt; `actor_id  smallint(5)  NOT NULL PRIMARY KEY,`</span><br><span class="line">&gt; `first_name  varchar(45) NOT NULL,`</span><br><span class="line">&gt; `last_name  varchar(45) NOT NULL,`</span><br><span class="line">&gt; `last_update  timestamp NOT NULL DEFAULT (datetime(&apos;now&apos;,&apos;localtime&apos;)))`</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into actor(actor_id,first_name,last_name,last_update) values</span><br><span class="line">(1,&apos;PENELOPE&apos;,&apos;GUINESS&apos;,&apos;2006-02-15 12:34:33 &apos;),</span><br><span class="line">(2,&apos;NICK&apos;,&apos;WAHLBERG&apos;,&apos;2006-02-15 12:34:33&apos;);</span><br></pre></td></tr></table></figure><h3 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2. 题目描述"></a>2. 题目描述</h3><blockquote><p>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct salary from salaries where to_date = &apos;9999-01-01&apos; order by salary desc;</span><br></pre></td></tr></table></figure><h3 id="3-题目描述"><a href="#3-题目描述" class="headerlink" title="3. 题目描述"></a>3. 题目描述</h3><blockquote><p>查找最晚入职员工的所有信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt;  PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; **解答：</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees order by hire_date desc limit 1;</span><br></pre></td></tr></table></figure><h3 id="4-题目描述"><a href="#4-题目描述" class="headerlink" title="4. 题目描述"></a>4. 题目描述</h3><blockquote><p>查找入职员工时间排名倒数第三的员工所有信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees order by hire_date desc limit 2,1;</span><br></pre></td></tr></table></figure><h3 id="5-题目描述"><a href="#5-题目描述" class="headerlink" title="5. 题目描述"></a>5. 题目描述</h3><blockquote><p>查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_no , count(distinct salary) t from salaries group by emp_no having t&gt;15;</span><br></pre></td></tr></table></figure><h3 id="6-题目描述"><a href="#6-题目描述" class="headerlink" title="6. 题目描述"></a>6. 题目描述</h3><blockquote><p>获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select dept_no, d.emp_no ,salary from salaries as s ,dept_manager as d </span><br><span class="line">where s.emp_no = d.emp_no </span><br><span class="line">and d.to_date = &apos;9999-01-01&apos; </span><br><span class="line">and s.to_date = &apos;9999-01-01&apos;;</span><br></pre></td></tr></table></figure><h3 id="7-题目描述"><a href="#7-题目描述" class="headerlink" title="7. 题目描述"></a>7. 题目描述</h3><blockquote><p>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE IF NOT EXISTS &quot;titles&quot; (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `title` varchar(50) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date DEFAULT NULL);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title ,count(title) t from titles group by title having t&gt;=2;</span><br></pre></td></tr></table></figure><h3 id="8-LeetCode-182-查找重复的电子邮箱"><a href="#8-LeetCode-182-查找重复的电子邮箱" class="headerlink" title="8. LeetCode [182. 查找重复的电子邮箱]"></a>8. LeetCode [182. 查找重复的电子邮箱]</h3><blockquote><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Create table If Not Exists Person (</span><br><span class="line">&gt; Id int, </span><br><span class="line">&gt; Email varchar(255)</span><br><span class="line">&gt; );</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Email from Person group by Email having count(Email)&gt;1;</span><br></pre></td></tr></table></figure><h3 id="9-LeetCode-595-大的国家"><a href="#9-LeetCode-595-大的国家" class="headerlink" title="9. LeetCode [595.大的国家]"></a>9. LeetCode [595.大的国家]</h3><blockquote><p>这里有张 <code>World</code> 表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt; | name            | continent  | area       | population   | gdp           |</span><br><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt; | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">&gt; | Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">&gt; | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">&gt; | Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">&gt; | Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p><p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>例如，根据上表，我们应该输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt; | name         | population  | area         |</span><br><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt; | Afghanistan  | 25500100    | 652230       |</span><br><span class="line">&gt; | Algeria      | 37100000    | 2381741      |</span><br><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>World表：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Create table If Not Exists World (</span><br><span class="line">&gt; </span><br><span class="line">&gt; name varchar(255), </span><br><span class="line">&gt; </span><br><span class="line">&gt; continent varchar(255), </span><br><span class="line">&gt; </span><br><span class="line">&gt; area int, </span><br><span class="line">&gt; </span><br><span class="line">&gt; population int,</span><br><span class="line">&gt; </span><br><span class="line">&gt; gdp int</span><br><span class="line">&gt; </span><br><span class="line">&gt; )；</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name ,population,area from World where area&gt;3000000 or population&gt;25000000;</span><br></pre></td></tr></table></figure><h3 id="10-LeetCode-177-第N高薪水"><a href="#10-LeetCode-177-第N高薪水" class="headerlink" title="10. LeetCode[177.第N高薪水]"></a>10. LeetCode[177.第N高薪水]</h3><blockquote><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第 <em>n</em> 高的薪水（Salary）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; +----+--------+</span><br><span class="line">&gt; | Id | Salary |</span><br><span class="line">&gt; +----+--------+</span><br><span class="line">&gt; | 1  | 100    |</span><br><span class="line">&gt; | 2  | 200    |</span><br><span class="line">&gt; | 3  | 300    |</span><br><span class="line">&gt; +----+--------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>例如上述 <code>Employee</code> 表，<em>n = 2</em> 时，应返回第二高的薪水 <code>200</code>。如果不存在第 <em>n</em> 高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; +------------------------+</span><br><span class="line">&gt; | getNthHighestSalary(2) |</span><br><span class="line">&gt; +------------------------+</span><br><span class="line">&gt; | 200                    |</span><br><span class="line">&gt; +------------------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  declare M Int;</span><br><span class="line">  Set M = N-1;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      select distinct Salary from Employee  order by Salary desc LIMIT M,1</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
            <tag> MySQL数据库练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/15/hello-world/"/>
      <url>/2018/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p><strong>博客开始2018</strong></p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven初识</title>
      <link href="/2019/01/25/Maven%E5%88%9D%E8%AF%86/"/>
      <url>/2019/01/25/Maven%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Maven简介和安装"><a href="#Maven简介和安装" class="headerlink" title="Maven简介和安装"></a>Maven简介和安装</h1><p>了解Maven是什么，作什么、且安装</p><p><a href="http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。" target="_blank" rel="noopener">http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。</a></p><p>提供了开发人员构建一个完整的生命周期框架。开发团队可以<strong>自动</strong>完成项目的基础工具建设，<strong>Maven使用标准的目录结构</strong>和<strong>默认构建生命周期</strong>（编译规则）。</p><p>在多人开发团队环境时，Maven可以设置按标标准在非常短的时间里完成配置工作。由于大部分项目的设置都非常检查，并且可以重复使用，Maven让开发人员更加轻松，同时创建报表，检查，构建和测试自动化设置。</p><p>Maven提供了开发人员的方式来管理：</p><ul><li>Builds（创建）</li><li>Documentation（文档）API文档</li><li>Reporting（报告）</li><li>Dependencies (依赖)   </li><li>SCM（软件配置管理）</li><li>Releases (发布) 版本号 Maven的中央仓库</li><li>Distribution (分布)</li><li>mailing list (邮件列表)</li></ul><p>概括来说，Maven<strong>简化和标准化项目建设过程</strong>。<strong>处理编译，分配，文档</strong>，<strong>团队协作和其他任务的无缝衔接。</strong>Maven增加可重用性并负责建立相关的任务。</p><a id="more"></a><p>学习Maven得理由是非常多</p><ul><li>主流IDE(Eclipse,IDEA,Netbean)够内置了Maven</li><li>SpringFramework已经不再提供jar得下载，直接通过Maven进行依赖下载</li><li>在github,开源社区几乎所有流行得java项目都是通过Maven进行构建管理</li><li>主流软件公司也在使用Maven</li></ul><h1 id="2安装"><a href="#2安装" class="headerlink" title="2安装"></a>2安装</h1><p>完成</p><p>mvn package 打包</p><p>mvn clean 删除target临时文件</p><p>java打包:命令    java -jar</p><p>usage: mvn[options] [&lt;goal(s)] [&lt;phase(s)</p><table><thead><tr><th>Options:</th><th></th></tr></thead><tbody><tr><td>-D , –define <arg></arg></td><td>定义系统属性</td></tr><tr><td>-f,–file <arg></arg></td><td>强制指定pom.xml文件，默认为当前目录下的pom.xml</td></tr><tr><td>-h,–help</td><td>显示帮助信息</td></tr><tr><td>-P,–activate-profiles<arg></arg></td><td>逗号分隔活动的profiles列表</td></tr><tr><td>-q,–quiet</td><td>静默退出，只输出错误信息</td></tr><tr><td>-s,–setting <arg></arg></td><td>修改用户的setting.xml文件 读取顺序是 参数指定-&gt;用户目录/.m2/settings.xml-&gt;M3_HOME/conf/settings/xml</td></tr><tr><td>-v,–version</td><td>显示版本信息</td></tr><tr><td>-X,–debug</td><td>DEBUG模式输出处理日志</td></tr></tbody></table><h1 id="Maven实战"><a href="#Maven实战" class="headerlink" title="Maven实战"></a>Maven实战</h1><blockquote><ul><li>掌握Maven项目创建</li><li>掌握使用Maven构建java项目，Web项目</li></ul></blockquote><p>1.Maven创建java普通项目</p><p>mvn -B archetype:generate </p><p>-DarchetypeGroupID=org.apache.maven.archetypes</p><p>-DarchetypeArtifactID=maven-archetype-quicksrart （模名）</p><p>-DarchetypeVersion=1.1（模板版本号） （以上为一个快速的模板） -DgroupId=com.bittech.hello  (组织ID)</p><p>-DartifactId=hello-app (项目名)   -Deversion=1.0.0 （项目版本号）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>版本号 ：主版本号.次版本号.小版本号</p><p>小版本号：修改BUG改动后的版本号。</p><p>次版本号：添加，修改功能。</p><p>次版本号：添加功能，修改功能</p><p>大版本号：产品发生很大的变化。</p><p>(项目名)artifactId.version(版本号).packaging(jar)</p><p>指令：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p>发布到中央仓库</p><p>​    申请中央仓库 search.maven.org</p><p>​    settings文件里配置仓库服务认证信息</p><p>​    pom。xml:设置发布仓库地址</p><p>​    申请发布到中央仓库。</p><p>​    申请通过后，进行构架发布</p><p>公司私服</p><p>​    申请公司私服账号</p><p>​    settings中配置仓库服务的认证信息</p><p>​    pom.xml 设置发布仓库地址</p><p>​    发布构建</p><ul><li>配置操作<ul><li>pom.xml中配置信息</li><li>settings.xml中配置信息</li></ul></li></ul><p>发布构件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h1 id="构建可执行jar"><a href="#构建可执行jar" class="headerlink" title="构建可执行jar"></a>构建可执行jar</h1><p>可执行的jar构建是指的通过java命令来执行运行jar构建，类似windows下的exe,Linux下的sh</p><p>在我们打包输出的hello-app-1.0.0 jar通过执行java -jar hello-app-1.0.0.jar输出信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//构建可执行jar</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span> //归档 java里面的</span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.soyanga.HelloApp3<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addExtensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addExtensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                                $&#123;project.name&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                                $&#123;project.version&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                                $&#123;project.groupId&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行打包命令，然后通过jave命令执行jar</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line">java -jar target\hello-app<span class="number">-1.0</span><span class="number">.0</span>.jar</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>从上面的输出信息可以看出，我们打包输出的jar现在可以通过jave命令执行了。</p><p>2.Maven创 java Web项目</p><p>maven创建web项目和应用项目不同的是web项目的打包类型通常是war,以及web项目的目录中有webapp目录用来归档web页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.0 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>2.2目录信息</p><h2 id="1-Maven管理目标"><a href="#1-Maven管理目标" class="headerlink" title="1.Maven管理目标"></a>1.Maven管理目标</h2><p>Maven的管理目标是工程，它是一个软件工程管理工具。对于maven来说，一个软件工程的唯一标识是由<strong>（标识项目写者）组标号（groupId）构件【项目】编号（artifadtId）,版本信息（version）</strong>共同决定的。每个工程都有一个<strong>打包类型</strong>(packaging)，可以是<strong>jar,war,ear或者pom</strong>.<strong>打包类型决定了工程最终产物的类型</strong>，其中<strong>pom类</strong>型用于构建<strong>多模块工程</strong>。工程之间由两种关系：<strong>继承和聚合</strong></p><h2 id="1-1工程依赖关系"><a href="#1-1工程依赖关系" class="headerlink" title="1.1工程依赖关系"></a>1.1工程依赖关系</h2><p>依赖关系的管理是maven最精髓的地方。一个工程可以依赖多个其他工程，通过过工程的唯一标识</p><p>（groupId+artifactId+version）可以明确指明依赖的库及版本，而且能够处理依关系的传递。maven可以指定依赖的作用范围（scope），包括以下几种：</p><table><thead><tr><th>scope</th><th>编译阶段</th><th>测试阶段</th><th>运行</th><th>备注</th></tr></thead><tbody><tr><td>compile</td><td>v</td><td>v</td><td>v</td><td>默认scope</td></tr><tr><td>test</td><td></td><td>v</td><td></td><td>只在测试期依赖，如junit包</td></tr><tr><td>provided</td><td>v</td><td>v</td><td></td><td>运行期由服务器提供，如servlet-api包</td></tr><tr><td>runtime</td><td></td><td>v</td><td>v</td><td>编译器件不需要直接引用</td></tr><tr><td>system</td><td>v</td><td>v</td><td></td><td>编译和测试时由本机环境提供</td></tr></tbody></table><p>maven的依赖关系管理解决了一下重要问腿：</p><ul><li>工程依赖的版本管理</li><li>工程依赖种同一个工程的多版本依赖的冲突问题 -优先高版本</li><li>提供了标准的依赖关系的定义 </li></ul><h2 id="1-2工程聚合与继承"><a href="#1-2工程聚合与继承" class="headerlink" title="1.2工程聚合与继承"></a>1.2工程聚合与继承</h2><p>聚合：pom类型的工程用于构建多模块的工程，这体现了project之间的一种聚合关系：将一系列小的模块聚合成整个产品。通过聚合后的工程可以同时管理每个模块的构建、清理、文档等工作。</p><p>继承：上文提到的pom类型的工程同样可以定义多模块的工程配置信息，其中作为模块的工程的父模块被多模块继承，此时多模块就是该pom类型的工程的子工程，子工程可以复用父工程的配置信息。</p><h1 id="2-Mave核心概念"><a href="#2-Mave核心概念" class="headerlink" title="2.Mave核心概念"></a>2.Mave核心概念</h1><h1 id="2-1Pom"><a href="#2-1Pom" class="headerlink" title="2.1Pom"></a>2.1Pom</h1><p>POM是指<code>porject object Model</code>。pom是一个xml，是maven工作的基础，在执行goal时，maven会去项目的根目录下读取pom.xml获得需要得<strong>配置信息.pom</strong>文件中包含了<strong>项目得信息</strong>和m<strong>aven build项目所需的配置信息</strong>，通常有<strong>项目信息（如版本，成员）</strong>，<strong>项目的依赖</strong>，<strong>插件和goal</strong>，<strong>bulid选项等</strong>等pom是<strong>可以继承</strong>的，通常对于一个大型项目或是多个module情况，<strong>子模块的pom需要指定父模块的pom</strong>。</p><blockquote><p>通过实际操作来讲述POM组成</p></blockquote><h2 id="2-2构件（artifact）"><a href="#2-2构件（artifact）" class="headerlink" title="2.2构件（artifact）"></a>2.2构件（artifact）</h2><p>构件就是一个项目将要产生的文件，可以是jar文件，源文件，二进制文件，war文件，甚至是pom文件。每个artifact都是由<strong>groupId:artifactId:version</strong>组成的标识符唯一识别。需要被使用（依赖）的artifact都放在仓库中。</p><p>artifact的标识也成为构件的坐标，<strong>groupId通常使用创建构件的组织名称或者域名的反转</strong>（比如 org.springframework）;<strong>artifactId是构件的名称</strong>，通常在一个组织创建的构件中是唯一的（比如：spring-4.0.9.RELEASE）</p><p>同一个构件的不同版本：</p><h2 id="2-3仓库"><a href="#2-3仓库" class="headerlink" title="2.3仓库"></a>2.3仓库</h2><p>仓库主要用于获取工程依赖的其他工程的生成物，也可以来部署（deploy）maven工程的生成物。生成物包括各种打包的生成物以及pom文件。如果有必要，一个工程可以部署多个仓库</p><p>仓库可以分为本地库(local)和远程仓库(remote)。本地库通常用于本机的~/.m2/repository文件夹（可以通过settings.xml中的localRepository进行修改），远程库最常见的是maven中央库，此外也会有一些私服库用于企业内部</p><p>常用的仓库列表：</p><ul><li>Maven在线检索：<a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></li><li>中央仓库：<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>阿里：<a href="http://maven.aliyun.com/nexus/cotent/groups/public" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/cotent/groups/public</a></li><li>开源中国：<a href="http://maven.oschina.net/content/groups/public" target="_blank" rel="noopener">http://maven.oschina.net/content/groups/public</a></li><li>Spring社区：<a href="http://maven.spingframework.org/relese" target="_blank" rel="noopener">http://maven.spingframework.org/relese</a></li></ul><h2 id="2-4构件生命周期（Bulid-Liftcycle）"><a href="#2-4构件生命周期（Bulid-Liftcycle）" class="headerlink" title="2.4构件生命周期（Bulid Liftcycle）"></a>2.4构件生命周期（Bulid Liftcycle）</h2><p>maven将工程的构键过程理解为<strong>不同的生命周期和阶段</strong>。在工程的构建过程中，<strong>存在着不同的生命周期，这些生命周期互相独立，之间也没有一定的顺序关系。在每个生命周期又划分为不同的阶段。阶段之间又明确的顺序关系，同一个生命周期内的阶段必须按顺序依次执行。</strong></p><p>maven内置了三个生命周期，并为每个生命周期内置了一些阶段。下面列举出maven内置的生命周期及主要的阶段</p><p>default</p><p>clean</p><p>site</p><h2 id="2-5目标（goal）和插件（plugin）"><a href="#2-5目标（goal）和插件（plugin）" class="headerlink" title="2.5目标（goal）和插件（plugin）"></a>2.5目标（goal）和插件（plugin）</h2><p>Maven中定义的工程中定义了工程周期和阶段是抽象概念，不涉及具体的功能。具体的功能由插件（Plugin）实现目标代表了特定的任务，一个插件可以实现多个目标(Goal)</p><p>为了解插件的功能和共工程阶段，实现高度的可配置性，maven规定插件只是实现目标功能，通过配置来决定在那个阶段执行(Execution)那些目标操作。甚至把一个Goal绑定到多个Phase，以实现复用。</p><p>maven内置可一些默认的插件，并根据不同的工程<strong>packing类型</strong>在各个<strong>phase中默认绑定一些goal</strong>。下表列出default生命周期中各个阶段默认绑定的goal，其中goal按照惯例使用pluguname:goalname的方式标记。</p><p><strong>maven的插件是一种packaging</strong>类型为<strong>maven-plugin的特殊类型工程</strong>，它和普通的<strong>maven工程在使用maven的方法和特性一样的</strong>，不同之处是它<strong>服务与maven工具</strong>，可以通过<strong>常见maven插件</strong>来完成<strong>定制化的工程构件</strong>，<strong>管理的功</strong>能。</p><h1 id="3-Maven常用操作"><a href="#3-Maven常用操作" class="headerlink" title="3.Maven常用操作"></a>3.Maven常用操作</h1><ul><li>mvn clean 清理构件目录 target目录清除</li><li>mvn compile 编译源代码</li><li>mvn test-compile编译测试代码</li><li>mvn test 运行单元测试</li><li>mvn package运行打包</li><li>mvn install 运行安装，生成构建存储都本地仓库</li><li>mvn clean package 清理然后打包</li><li>mvn clean package -Dmaven.test.skip=true清理然后打包，但是跳过测试阶段</li><li>mvn site生成项目站点   3.3 /3.7有bug  使用2.2 或者3.7.1 或者使用以下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--site生成项目网站--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span>  <span class="comment">&lt;!--中文形式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- site3.3 3.7 使用一下方法site 原因这个插件更新后的的bug--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure><!--more-->]]></content>
      
      
      <categories>
          
          <category> Java EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 代码管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-各种协议报头图</title>
      <link href="/2019/01/23/%E7%BD%91%E7%BB%9C-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4%E5%9B%BE/"/>
      <url>/2019/01/23/%E7%BD%91%E7%BB%9C-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络模型（OSI-TCP-IP分层结构）"><a href="#网络模型（OSI-TCP-IP分层结构）" class="headerlink" title="网络模型（OSI/TCP/IP分层结构）"></a>网络模型（OSI/TCP/IP分层结构）</h1><p><img src="/2019/01/23/网络-各种协议报头图/OSI、TCP_IP参考模型.png" alt="OSI、TCP_IP参考模型"></p><a id="more"></a><h1 id="数据报的封装和解包分用"><a href="#数据报的封装和解包分用" class="headerlink" title="数据报的封装和解包分用"></a>数据报的封装和解包分用</h1><p><img src="/2019/01/23/网络-各种协议报头图/封装解包分用.png" alt="封装解包分用"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="DHCP-UDP-长度超过512字节使用TCP"><a href="#DHCP-UDP-长度超过512字节使用TCP" class="headerlink" title="DHCP-(UDP/长度超过512字节使用TCP)"></a>DHCP-(UDP/长度超过512字节使用TCP)</h2><p><strong>动态主机配置协议</strong></p><p>一、为主机申请IP:DHCP态主机配置协议</p><ol><li><p>假设主机最开始并没有连接网络，所以主机需要获取IP地址以及其他信息，那么就需要先使用DHCP来获取。</p></li><li><p>主机生成一个<strong>DHCP请求报文</strong>，并将这个报文放入具有<strong>目的的端口号67</strong>和<strong>源端口号68</strong>的<strong>UDP报文中。</strong></p></li><li><p>该报文文段被放入在一个具有<strong>广播IP目的地址（255.255.255.255）</strong>和<strong>源IP地址（0.0.0.0</strong>）的<strong>IP数据报中</strong></p></li><li><p>包含DHCP请求报文的IP据报则被放置在<strong>MAC帧</strong>中。这个以太网帧具有<strong>目的地址MAC地址FF.FF.FF.FF.FF.F</strong>F使该帧将广播到交换机连接的所有设备</p></li></ol><p>   <strong>以上过程就是将DHCP请求报文一层一层做封装（添加了UDP报头，IP报头字段，数据帧报头字段）</strong> </p><ol start="5"><li><p>连接在<strong>交换机的DHCP服务器</strong>收到广播帧之后，不断向上分解得到<strong>IP数据报</strong>，<strong>UDP数据段，DHCP请求报文</strong> ，之后DHCP服务器生成DHCP,ACK报文。DHCP服务器能够以<strong>CIDR块</strong>的形式（服务器IP子 按位与 服务器子网掩码获取子网地址的范围，并取地址分配给<strong>主机IP地址</strong>）</p><blockquote><p>该报文包含以下信息：</p><ul><li><p><strong>IP地址</strong></p></li><li><p><strong>DNS服务器得IP地址</strong></p></li><li><strong>默认网关路由器的IP地址（第一跳的IP地址）</strong></li><li><strong>子网块==子网掩码</strong></li></ul></blockquote></li></ol><ol start="6"><li>将ACK报文向下进行依次封装成UDP报文段，IP报文，MAC帧,这个以太网帧中<strong>目的地址为主机MAC地址</strong>，<strong>源地址为路由器中的DHCP服务器地址</strong>。</li></ol><p>   <strong>得到的MAC帧进行解包，分用处理，然后应用程DHCP服务器给出响应ACK报文再次向下封装发送回个主机，其中包含的内容如上。</strong> </p><ol start="7"><li><p>包含DHCP ACK报文的<strong>MAC帧</strong>由路由器发送给交换机。交换机是自学习的，并且先前从主机收到的包含DHCP请求的MAC帧，所以交换机知交换机表中查询到，该向那个接口发送该MAC帧。</p></li><li><p>主机接收到包含DHCP的MAC帧，从连路层层层向上解包分用，IP报文，UDP报文段，从UDP报文段中抽取DHCP ACK报文。此时主机的DHCP客户端记录其中的IP地址和DNS服务器的IP地址，在主机的<strong>IP转发表(路由表)</strong>中安装默认网关地址。此时，主机已经初始化所有网络组件，并且准备开始处理web页面的获取。</p></li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h2 id="HTTP报头"><a href="#HTTP报头" class="headerlink" title="HTTP报头"></a>HTTP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><ul><li></li><li>URL</li></ul><p><img src="/2019/01/23/网络-各种协议报头图/URL-网址.png" alt="URL-网址"></p><h1 id="传出层"><a href="#传出层" class="headerlink" title="传出层"></a>传出层</h1><h2 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/UDP报文图.png" alt="UDP报文图"></p><h2 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/TCP协议格式.png" alt="TCP协议格式"></p><ul><li>面向连接过程中为什么要3次握手？</li></ul><ul><li>断开连接时要四次挥手为什么要四次挥手？</li></ul><ul><li>4次挥手主动断开的一方要进入TIME_WAIT为什么要进入TIME_WAIT</li></ul><blockquote><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态</li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值</li></ul></li></ul></blockquote><ul><li>TCP异常问题的解答，客户端进程结束，机器重启，机器断电/网络断开 1</li></ul><blockquote><p>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p></blockquote><blockquote><p>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p></blockquote><ul><li><p>收发数据时，对方接收缓冲区已经满了，我们无法发送数据。那么此时我们什么时候发？此时怎么知道对方的接收窗口已经有数据更新了？</p><blockquote><p> 如果接收端缓冲区满了, 就会将窗⼝大小置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</p></blockquote></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP报头"><a href="#IP报头" class="headerlink" title="IP报头"></a>IP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/IP协议头格式.png" alt="IP协议头格式"></p><ul><li>IP分片，重组</li></ul><ul><li>解决IP地址数量限制</li></ul><ul><li>路由</li></ul><h2 id="ICMP报头"><a href="#ICMP报头" class="headerlink" title="ICMP报头"></a>ICMP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/ICMP报文格式.png" alt="ICMP报文格式"></p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><img src="/2019/01/23/网络-各种协议报头图/ARP数据报格式.png" alt="ARP数据报格式"></p><h2 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h2><p><img src="/2019/01/23/网络-各种协议报头图/以太网网络帧格式.png" alt="以太网网络帧格式"></p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> 图解协议报头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络重点知识总结</title>
      <link href="/2019/01/23/%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/01/23/%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络层ICMP协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82ICMP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82ICMP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p><strong>网络层协议！！！！</strong></p><p>适用于：一个新搭建的好的网络，往往需要先进行一个简单的测试，来验证网络是否畅通；但是IP协议并不提供可靠传输。如果丢包了，IP协议并不能通知传输层是否丢包以及丢包的原因。</p><h2 id="ICMP功能"><a href="#ICMP功能" class="headerlink" title="ICMP功能"></a>ICMP功能</h2><p>ICMP正是提供这种功能的协议；ICMP协议主要功能如下：</p><blockquote><ul><li>确认IP包是否成功到达目标地址</li><li>通知在发送过程中IP包被丢弃的原因</li><li>ICMP也是基于IP协议工作的。但是他并不是提供传输层的功能，所以ICMP协议是网络层协议</li><li>ICMP只能搭载IPv4使用，如果是IPb6的情况要使用的是ICMPv6;</li></ul></blockquote><h2 id="ICMP工作流程"><a href="#ICMP工作流程" class="headerlink" title="ICMP工作流程"></a>ICMP工作流程</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP工作流程.png" alt="ICMP工作流程"></p><h2 id="ICMP报文格式"><a href="#ICMP报文格式" class="headerlink" title="ICMP报文格式"></a>ICMP报文格式</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP报文格式.png" alt="ICMP报文格式"></p><a id="more"></a><p>ICMP大概分为两类报文：</p><blockquote><ul><li>一类是通知出错原因</li><li>一类是用于诊断查询</li></ul></blockquote><h3 id="ICMP报文类型字段"><a href="#ICMP报文类型字段" class="headerlink" title="ICMP报文类型字段"></a>ICMP报文类型字段</h3><table><thead><tr><th>类型（十进制）</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>回送应答</td></tr><tr><td>3</td><td>目标不可达</td></tr><tr><td>4</td><td>原点抑制</td></tr><tr><td>5</td><td>重定向或改变路由</td></tr><tr><td>8</td><td>回送请求</td></tr><tr><td>9</td><td>路由器公告</td></tr><tr><td>10</td><td>路由器请求</td></tr><tr><td>11</td><td>超时</td></tr><tr><td>17</td><td>地址子网请求</td></tr><tr><td>18</td><td>地址子网应答</td></tr></tbody></table><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ping实际操作.png" alt="ping实际操作"></p><blockquote><ul><li>此处的ping连接的是一个域名，而不是一个url，一个域名可以通过DNS解析成IP地址</li><li>ping命令不光校验网络的连通性，同时也会统计响应时间和TTL（IP包中的Time TO Live,生存周周期（IP层跳跳次数））</li><li>ping命令会先发送一个ICMP回送请求给对端，即报文的类型填写的是8</li><li>‘对端接收后会返回一个ICMP 回送应答。</li></ul></blockquote><p>ping命令基于ICMP协议是是实现， 是在网络层. 而端口号, 是传输层的内容. 在ICMP中根本就不关注端口号这样的信息。</p><h2 id="traceroute命令"><a href="#traceroute命令" class="headerlink" title="traceroute命令"></a>traceroute命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/traceroute实际操作.png" alt="traceroute实际操作"></p><p>能够打印出可执行程序主机，一直到目标主机之前经历了多少路由器。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> ICMP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他重要协议和技术</title>
      <link href="/2019/01/22/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/01/22/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h1><p>应用层协议-DNS是一整套从域名映射到IP的系统</p><h2 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h2><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h2 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h2><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><a id="more"></a><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后，发生的事情"><a href="#浏览器中输入URL之后，发生的事情" class="headerlink" title="浏览器中输入URL之后，发生的事情"></a>浏览器中输入URL之后，发生的事情</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li>DNS域名解析</li><li>所以就要先建立连接（三次握手）</li><li>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h2 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h2><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h2 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h2><p>欠一张转换图</p><p>NAPT</p><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h2 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h2><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在热备, 所有的TCP连接也都会断开</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> DNS协议 </tag>
            
            <tag> NAT技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络链路层ARP协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82ARP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82ARP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/22/网络链路层ARP协议/ARP缓存表.png" alt="ARP缓存表"></p><a id="more"></a><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> ARP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-数据链路层以太网协议</title>
      <link href="/2019/01/22/%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/22/%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]</p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h4 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h4><p><img src="/2019/01/22/网络-数据链路层以太网协议/以太网网络帧格式.png" alt="以太网网络帧格式"></p><a id="more"></a><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比地址和ip地址的"><a href="#对比地址和ip地址的" class="headerlink" title="对比地址和ip地址的"></a>对比地址和ip地址的</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP</p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</li><li>TCP在建立连接的过程中, 通信双方会进行MSS协商. </li><li>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </li><li><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></li></ul><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p><ul><li>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> 以太网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-网络层IP协议</title>
      <link href="/2019/01/21/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/21/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/21/网络-网络层IP协议/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/21/网络-网络层IP协议/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</li><li><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做<strong>DHCP</strong>，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/21/网络-网络层IP协议/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> IP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-TCP扩展</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-TCP%E6%89%A9%E5%B1%95/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-TCP%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h2><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><a id="more"></a><h2 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h2><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区⾥等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><p>粘包问题</p><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h2 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h2><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
          <category> TCP/UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-传输层TCP协议(2)</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(2)/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(2)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h1><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/TCP连接流程图.png" alt="TCP连接流程图"></p><h2 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h2><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><a id="more"></a><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h2 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h2><p><strong>在什么状态干什么事</strong></p><h3 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h3><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h3 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h3><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很⼤数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><p>确认应答机制（ACK）机制详解</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h3 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h3><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太端，就可能影响整提的重传效率</p><p><strong>TCP为了保证无论在任何环境下都能⽐较⾼性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li><em>如果仍然得不到应答, 等待 4</em>500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h3 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h3><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和特高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，超时重传虽然慢了点，但是可以确保有效性，可靠性。</p><p>流量控制（Flow Control）</p><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，谈谈接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增⻓长的那么快, 因此不能使拥塞窗⼝口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, ⽽而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h1 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h1><h2 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h2><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><p>提高性能</p><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h2 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h2><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h2 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h2><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
          <category> TCP/UDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络-传输层TCP协议(1)</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(1)/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(1)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/20/网络-传输层TCP协议(1)/TCP协议格式.png" alt="TCP协议格式"></p><a id="more"></a><ul><li>源/目的端口号：表示数据从那个进程来，到那个进程去</li><li>32位序号/32位确认号：如下详谈超时重插，去重，数据的顺序到达</li><li>4位TCP报头长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li>6位标志位<ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li>16位窗口大小：：如下详谈流量控制</li><li>16位校验和: 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li>16位紧急指针: 标识哪部分数据是<strong>紧急数据</strong>;</li><li>40字节头部选项: 暂时忽略; </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经建立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> TCP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>‘网络-传输层UDP协议协议‘</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82UDP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82UDP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><p>UDP协议端格式:</p><p><img src="/2019/01/20/网络-传输层UDP协议/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h2 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h2><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h2 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h2><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h2 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h2><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h2 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h2><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li>DNS: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
            <tag> UDP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础(2)</title>
      <link href="/2019/01/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-2/"/>
      <url>/2019/01/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络基础2"><a href="#网络基础2" class="headerlink" title="网络基础2"></a>网络基础2</h1><ul><li><p>理解应⽤用层的作用, 初识HTTP协议 </p></li><li><p>理解传输层的作用, 深入理解TCP的各项特性和机制 </p></li><li><p>理解网络层的作用, 深入理解IP协议的基本原理 </p></li><li><p>理解数据链路层的作⽤用, 了解ARP协议 </p></li><li><p>对整个TCP/IP协议有系统的理解 </p></li><li><p>对TCP/IP协议体系下的其他重要协议和技术有一定的了解 </p></li><li><p>学会使⽤用一些分析网络问题的工具和方法</p><p>注意!! 注意!! 注意!! </p></li><li><p>网络编程的理论基础. </p></li><li><p>是一个服务器开发程序员的重要基本功.</p></li></ul><p>  自顶向下讲解：</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>我们写一个解决我们实际问题, 满足我们日常需求的网络程序, 都是在应用层。</p><h2 id="再谈“协议”"><a href="#再谈“协议”" class="headerlink" title="再谈“协议”"></a>再谈“协议”</h2><p>协议是一种 “约定”. socket api的接口, 在读写数据时, 都是按 “字符串” 的方式来发送接收的。我们约定客户端先发送，服务器先接收。是一种客户端与服务器之间的约定。</p><h2 id="网络版计算器"><a href="#网络版计算器" class="headerlink" title="网络版计算器"></a>网络版计算器</h2><p>我们需要实现⼀个服务器版的加法器. 我们需要客户端把要计算的两个加数发过去, 然后由服务器进行计算, 最后再把结果返回给客户端. </p><p>约定方案一：<strong>约定指定格式 </strong> </p><ul><li>客户端发送一个形如”1+1”的字符串;</li><li>这个字符串中有两个操作数, 都是整形; </li><li>两个数字之间会有一个字符是运算符, 运算符只能是 + ; </li><li>数字和运算符之间没有空格;</li></ul><p>约定方案二：<strong>TCP:面向字节流</strong>  :raising_hand_man:</p><ul><li>定义结构体来表⽰示我们需要交互的信息; </li><li>发送数据时将这个结构体按照一个规则转换成字符串, 接收到数据的时候再按照相同的规则把字符串转化回结构体; </li><li>这个过程叫做 “序列化” 和 “反序列化”</li></ul><p>序列化反序列化：JOSN /XML  </p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP（超文本传输协议）</p><p>认识URL–网址</p><p><img src="/2019/01/18/网络基础-2/URL-网址.png" alt="URL-网址"></p><h2 id="urlencode和urldecode"><a href="#urlencode和urldecode" class="headerlink" title="urlencode和urldecode"></a>urlencode和urldecode</h2><p>象/？：等这样的字符在URL中是特殊意义理解，因此该字符不能随意出现。假如要出现必须对带有这些特殊字符进行转义。</p><p>转义规则如下：</p><p>讲需要转码的字符串为16进制，然后从右象左，取4位（不足4位直接处理），每2位做一位，前面加上%，编码最后变成 <code>%XY</code>格式</p><p>例如：</p><p><img src="/2019/01/18/网络基础-2/1547866578248.png" alt="1547866578248"></p><p>？后面的参数将我搜索的内容”<code>C++</code>“中的”<code>+</code>“转变为了”<code>%2B</code>“</p><p>urldecode就是 urlencode的逆过程；可以进行反转义    </p><p><a href="http://tool.chinaz.com/Tools/urlencode.aspx" target="_blank" rel="noopener">URL解码工具</a></p><a id="more"></a><h2 id="HTTP协议格式"><a href="#HTTP协议格式" class="headerlink" title="HTTP协议格式"></a>HTTP协议格式</h2><p>HTTP请求</p><p><img src="/2019/01/18/网络基础-2/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><blockquote><ul><li>首行：[方法]+[URL]+[版本]</li><li>Header:请求的属性，冒号分割的键值对；每组属性之间使用\n分割，遇到空行表示Header部分结束</li><li>Body:空行后面的内容都是Body，Body允许为空字符串，如果Body存在，则则在Header中会有一个 <code>Content-Length</code>属性来标识<strong>Body的长度</strong>;  非GET方法正文部分是可以忽略的。</li></ul></blockquote><p>HTTP是基于<strong>请求响应式</strong>：</p><ul><li>短连接：客户端一请求，服务器一响应，服务器随即断开连接。</li><li>长连接：HTTP1.1优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接</li></ul><p>打开一个网页的过程（简要过程）</p><p>一张网页上有多个元素组成，一次次http请求只能上传一个元素的化（短连接），要看到一个·完整的网页。我们可能要经历多次请求，网页，显示过程-[文字，图片，样式，渲染…….]，效率太低。HTTP1.1以后对其进行了优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接。</p><p>HTTP协议底层是基于TCP协议的：HTTP协议不用关心丢包乱序问题。（应用层）</p><p>实践</p><p>Linux下使用telent工具：远程登陆某一台主机上的一个服务。</p><p>请求：</p><p><img src="/2019/01/18/网络基础-2/HTTP请求实践.png" alt="请求"></p><p>响应：</p><p><img src="/2019/01/18/网络基础-2/HTTP响应实践.png" alt="HTTP响应实践"></p><h2 id="HTTP常见方法"><a href="#HTTP常见方法" class="headerlink" title="HTTP常见方法"></a>HTTP常见方法</h2><table><thead><tr><th>方法</th><th>说明</th><th>支持HTTP协议版本</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>1.0 、1.1</td></tr><tr><td>POST</td><td>传输实体主体</td><td>1.0 、1.1</td></tr><tr><td>PUT</td><td>传输文件</td><td>1.0 、1.1</td></tr><tr><td>HEAD</td><td>获得报文首部</td><td>1.0 、1.1</td></tr><tr><td>DELETE</td><td>删除文件</td><td>1.0 、1.1</td></tr><tr><td>OPTIONS</td><td>询问支持的方法</td><td>1.1</td></tr><tr><td>TRACE</td><td>追踪路径</td><td>1.1</td></tr><tr><td>CONNECT</td><td>要求用隧道协议连接代理</td><td>1.1</td></tr><tr><td>LINK</td><td>建立和资源之间的联系</td><td>1.0</td></tr><tr><td>UNLINK</td><td>断开连接关系</td><td>1.0</td></tr></tbody></table><p>注：<strong>最常用的方法就是GET和POST方法。</strong> </p><p>某些版本没有某些方法是因为该版本处于安全考虑，不支持一些不安全方法。</p><h2 id="HTTP的状态码"><a href="#HTTP的状态码" class="headerlink" title="HTTP的状态码"></a>HTTP的状态码</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>informational(信息状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success(成功状态吗)</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirectio(重定向状态码)</td><td>需要进行附加操作已完成请求</td></tr><tr><td>4XX</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>最常⻅见的状态码, ⽐比如 200(OK), 404(Not Found), 403(Forbidden), 302(Redirect, 重定向), 504(Bad Gateway)</p><h4 id="重定向详解："><a href="#重定向详解：" class="headerlink" title="重定向详解："></a>重定向详解：</h4><p>3XX—Redirectio(重定向状态码)—重定向：</p><p>包头当中会响应一个叫location的字段，一旦浏览器收到这个报文，浏览器会二次发起一次请求。（页面跳转）</p><p><strong>重定向分为：</strong></p><ul><li>临时性重定向​ ​ 饭店临时搬家，贴一张告示临时迁至XXX，过一段时间就回来。先去东门后去西门，过一段时间回来东门:man_cook:  （每次吃饭要先去东门（源网站处，没搬回来），然后再去西门（临时性重定向处））</li><li>永久性重定向  饭店永久搬家，直接从东门搬至西门 :running_man:  ，以后直接去西门（永久性重定向）。</li></ul><p><strong>老板贴的告示：就如同服务器响应的报头中的location字段，（永久性，临时性由状态码体现3XX）</strong></p><h2 id="HTTP常见Header"><a href="#HTTP常见Header" class="headerlink" title="HTTP常见Header"></a>HTTP常见Header</h2><blockquote><ul><li>Content-Type: 正文数据类型(text/html等) HTTP服务器与客户端通信类型。</li><li>Content-Length: Body的长度 </li><li>Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上; </li><li>User-Agent: 声明用户的操作系统和浏览器版本信息; </li><li><strong>referer</strong>: 当前页⾯面是<strong>从哪个页面跳转过来的</strong>;</li><li><strong>location</strong>: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问; </li><li><strong>Cookie:</strong>  用于在客户端存储少量信息. 通常用于实现会话(session)的功能；</li></ul></blockquote><h2 id="实践简单HTTP服务器（Web服务器）"><a href="#实践简单HTTP服务器（Web服务器）" class="headerlink" title="实践简单HTTP服务器（Web服务器）"></a>实践简单HTTP服务器（Web服务器）</h2><p>实现一个最简单的HTTP服务器, 只在网页上输出 “hello world”; 只要我们按照HTTP协议的要求构造数据, 就很容易能做到；</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>传输层往下的网络层，链路层。都是在内核中的，操作系统实现的</p><p>负责数据能够从发送端传输接收端</p><h2 id="再谈端口号"><a href="#再谈端口号" class="headerlink" title="再谈端口号"></a>再谈端口号</h2><p>端口号（Port）标识了一个主机进行通信的不同应用程序；</p><p>在TCP/IP协议中，用<strong>”源IP“，”源端口号“，”目的IP“，”目的端口号“，”协议号“这样一个五组元素</strong>来通信标识（可以通过netstat - n查看）；</p><p>端口号是16位的整数</p><p>端口号的范围划分 </p><blockquote><ul><li>0-1023:知名端口号，HTTP,FTP,SSH等这些广为使用的应用层协议，他们的端口号都是固定的。</li><li>1024-65535：操作系统动态分配的端口号，客户端程序的端口号，就是由操作系统从这个范围分配的。</li></ul></blockquote><p>知名端口号（Well-know Port Number）</p><p>有些服务器是非常常用，为了使用方便，人们约定一些常用的服务器，都是以下这些固定的端口号：</p><blockquote><ul><li>ssh服务器，使用22端口号</li><li>ftp服务器，使用21端口号</li><li>telnet服务器，使用23端口号</li><li>http服务器，使用80端口号</li><li>https服务器，使用443端口号</li></ul></blockquote><p>查看知名端口号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat/etc/services</span><br></pre></td></tr></table></figure><p>一个进程可以绑定（bind）多个端口号,一个端口号不能被多个进程绑定</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>查看网络状态的重要工具</p><p>语法：netstat[选项]</p><p>功能：查看网络状态</p><p>常用选项：</p><blockquote><ul><li>n 拒绝显⽰示别名，能显⽰示数字的全部转化成数字</li><li>l 仅列出有在 Listen (监听) 的服務状态 </li><li>p 显⽰示建⽴立相关链接的程序名 </li><li>t (tcp)仅显⽰示tcp相关选项 </li><li>u (udp)仅显⽰示udp相关选项 </li><li>a (all)显⽰示所有选项，默认不显⽰示LISTEN相关</li></ul></blockquote><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>查看服务器的进程id</p><p>语法：pidof[进程名]</p><p>功能：通过进程名，查看进程id</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>UDP协议端格式</p><p><img src="/2019/01/18/网络基础-2/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h4 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h4><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h3 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h3><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h3 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h3><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li><strong>DNS</strong>: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/18/网络基础-2/TCP协议格式.png" alt="TCP协议格式"></p><ul><li><strong>源/目的端口号</strong>：表示数据从那个进程来，到那个进程去</li><li><strong>32位序号/32位确认号</strong>：如下详谈超时重查，去重，数据的顺序到达</li><li><strong>4位TCP报头长度</strong>：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li><strong>6位标志位</strong><ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li><strong>16位窗口大小</strong>：：如下详谈流量控制（接收者的接收缓冲区）</li><li><strong>16位校验和:</strong> 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li><strong>16位紧急指针</strong>: 标识哪部分数据是<strong>紧急数据</strong>;</li><li><strong>40字节头部选项</strong>: 暂时忽略; </li></ul><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p><h3 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h3><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/18/网络基础-2/TCP连接流程图.png" alt="TCP连接流程图"></p><h3 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h3><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h3 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h3><p><strong>在什么状态干什么事</strong></p><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h4 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h4><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很⼤数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><h3 id="确认应答机制（ACK）机制详解"><a href="#确认应答机制（ACK）机制详解" class="headerlink" title="确认应答机制（ACK）机制详解"></a>确认应答机制（ACK）机制详解</h3><p><img src="/2019/01/18/网络基础-2/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/18/网络基础-2/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/18/网络基础-2/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h4 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h4><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太断，就可能频繁发送重复的包。</p><p><strong>TCP为了保证无论在任何环境下都能比较高性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li>*如果仍然得不到应答, 等待 4**500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/18/网络基础-2/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h4 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h4><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和提高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，<strong>超时重传虽然慢了点</strong>，但是可以确<strong>保有效性，可靠性</strong>。</p><h3 id="流量控制（Flow-Control）"><a href="#流量控制（Flow-Control）" class="headerlink" title="流量控制（Flow Control）"></a>流量控制（Flow Control）</h3><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是发送端需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，探探接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1倍; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/18/网络基础-2/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增长的那么快, 因此不能使拥塞窗口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, 而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h2 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h2><h4 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h4><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><h4 id="提高性能"><a href="#提高性能" class="headerlink" title="提高性能"></a>提高性能</h4><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h4 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h4><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h3 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h3><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p><h3 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h3><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><h3 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h3><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区里等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><h3 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h3><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h3 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h3><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/18/网络基础-2/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/18/网络基础-2/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><p><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</p></li><li><p><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</p></li><li><p>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</p></li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做DHCP，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li><strong>DHCP</strong>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul><p>、</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]  </p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h3 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h3><p><img src="/2019/01/18/网络基础-2/以太网网络帧格式.png" alt="以太网网络帧格式"></p><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比MAC地址和ip地址"><a href="#对比MAC地址和ip地址" class="headerlink" title="对比MAC地址和ip地址"></a>对比MAC地址和ip地址</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP </p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li><p>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</p></li><li><p>TCP在建立连接的过程中, 通信双方会进行MSS协商. </p></li><li><p>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </p></li><li><p><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></p><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p></li><li><p>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</p></li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/18/网络基础-2/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/ARP缓存表.png" alt="ARP缓存表"></p><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/18/网络基础-2/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p><h1 id="其他重要协议或技术"><a href="#其他重要协议或技术" class="headerlink" title="其他重要协议或技术"></a>其他重要协议或技术</h1><h2 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h2><p>DNS是一整套从域名映射到IP的系统</p><h3 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h3><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h3 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h3><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后会发生什么"><a href="#浏览器中输入URL之后会发生什么" class="headerlink" title="浏览器中输入URL之后会发生什么"></a>浏览器中输入URL之后会发生什么</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li><p>DNS域名解析</p></li><li><p>所以就要先建立连接（三次握手）</p></li><li><p>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</p></li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h1 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h1><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h3 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h3><p>欠一张转换图</p><h3 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h3><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h3 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h3><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在设备, 所有的TCP连接也都会断</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议通讯流程</title>
      <link href="/2019/01/18/TCP%E5%8D%8F%E8%AE%AE%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/01/18/TCP%E5%8D%8F%E8%AE%AE%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议通讯流程"><a href="#TCP协议通讯流程" class="headerlink" title="TCP协议通讯流程"></a>TCP协议通讯流程</h2><p><strong>TCP要建立链接，就需要三次握手</strong> </p><p><strong>TCP保证可靠性：确认应答机制。</strong> </p><p><strong>TCP断开链接，需要4次握手</strong> </p><p>维护链接是要有成本，TCP比UDP消耗更大，因为保证可靠性</p><h3 id="问题：三次握手为什么不是2次呢，不是4次呢？"><a href="#问题：三次握手为什么不是2次呢，不是4次呢？" class="headerlink" title="问题：三次握手为什么不是2次呢，不是4次呢？"></a>问题：三次握手为什么不是2次呢，不是4次呢？</h3><p>客户端发起链接<strong>请求（SYN）</strong>，服务器对其<strong>响应</strong>（<strong>SYN+ACK</strong>），客户端再紧接着<strong>确认</strong>(<strong>ACK)</strong>。</p><p>客户端发起链接<strong>请求</strong>，服务器对其<strong>响应</strong>，在网络中报文可能丢失，</p><h4 id="为什么不是2次"><a href="#为什么不是2次" class="headerlink" title="为什么不是2次"></a>为什么不是2次</h4><p>客户端发送的报文丢失，链接失败</p><p>但是客户端发送（<strong>请求</strong>）给服务器的报文没丢失，且服务器发送的报文（<strong>响应</strong>）发出后，服务器认为已经建立链接，但是客户端此时并能没有接收报文（报文在网络中传输），客户端认为并没有建立起链接。</p><p>服务器认为链接建立好了，服务器就要求维护这个链接，<strong>服务器需要花成本去维护</strong>。，但是这个链接并不是双方认可的链接。</p><p>如果服务器发送的<strong>响应报文</strong>，丢失了，客户端认为并没有链接，就会继续发送<strong>一个新的请求报文</strong>给服务器。此时服务器接收到<strong>请求报文</strong>，发送自己的<strong>响应报文</strong> 给客户端客户,服务器又认为链接已经建立，就又会<strong>花成本维护</strong>一个这个链接。</p><p><strong>所以长此以往，服务器上就会有众多的闲时链接，导致服务器资源不够，服务器瘫痪。</strong></p><p><strong>两次握手有着致命的缺陷。</strong></p><p>2次握手情况下，假如人利用这种方式攻击服务器，服务器就会瘫痪，但是3次握手情况下服务器不会产生故障，攻击者也会得逞只会自己主机上会产生众多闲时链接自作自受。</p><p><strong>三次握手前两次发送报文丢失了，服务器客户端不会认为链接已经建立。不会发生上述情况。</strong></p><p><strong>分析最后一次确认链接报文发送过程中丢失了</strong>，客户端认为链接成功，服务器认为报文丢失了链接失败了。</p><p>此时会发生以上的相反情况，客户端上就会有众多的闲时链接。</p><p>但是服务器永远是多个客户端链接的，一对多的。得保证服务器的安全，所以是三次。</p><h4 id="为什么不是4次-6-8"><a href="#为什么不是4次-6-8" class="headerlink" title="为什么不是4次 /6/8"></a><strong>为什么不是4次</strong> <strong>/6/8</strong></h4><p>这个就像是踢球一样，在谁的脚下发起最后的射门，谁就有责任对这个求负责。</p><p>最后一次链接谁发决定谁可能会产生闲时链接。</p><h4 id="为什么不是5次7次"><a href="#为什么不是5次7次" class="headerlink" title="为什么不是5次7次"></a>为什么不是5次7次</h4><p>没有必要这样，3次握手已经可以避免上述服务器瘫痪的操作，5次7次就很多余而且还会导致链接成功几率降低。</p><a id="more"></a><h2 id="如何理解："><a href="#如何理解：" class="headerlink" title="如何理解："></a>如何理解：</h2><p><strong>谈恋爱例子</strong></p><p>下面是基于TCP协议的客户端/服务器的一般流程：</p><p><strong>男方客户端</strong>  <strong>女方服务器</strong></p><p><strong>链接：</strong>  <strong>三次挥手</strong> </p><p>男方说咱们在一起吧（SYN）</p><p>女生说好的,什么时候(SYN+ACK)</p><p>男生说就现在（ACK）<strong>女生接受到后，此时才确认关系</strong> </p><p><strong>维护两个人的恋爱关系需要彼此双发都维护起来。彼此双方丢需要花费成本。</strong> </p><p><strong>断开链接：四次握手</strong>  </p><p>断开链接的过程是双发的过程。</p><p>男方一直打游戏不上进女生忍不下去了，要分手。</p><p>谁先提出分手都可以</p><p>女方该说的我都说了,我要和你分手（断开链接）（FIN）</p><p>男生说好的。（ACK）</p><p>男方说能做的我都做了，我也要和你分手（断开链接）（FIN）</p><p>女方说好的。（ACK）</p><p>三次握手（有了这个关系，才对我们保证可靠性提供前提条件）——&gt;TCP（可靠传输，面向链接）。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络套接字</title>
      <link href="/2019/01/18/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2019/01/18/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络编程套接字"><a href="#网络编程套接字" class="headerlink" title="网络编程套接字"></a>网络编程套接字</h1><h2 id="学习要点："><a href="#学习要点：" class="headerlink" title="学习要点："></a>学习要点：</h2><ul><li>认识IP地址，端口号，网络字节序等网络编程中的基本概念；</li><li>学习socket api的基本用法；</li><li>能够实现一个简单的udp客户端/服务器；</li><li>能够实现一个简单的tcp客户端/服务器（单连接版本，多进程版本，多线程版本）；</li><li>理解tcp服务器建立连接，发送数据，断开连接的流程；</li></ul><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP协议有两个版本，IPv4和IPv6。我们整个的课程，凡是提到IP协议，没有特殊说明的，默认都是IPv4</p><ul><li>IP地址是IP协议中，用来标识网络中不同主机地址；</li><li>对于IPv4来说，IP地址是一个4字节，32位整数；</li><li>我们通常也常用也使用“点分十进制”的字符串表示IP地址，例如 198.168.0.1;用点分割的每一个数字表示一个字节，范围是0-255；</li></ul><h3 id="理解源IP地址和目的的IP地址"><a href="#理解源IP地址和目的的IP地址" class="headerlink" title="理解源IP地址和目的的IP地址"></a>理解<strong>源IP地址</strong>和目的的IP地址</h3><p>IP数据包头部中，有两个IP地址，分别叫做源IP地址，和目的IP地址。</p><p>网络通信信息，不止只用IP地址标识，不能标识主机中的那个应用发送接收的消息。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口号（port）是传输层协议内容</p><ul><li>端口号是一个2字节16位的整数</li><li>端口号是用来标识一个进程，告诉操作系统，当前的这个数据要交给那一个进程来处理</li><li>IP地址+端口号能够标识网络上的某一台主机的某个进程</li><li>一个端口号能被一个进程占用</li></ul><p><strong>IP地址+端口号称之为socket</strong>  </p><p>socket是进程通信（跨网络）</p><p><strong>一个进程可以绑定多个端口号；单一个端口号不能被多个进程绑定</strong></p><h3 id="理解源端口号和目的端口号"><a href="#理解源端口号和目的端口号" class="headerlink" title="理解源端口号和目的端口号"></a>理解源端口号和目的端口号</h3><p>传输层协议（TCP和 UDP ）的数据段中有两个端口号，分别叫做源端口号和目的端口号，就是在描述“数据是谁发的，要发个给是谁”。</p><a id="more"></a><h2 id="认识TCP协议"><a href="#认识TCP协议" class="headerlink" title="认识TCP协议"></a>认识TCP协议</h2><p>我们先对TCP（Transmission Control Protocol传输控制协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>有连接</li><li>可靠传输</li><li>面向字节流</li></ul></blockquote><p><strong>定义数据再传输过程中的一些标准和细节问题</strong> </p><h2 id="认识UDP协议"><a href="#认识UDP协议" class="headerlink" title="认识UDP协议"></a>认识UDP协议</h2><p>此处了解一下UDP（User Datagram Protocol 用户数据报协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>无连接</li><li>不可靠传输</li><li>面向数据报</li></ul></blockquote><p><strong>两种协议区别：</strong></p><p>领导交给任务给下层员工例子。</p><ul><li><p>UDP一个交给别人做（无保证）-速度快</p></li><li><p>TCP一个自己认真做（有保证）-速度慢。</p></li></ul><p>自来水公司例子TCP，不关心数据的大小可调控数据传输大小，按字节流进行。——-面向字节流</p><p>送快递例子UDP，按完整的报文进行发送。——-面向数据报</p><h2 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h2><p>内存中的多字节数据相对于内存地址有大端和小端之分, 磁盘⽂文件中的多字节数据相对于⽂文件 中的偏移地址也有大端小端之分, <strong>网络数据流同样有大端小端之分</strong>. 那么<strong>如何定义网络数据流的地址</strong>呢? </p><blockquote><ul><li>发送主机通常将<strong>发送缓冲区中</strong>的数据按内存地址<strong>从低到⾼高的顺序</strong>发出; </li><li>接收主机把从网络上接到的字节依次保存在<strong>接收缓冲区</strong>中,也<strong>是按内存地址从低到高</strong>的顺序保存; </li><li>因此,网络数据流的地址应这样规定:<strong>先发出的数据是低地址,后发出的数据是高地址.</strong> </li><li>TCP/IP协议规定,网络数据流应采⽤用<strong>大端字节</strong>序,即<strong>低地址高字节</strong>.</li><li>不管这台主机是大端机还是小端机, 都<strong>会按照这个TCP/IP规定的网络字节序来发送/接收数据;</strong> </li><li>如果当前发送主机是<strong>小端, 就需要先将数据转成大端</strong>; 否则就忽略, 直接发送即可;</li></ul></blockquote><p>为了网路程序具有可以移植性，使同样的C代码在大端小端计算机上编译后都能正常运行，可以调用以下库函数<strong>做网络字节序和主机字节序的转换</strong></p><p><img src="/2019/01/18/网络套接字/C语言大端小段转换.png" alt="1547781909980"></p><ul><li>这些函数名很好记,h表⽰示host,n表⽰示network,l表⽰示32位⻓长整数,s表⽰示16位短整数。 </li><li>例如htonl表⽰示将32位的长整数从主机字节序转换为网络字节序,例如将IP地址转换后准备发送。</li><li>如果主机是小端字节序,这些函数将参数做相应的大小端转换然后返回; </li><li>如果主机是大端字节序,这些函数不做转换,将参数原封不动地返回。 </li></ul><h1 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h1><h2 id="Socket-API简介"><a href="#Socket-API简介" class="headerlink" title="Socket  API简介"></a>Socket  API简介</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>socket API是⼀一层抽象的网络编程接⼝口,适⽤用于各种底层网络协议,如IPv4、IPv6,以及后⾯面要讲的UNIX Domain Socket. 然⽽而, 各种网络协议的地址格式并不相同。</p><p>Sockaddr *指针 接收套接字，套接字有多种，所以我们用了不同的结构来表示不同的套接字。</p></blockquote><ul><li>IPv4和IPv6的地址格式定义在netinet/in.h中,IPv4地址⽤用sockaddr_in结构体表⽰示,包括16位地址类 型, 16位端⼝口号和32位IP地址. </li><li>IPv4、IPv6地址类型分别定义为常数AF_INET、AF_INET6. 这样,只要取得某种sockaddr结构体的 ⾸首地址,不需要知道具体是哪种类型的sockaddr结构体,就可以根据地址类型字段确定结构体中的内 容. </li><li>socket API可以都⽤用struct sockaddr *类型表⽰示, 在使⽤用的时候<strong>需要强制转化成sockaddr_in; 这样的 好处是程序的通⽤用性,</strong> 可<strong>以接收IPv4, IPv6, 以及UNIX Domain Socket各种类型的sockaddr结构体 指针做为参数;</strong> </li></ul><p><img src="/2019/01/18/网络套接字/不同套接字结构体.png" alt="不同套接字结构体"></p><h3 id="Sockaddr结构"><a href="#Sockaddr结构" class="headerlink" title="Sockaddr结构"></a>Sockaddr结构</h3><h3 id="Sckaddr-in结构"><a href="#Sckaddr-in结构" class="headerlink" title="Sckaddr_in结构"></a>Sckaddr_in结构</h3><blockquote><p>虽然socket api的接⼝口是sockaddr, 但是我们真正在基于IPv4编程时, 使⽤用的数据结构是sockaddr_in; 这个结构 ⾥里主要有三部分信息: <strong>地址类型, 端口号, IP地址.</strong></p></blockquote><h3 id="in-addr结构"><a href="#in-addr结构" class="headerlink" title="in_addr结构"></a>in_addr结构</h3><blockquote><p>in_addr⽤用来表⽰示⼀一个IPv4的IP地址. 其实就是⼀一个32位的整数;</p></blockquote><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>服务器端：</p><ul><li><p>创建 socket   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息 ,地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的IP地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机端口号序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理 // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接可以进行通信了</p></li><li><p>使⽤用sendto和recvfrom来进⾏行数据读写。</p></li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>先将网络序列转换为主机序列</li><li>socket的参数使⽤用SOCK_DGRAM表⽰示UDP </li><li>使用sendto和recvfrom来进⾏行数据读写</li></ul><h2 id="地址转换函数"><a href="#地址转换函数" class="headerlink" title="地址转换函数"></a>地址转换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><ul><li><p>创建 socket //返回一个文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>) <span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息，地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理  // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要进行连接(监听) ，并进行失败处理//开始监听socket (TCP, 服务器) </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(listen(sock,<span class="number">10</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"listen"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他主机向服务器发起连接请求，请求连接客户端，客户端接收请求信息，进入事件循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="comment">//传入绑定监听的套接字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"><span class="comment">//成功的话返回一个文件描述符（用于通信的文件描述符）</span></span><br></pre></td></tr></table></figure></li><li></li></ul><h2 id="Socket-API详解"><a href="#Socket-API详解" class="headerlink" title="Socket API详解"></a>Socket API详解</h2><p>下⾯面介绍程序中⽤用到的socket API,这些函数都在sys/socket.h中</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket():"></a>Socket():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>socket()打开一个网络通讯端⼝口,如果成功的话,就像open()一样返回⼀一个⽂文件描述符; </li><li>应⽤用程序可以像读写文件一样⽤用read/write在网络上收发数据;利用socket的返回值；</li><li>如果socket()调⽤用出错则返回-1；</li><li>对于IPv4,domain参数指定位AF_INET;</li><li>对于TCP协议，type参数指定为SOCK_STREAM, 表⽰示⾯面向流的传输协议 ;对于UDP协议,type参数指定为SOCK_DGRAM 表⽰示⾯面向数据报的传输协议。</li><li>protocol参数不了解</li></ul></blockquote><h3 id="bind"><a href="#bind" class="headerlink" title="bind():"></a>bind():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>服务器程序所监听的网络地址和端口号通常是固定不变的,客户端程序得知服务器程序的地址和端 口号后就可以向服务器发起连接; 服务器需要调⽤用bind绑定一个固定的网络地址和端口号; </li><li>bind()成功返回0,失败返回-1。 </li><li>bind()的作⽤用是将参数sockfd和addr绑定在⼀一起, 使sockfd这个⽤用于网络通讯的文件描述符监听 addrs所描述的地址和端⼝口号; </li><li>前⾯面讲过,struct sockaddr *是⼀一个通⽤用指针类型,addr参数实际上可以接受多种协议的sockaddr 结构体,⽽而它们的⻓长度各不相同,所以需要第三个参数aaddresslen指定结构体的长度; 。不同套接字有不同的套接字结构体.</li></ul></blockquote><p>但是传入不同的套接字结构体后，我们要结构体中的结构IP体协议类型，IP地址和端口号由主机序列转变为网络序列（默认是大端）。</p><p>方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h4 id="客户端bind"><a href="#客户端bind" class="headerlink" title="客户端bind()"></a>客户端bind()</h4><p>由于客户端不需要固定的端⼝口号,因此不必调⽤用bind(),客户端的端⼝口号由内核⾃自动分配. </p><p>注意: </p><blockquote><ul><li>客户端不是不允许调⽤用bind(), 只是没有必要调⽤用bind()固定⼀一个端⼝口号. 否则如果在同⼀一台机器上 启动多个客户端, 就会出现端⼝口号被占⽤用导致不能正确建⽴立连接; </li><li>服务器也不是必须调⽤用bind(), 但如果服务器不调⽤用bind(), 内核会⾃自动给服务器分配监听端口, 每次 启动服务器时端⼝口号都不⼀一样, 客户端要连接服务器就会遇到⿇麻烦; </li></ul></blockquote><h3 id="listen"><a href="#listen" class="headerlink" title="listen():"></a>listen():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>listen()声明sockfd处于监听状态, 并且最多允许有backlog个客户端处于连接等待状态, 如果接收到 更多的连接请求就忽略, 这⾥里设置不会太(一般是5), 具体细节同学们课后深⼊入研究; </li><li>listen()成功返回0,失败返回-1; </li></ul></blockquote><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>int listen(int sockfd, int backlog);中backlog：为什么一般会设为5。</p><p>保证服务器链接一直处于满载过程，利用率高。所以服务器要维护一个链接队列，连接队列维护也需要成本，所以链接队列也不能太长。</p><h3 id="accept"><a href="#accept" class="headerlink" title="accept():"></a>accept():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr* addr,  <span class="keyword">socklen_t</span>* addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>三次握手完成后,服务器调用accept（）接收连接；</li><li>如果服务器调用accept（）时还没有客户端的连接请求,就阻塞等待直到有客户端连接上来; </li><li>addr是一个传入参数,accept()返回时传出客户端的地址和端⼝口号;</li><li>如果给addr参数传入传出参数（value-result argument），传入调用者提供的，缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度(有可能没有占满调⽤用者提供的缓冲区); </li></ul></blockquote><p>理解accept的返回值：</p><p><strong>Linux中一切皆文件</strong> </p><blockquote><p><strong>返回值为一个文件描述符，文件描述符对应的是进程中打开文件。其中进程（结构体）中的打开的文件，与文件描述符（结构体）之间用一个数组指针对应维护起来，所以accept（）返回的int类型是维护这两者关系的一个数组指针的下标。就可以找到这个进程对应打开的文件。</strong> </p><p>这个数组在Linuxz内核中对应的是一个叫fd_array的数组。</p></blockquote><p>例子衣服店门口的占的拉客的导购员。</p><blockquote><p><strong>socket返回的文件描述符：用于socket接收新的连接的。</strong></p><p><strong>accept:返回的文件描述符，用于输入输出流。</strong></p><p><strong>不断的socket链接交给accept返回不同的用于输入输出流的文件描述符。</strong> </p></blockquote><p>利用read write来进行数据的读写操作。</p><p>read的返回值如果为0，表示对端断开了链接。</p><h3 id="connect-客户端"><a href="#connect-客户端" class="headerlink" title="connect():客户端"></a>connect():客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>客户端需要调⽤用connect()连接服务器; </li><li>connect和bind的参数形式一致, 区别在于bind的参数是自己的地址, 而connect的参数是对⽅方的地址; </li><li>connect()成功返回0,出错返回-1;</li></ul></blockquote><h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><ul><li><p>netstat -nlup 查看UDP链接</p></li><li><p>netstat -nltp 查看TCP链接</p></li></ul><p>实验测得的现象</p><ul><li>打开文件的生命周期是随进程的。文件就会被关闭，链接就会关闭</li></ul><h2 id="多进程版"><a href="#多进程版" class="headerlink" title="多进程版"></a>多进程版</h2><h4 id="多进程版解决思路："><a href="#多进程版解决思路：" class="headerlink" title="多进程版解决思路："></a>多进程版解决思路：</h4><p>在服务器端的事件循环里添加子进程，子进程区处理IO操作，父进程继续获得新连接。</p><p>在获取子进程时，会继承父进程的监听文件描述符，子进程只需要进行处理IO只需要IO处理的文件描述符。所有子进程关闭监听文件描述符，子进程完成IO操作就退出exit(0)即可。</p><p>父进程不需要IO操作只需要进程监听操作，父进程关闭IO文件描述符即可。</p><h3 id="会引发僵尸进程"><a href="#会引发僵尸进程" class="headerlink" title="会引发僵尸进程"></a>会引发僵尸进程</h3><p>但是子进程退出后，父进程还在不断进行监听操作，子进程此时退出后，资源还没有被父进程回收，子进程就会进入僵尸状态，资源就会被一直浪费。</p><h4 id="解决：（孤儿进程处理法）"><a href="#解决：（孤儿进程处理法）" class="headerlink" title="解决：（孤儿进程处理法）"></a>解决：（孤儿进程处理法）</h4><ul><li>wait():不行，阻塞式会让父进程进入阻塞状态，还得等到子进程退回出后父进程才能再次监听。:</li></ul><ul><li><p>在子进程中继续调用frok（）并让子进程退出，让孙子进程去执行IO操作。</p></li><li><p>父进程waitpid(id,NULL,0);等待的是子进程。</p></li><li><p>但是孙子进程会成为孤儿进程，被1号进程所领养。孙子进程进行IO完毕后，就会被1进程回收。（将回收操作交给操作系统）。</p></li></ul><h2 id="多线程版"><a href="#多线程版" class="headerlink" title="多线程版"></a>多线程版</h2><p>多进程系统消耗太大，所系我们用轻量级进程-线程</p><p>创建线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_create(&amp;tid,<span class="literal">NULL</span>,service,(<span class="keyword">void</span>*)fa); <span class="comment">//传入IO的文件描述符</span></span><br></pre></td></tr></table></figure><p>将线程进行分离：主线程也是要等待创建出来的其他线程，阻塞式，所以不行</p><p>那么我们就进行线程分离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(tid);</span><br></pre></td></tr></table></figure><p>在分离的线程里面进行，IO完成关闭文件描述符，最后线程进行退出。</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础(1)</title>
      <link href="/2019/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80(1)/"/>
      <url>/2019/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80(1)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络基础（1）"><a href="#网络基础（1）" class="headerlink" title="网络基础（1）"></a>网络基础（1）</h1><p><strong>重点：</strong></p><ul><li>网络发展背景，对局域网/广域网的概念有基本认识</li><li>了解网络协议的意义，重点理解TCP/IP五层结构模型</li><li>网络传输的基本流程，理解封装和分用</li></ul><h2 id="计算机网络背景"><a href="#计算机网络背景" class="headerlink" title="计算机网络背景"></a>计算机网络背景</h2><ul><li>在同一个局域网内两台主机是可以直接通信的。</li><li>任何一个在局域网上的主机，在不欠运营费的情况下是可以访问公网下的任意一台主机的。</li><li>不在同一个局域网的主机可以通信的原因，通过公网这座桥梁读写操作。</li></ul><p><strong>网络发展</strong></p><p><strong>独立模式</strong>：计算机之间相互独立；分别计算数据，把数据加工处理完后又必须拷贝到另一台机器。</p><p><strong>机器传输数据之间是人工过程，太过繁琐</strong></p><p><strong>网络互联:</strong> 多台计算机连接在一起, 完成数据共享，<strong>冯诺依曼体系（系统) 是网络</strong>，只是连接线不同。</p><p>但是<strong>长距离传输数据容易丢失</strong>，而且传输速度慢。解决–<strong>TCP协议：解决数据安全，丢包问题</strong>。<strong>IP解决查找问题。</strong> </p><p><strong>局域网LAN:</strong> 计算机数量更多了, 通过交换机和路由器连接在一起，<strong>交换机：</strong>最低层对数据进行数据帧交换。 </p><p><strong>广域网WAN:</strong> 将远隔千里的计算机都连在一起</p><p><strong>所谓</strong> “局域网” 和 “广域网” 只是一个相对的概念. 比如, 我们有 “天朝特色” 的广域网, 也可以看做一个比较大的局域网。</p><a id="more"></a><h2 id="认识协议"><a href="#认识协议" class="headerlink" title="认识协议"></a>认识协议</h2><p>“协议是一种<strong>约定</strong>“ -<strong>多方遵守的协议（数据层面的相关约定）</strong> </p><p>快递例子：</p><p><strong>买洗面奶：</strong> </p><p>（卖家把洗面奶包装发个快递公司，快递公司把（准确）快递发给买家，买家需要拆包装）</p><p>​                                                             <strong>封装                       分用                                  解包</strong> </p><p><strong>协议保证数据正确性：</strong> 计算机之间的传输媒介是光电信号，通过”频率“和”强弱“来表示0和1这样的信息，要像传递各种不同信息，就需要约定好双方的数据格式。</p><p><strong>方言例子：</strong> </p><blockquote><ul><li>计算机生产商有很多；</li><li>计算机操作系统，也很多；</li><li>计算机网络硬件设备，还有很多；</li><li>如何让这些不同厂商之间生产的计算机能够相互顺畅的通信? 就需要有人站出来, 约定一个共同的标准, 大家都来遵守, 这就是 <strong>网络协议;</strong> </li></ul></blockquote><h2 id="网络协议初始"><a href="#网络协议初始" class="headerlink" title="网络协议初始"></a>网络协议初始</h2><p><strong>协议分层-网络协议栈</strong> <strong>-层状结构</strong>-<strong>（网络工程中）功能上相互独立，逻辑上解耦</strong></p><p> 打电话例子</p><p>为了让和我们更好的使用协议，认识协议。网络上会使用分层。</p><p><strong>原因：</strong>通信过程中，<strong>有相同语言</strong> （一层协议比如<strong>汉语</strong>）</p><p>​       语音通过电话之间的协议（无线电协议）进行传输，传输给电话另一端的人（实现人-人通话）</p><p>​       当我们通过座机通话时，我们人语言方式还不变但是中间协议变了（座机协议）</p><p>​        分层作用达到软件工程解耦作用，一层出故障不会影响下层。你说话结巴了电话通信也断断续续的？</p><p><strong>网络协议一定时层状的</strong>，<strong>一定是同层协议之间的通信，直接通信。</strong> </p><p> <strong>分层最大的好处在于封装。</strong></p><h2 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h2><ul><li><strong>OSI</strong>(Open System Interconnection ,开放系统互连) 七层网络模型称为开放式系统互联参考模型，是一种逻辑上定义和规范</li><li><strong>把网络从逻辑上分为7层</strong>，每一层都有相关，相对应的物理设备，比如路由器，交换机；</li><li>OSI七层网络模型是一种<strong>框架性</strong>的设计方法，其主要的功能就是帮助不同类型的主机实现数据传输</li><li>它最大的优点是将<strong>服务，接口和协议</strong>这三个概念明确地<strong>区分</strong>开，概念清除，理论也比较完整，通过7个层次化地结构模型使不同系统不同网络之间实现可靠地通讯；</li><li>但是，它即复杂又不实用，所以我们来详细了解<strong>TCP/IP四层模型</strong>。</li></ul><h2 id="TCP-IP五层（或四层）模型"><a href="#TCP-IP五层（或四层）模型" class="headerlink" title="TCP/IP五层（或四层）模型"></a>TCP/IP五层（或四层）模型</h2><p>TCP/IP是一组协议的代名词，它还包括许多协议，组成了<strong>TCP/IP协议簇</strong>. TCP/IP通讯协议采⽤用了5层的层级结构，<strong>每⼀层都呼叫它的下一层所提供的网络</strong>来完成自己的需求. </p><p><img src="/2019/01/16/网络基础(1)/OSI、TCP_IP参考模型.png" alt="OSI、TCP_IP参考模型"></p><p>一般而言</p><ul><li>对于一台主机, 它的<strong>操作系统内核</strong>实现了从<strong>传输层到物理层</strong>的内容; </li><li>对于一台<strong>路由器</strong>, 它实现了从<strong>网络层到物理层</strong>; </li><li>对于一台<strong>交换机</strong>, 它实现了从<strong>数据链路层到物理层</strong>; </li><li>对于<strong>集线器</strong>, 它只实现了<strong>物理层</strong>; </li></ul><p>理解：</p><p><strong>路由器：</strong>在网络层，网络包，网络包转发。</p><p><strong>交换机：</strong>工作在局域网，转发数据帧。</p><p><strong>集线器：</strong>物理层，解决长距离传输信号变弱。，增强信号。</p><p>但是并不绝对. 很多<strong>交换机也实现了网络层的转发</strong>; 很多<strong>路由器也实现了部分传输层的内容(比如端口转发</strong>);</p><h2 id="网络传输基本流程"><a href="#网络传输基本流程" class="headerlink" title="网络传输基本流程"></a>网络传输基本流程</h2><h3 id="网络传输流程图"><a href="#网络传输流程图" class="headerlink" title="网络传输流程图"></a>网络传输流程图</h3><p>同一个网段内的两台主机进行文件传输</p><table><thead><tr><th style="text-align:left">应用层                                   TeInet、FTP和e-mail等 Http 、SSH</th></tr></thead><tbody><tr><td style="text-align:left">传输层                                    TCP和UDP     –负责网路传输</td></tr><tr><td style="text-align:left">网络层                                     IP、ICMP和IGMP</td></tr><tr><td style="text-align:left">链路层                                     设备驱动程序及接口卡  –网卡驱动、数据帧</td></tr></tbody></table><h3 id="局域网通信"><a href="#局域网通信" class="headerlink" title="局域网通信"></a>局域网通信</h3><p><strong>以太网：</strong>这种基于冲突检测的网络称之为以太网。</p><p><strong>所有用户向局域网发送数据</strong></p><ul><li>发生冲突，采用冲突避免算法进行处理</li><li>若没有发生冲突，或者冲突已经解决就会直接可以进行通信。</li><li>避免冲突算法：分时间发送数据</li></ul><p>在局域网通信中每个主机在底层都有<strong>一个唯一的标识符</strong>——网卡中的序列号：MAC地址（全球唯一的地址）</p><p><strong>混杂模式的网卡：</strong>可以抓取任意一个在局域网中的包。</p><h2 id="数据的解包分用的过程"><a href="#数据的解包分用的过程" class="headerlink" title="数据的解包分用的过程"></a>数据的解包分用的过程</h2><p><strong>任何通信的行为都是从上层驱动的。</strong></p><p><strong>例子：图在下端</strong></p><p>A客户端（应用层）发送向客户端B一个请求</p><p>（<strong>发送信息</strong>）A客户端发送的信息从应用层<strong>一层一层</strong>的（<strong>封装</strong>）发送到最底层链路层，然后再发到以太网上去，</p><p>B客户端从链路层中获取的数据向上<strong>一层一层</strong>（<strong>解包，分用</strong>）的发送到B客户端的应用层。(<strong>获取信息</strong>)</p><p><strong>CPU：</strong>对数据进行封装处理，数据在内存中发送给网卡。</p><p>​    网卡中的信息发送到，内存中，CPU进行解包处理。</p><p><strong>封装：</strong> </p><p>当前层添加<strong>报头</strong>，（<strong>应用层</strong>）上层添加<strong>有效载荷</strong>（<strong>数据</strong>）</p><p><strong>分用：</strong>除了最顶层协议，任何一个协议它的报头当中，一定包<strong>含一个字段</strong>，这个字段用来表明，<strong>要将自己的有效载荷要交个上层的哪一个协议</strong>，只要有了个字段，就准确地将我们地报文实现向上交付了。</p><p><strong>解包：</strong> </p><p>拆去报头，拿出有效载荷（<strong>数据</strong>）</p><p><strong>应用层协议：</strong> </p><p>如何使用有效载荷（<strong>数据</strong>）</p><p><strong>根据当层协议将数据进行报头和有效载荷的拆解</strong></p><p>把数据链路层的数据叫做：数据帧</p><p>网络层IP层的数据叫做：数据报</p><p>传输层TCP层数据叫做：数据段</p><p>传输层UDP层数据叫做：数据报</p><p><img src="/2019/01/16/网络基础(1)/封装解包分用.png" alt="封装解包分用"></p><p>两台计算机通过TCP\IP协议通讯的过程如下所示（以上是文字叙述）</p><h2 id="TCP-IP通讯过程（两台主机在同一个局域网当中）"><a href="#TCP-IP通讯过程（两台主机在同一个局域网当中）" class="headerlink" title="TCP/IP通讯过程（两台主机在同一个局域网当中）"></a><strong>TCP/IP通讯过程（两台主机在同一个局域网当中）</strong></h2><p><img src="/2019/01/16/网络基础(1)/两台主机在同一个局域网当中的通信.png" alt="两台主机在同一个局域网当中的通信"></p><p>跨网段的主机的文件传输. 数据从一台计算机到另一台计算机传输过程中要经过一个或多个路由器。</p><p><strong>交换机的应用</strong>: （大局域网中的应用）</p><p>交换机会有效的划分，碰撞域（冲突）</p><p>将大局域网拆分为多个小的局域网，拆分成的局域网中发送的信息，先交给交换机，交换将没有发生碰撞的信息发送到以太网上去。（碰撞的信息不发送到以太网上去，才用冲突算法进行解决。解决后再发送到局域网上去)。</p><p><strong>路由器的应用：</strong>路由器的作用连接局域网对网道网的数据进行转发。</p><p>路由器横跨两个局域网，路由器至少连接两个网卡，既有两个网卡的MAC地址（硬件地址）。</p><p><strong>ifconfig：</strong>查看当前Linux虚拟机的网络</p><p><strong>ens33: </strong> 当前网络接口</p><p><strong>inet:</strong> <strong>IP地址</strong> 占4个字节，一共<strong>32个bit位</strong>   </p><p>（硬件地址）<strong>MAC网卡地址</strong>：占6个字节，一共<strong>48个bit位</strong></p><p><strong>lo：</strong>本地环回接口</p><p>每一个硬件设备都有可能都会向服务器推送设备，IP地址不够了。</p><p>所以部署IPV6</p><p>IPV6:<strong>128bit位</strong></p><p>两种方式确定一个主机。产生一个问题：</p><p>唐僧取经例子：</p><p>IP地址从一个到另一个IP地址（提供大致方向）</p><p>其中经过不同的网卡（主机），所以我们的Mac地址一直在变（每次传输更靠近IP地址）</p><p>MAC地址一致在变，真正的进行数据传输。</p><h2 id="不同局域网之间的网络传输"><a href="#不同局域网之间的网络传输" class="headerlink" title="不同局域网之间的网络传输"></a>不同局域网之间的网络传输</h2><p><strong>路由器的应用：</strong>路由器的作用连接局域网对网道网的数据进行转发。</p><p>路由器横跨两个局域网，路由器至少连接两个网卡，<strong>既有两个网卡的MAC地址（硬件地址）</strong> </p><p>路由器有<strong>两个的接口**</strong>两张网卡<strong>，分别连接两个</strong>（<strong>两个独立的MAC地址</strong>），一个网卡连接以太网去驱动程序，右侧的这个连接里令牌环驱动程序。</p><p><img src="/2019/01/16/网络基础(1)/不同局域网内的网络通信.png" alt="不同局域网内的网络通信"></p><p>A主机自顶向下进行交付，封装到网络层时（查找自己的路由表）发现要去的目标IP不再同一个局域网。</p><p>所以发出数据的地址传自己的IP、MAC，目标地址传路由器的MAC地址。</p><p>数据帧由A主机发送到局域网上，所有局域网内的所有主机都受到了这条消息，其他主机收到消息后要做第一件事情，解包然后对对比，对比自己的IP地址与数据帧中解包出来的目的IP地址。</p><p>路由器的链路层以太网的驱动程序，对比发现这个包是发给它的，所以它把数据封装把数据向上传递给路由器的网络层，然后路由器进行一番路由，路由器将报文交付到下层，进行封装（报头中含有目标地址IP，和令牌环环的地址），最后令牌环将数据发送给主机B的令牌环驱动程序。</p><p>报文在整个过程中IP地址一致不变，IP层以上认为全球的网络称之为IP网络。（唯一IP）</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/01/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/01/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>正则表达式概念</li><li>正则表达式应用场景</li><li>正则表达式三要素</li><li>正则表达式特殊符号</li><li>扩展正则和基础正则</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><ul><li>正则表达式Regular Expression）是用于描述一组字符串特征的模式，用来匹配特定的字符串。通过特殊字符+普通字符来进行模式描述，从而达到文本匹配目的的工具</li><li>寻人启事</li><li>正则表达式目前被集成到各种文本编辑器/文本处理工具当中</li></ul></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><strong>验证</strong>：表单提交，进行用户名密码验证</li><li><strong>查找</strong>：从大量信息中快速提取指定内容，在一批url中，查找指定url</li><li><strong>替换</strong>：将指定格式的文本，进行正则匹配查找，找到后进行特定替换（vim文本替换符）</li></ul><h2 id="正则表达式的基本要求"><a href="#正则表达式的基本要求" class="headerlink" title="正则表达式的基本要求"></a>正则表达式的基本要求</h2><ul><li>字符类</li><li>数量限定符</li><li>位置限定符</li><li>特殊符号</li></ul><p>grep是一款Linux下按行进行匹配文本的工具。通常是Linux下处理文本的第一步，带有很多有用的选项。采用的是贪心算法</p><blockquote><ul><li>-E :使用扩展正则匹配</li><li>–color:将匹配的到的内容进行语法高亮</li></ul></blockquote><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>.</td><td>匹配任意一个字符</td><td>abd.可以匹配abcde、abc9等</td></tr><tr><td>[]</td><td>匹配括号中的任意一个字符</td><td>[abc]d,可以匹配ad,bd,或带有d的字符集</td></tr><tr><td>-</td><td>在[ ]括号内表示字符范围</td><td>[0-9a-fA-F]可以匹配一位16进制数字</td></tr><tr><td>^</td><td>位于[]括号内的开头，匹配除考好中的字符之外的任意一个字符</td><td>[^xy] 1匹配除了xy之外的任意一个字符 可以怕匹配a1,b1但不能匹配x1,y1</td></tr><tr><td>[[:xxx:]]</td><td>grep工具预定义的一下些命名字符类</td><td>[[:alpha:]]匹配一个字母，[[:digit:]]匹配一个数字</td></tr></tbody></table><a id="more"></a><p><img src="/2019/01/16/正则表达式/gerp练习.png" alt="gerp练习"></p><h2 id="数量限定符"><a href="#数量限定符" class="headerlink" title="数量限定符"></a>数量限定符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>？</td><td>紧跟在他前面的单元应匹配零次或一次</td><td>[0-9]?\.[0-9]匹配0.0、2.3、.5等，由于.在正则表达式中是一个特殊字符，所以需要用\转义一下，取字面值</td></tr><tr><td>+</td><td>紧跟在他前面的单元应匹配一次或多次</td><td>[a-zA-Z0-9_.-]+@[a-zA-z0-9_.-]+\.[a-zA-Z0-9_.-]+匹配email地址</td></tr><tr><td>*</td><td>紧跟在他前面的单元应匹配零次或多次</td><td>[0-9][0-9]<em>匹配至少一位数字，等价于[0-9]+.[a-zA-z_]+[a-zA-Z_0-9]\</em>匹配C语言标识符</td></tr><tr><td>{N}</td><td>紧跟在他前面的单元应匹配精确匹配N次</td><td>[1-9][0-9]{2}匹配从100到999的整数</td></tr><tr><td>{N,}</td><td>紧跟在他前面的单元应匹配至少N次</td><td>[1-9][0-9][2,]匹配三位以上（含三位)的整数</td></tr><tr><td>{,M}</td><td>紧跟在他前面的单元应匹配最多M次</td><td>[0-9]{,1}相当于[0-9]?     Linux下的grep不支持</td></tr><tr><td>{N,M}</td><td>紧跟在他前面的单元应匹配至少N次,最多M次</td><td>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1.3}\.[0-9]{1.3}匹配IP地址</td></tr></tbody></table><h2 id="位置限定符"><a href="#位置限定符" class="headerlink" title="位置限定符"></a>位置限定符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>^</td><td>匹配行首的位置</td><td>^Contennt匹配位于一行开头的Content</td></tr><tr><td>$</td><td>匹配行末的位置</td><td>;$匹配位于一行结尾的；号，^$匹配空行</td></tr><tr><td>\&lt;</td><td>匹配以单词开头的位置（所有）</td><td>\&lt;th匹配…this,但不匹配ethernet、tenth</td></tr><tr><td>\&gt;</td><td>匹配以词结尾的位置（所有）</td><td>p\&gt;匹配leap…,但不匹配parent,sleepy</td></tr><tr><td>\b</td><td>匹配以单词开头置或以单词结尾的位置（所有）</td><td>\bat\b匹配…at…,但不匹配cat、atexit、batch</td></tr><tr><td>\B</td><td>匹配非以单词开头或以单词结尾的位置（所有）</td><td>\Bat\B匹配battery,但不匹配…attend、hat…</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>\</td><td>转义字符，普通字符转义为特殊字符，特殊字符转义为普通字符</td><td>普通字符&lt;写成\&lt;表示单词开头的位置，特殊字符.写成\.以及\写成\\就当作普通字符</td></tr><tr><td>()</td><td>将正则表达式的一部分括起来组成一个单元，可以对整个单元使用数量限定符</td><td>([0-9]{1,3}\.){3}[0-9]{1,3}匹配IP地址</td></tr><tr><td>\</td><td></td><td>连接两个子表达式，表示或的关系</td><td>n(o\</td><td>either)匹配no 或neither</td></tr></tbody></table><h2 id="扩展正则和基准正则"><a href="#扩展正则和基准正则" class="headerlink" title="扩展正则和基准正则"></a>扩展正则和基准正则</h2><p>区别：正则表达式的Extended规范和Basic规则基本相同。只是Basic规范下，有些字符<code>?+{}|（）</code>  应解释为普通字符，要表示上述特殊含义则需要加上\转义</p><p>反之，在Extended规范下，<code>？+{}|（）</code> 应被解释为普通字符，要表示上述特殊含义则需要加上<code>\</code>转义。</p><p>所以<code>grep</code> 工具带上<code>-E</code> 选项，表示使用扩正则来进行匹配，若没有，则表示使用基准正则进行匹配.</p>]]></content>
      
      
      <categories>
          
          <category> 文本匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinuxPOSIX信号量</title>
      <link href="/2019/01/16/LinuxPOSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/"/>
      <url>/2019/01/16/LinuxPOSIX%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="POSIX信号量"><a href="#POSIX信号量" class="headerlink" title="POSIX信号量"></a>POSIX信号量</h1><p>POSIX信号量和System信号量作用相同，都是用于同步操作，达到无冲突访问共享资源的目的。但是POSIX可以用于线程同步、互斥。</p><p><strong>信号量：本质上是一把<em>计数器</em>，他用来描述临界资源当中资源数目的多少。</strong></p><h3 id="初始化信号量"><a href="#初始化信号量" class="headerlink" title="初始化信号量"></a><strong>初始化信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">pshared:<span class="number">0</span>表⽰示线程间共享，⾮非零表示进程间共享    </span><br><span class="line">value：信号量初始值</span><br></pre></td></tr></table></figure><h3 id="销毁信号量"><a href="#销毁信号量" class="headerlink" title="销毁信号量"></a><strong>销毁信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destory</span><span class="params">(<span class="keyword">sem_t</span>*sem)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="等待信号量"><a href="#等待信号量" class="headerlink" title="等待信号量"></a><strong>等待信号量</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能：等待信号量，会将信号量的值减<span class="number">1</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="信号量理解："><a href="#信号量理解：" class="headerlink" title="信号量理解："></a><strong>信号量理解：</strong></h3><p>当一个线程申请到信号量，信号量的计数器减一，线程就访问临界资源了。</p><p>释放信号量，信号量<strong>计数器</strong>加一。</p><p><strong>(二元)信号量</strong>且信号量的计数器设置为1就相当于一个互斥锁。</p><p>每个线程都能访问到信号量资源，<strong>信号量本身就是临界资源。</strong></p><p><strong>保证PV操作的原子性：</strong></p><p><strong>P操作：</strong>信号量申请操作是原子的</p><p><strong>V操作：</strong>信号量释放操作是原子的</p><h2 id="基于环形队列的生产者消费者模型"><a href="#基于环形队列的生产者消费者模型" class="headerlink" title="基于环形队列的生产者消费者模型"></a>基于环形队列的生产者消费者模型</h2><p><img src="/2019/01/16/LinuxPOSIX信号量/基于环形队列的生产者消费者模型.png" alt="基于环形队列的生产者消费者模型"></p><a id="more"></a><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p>处理有些公共资源修改比较少，读的机会比较多。通常情况下读的过程，往往伴随着查找的操作，中间耗时很长。给这种代码段加锁，会极大的降低我们程序的效率。</p><p><strong>读写锁本质是一种自旋锁</strong>:-&gt;<strong>[长时间等人短时间等人的例子]</strong> 是比较浪费CPU的操作</p><p><strong>目标线程在临界资源的待的时间长短</strong></p><p>长时间等待：<strong>挂起等待（阻塞）</strong></p><p>短时间等待：<strong>选择自旋式等待（轮询）</strong></p><p><strong>读者写着模型分析321原则：</strong>【写黑板报，读黑板报关系】</p><p>读者与读者之间：<strong>共享关系</strong></p><p>写者与写者之间：<strong>互斥关系</strong></p><p>读者与写着之间：<strong>互斥，同步关系</strong></p><p><strong>2种角色</strong></p><p><strong>1个场所</strong></p><table><thead><tr><th>当前锁状态</th><th>读写请求</th><th>写锁请求</th></tr></thead><tbody><tr><td>无锁</td><td>可以</td><td>可以</td></tr><tr><td>读锁</td><td>可以</td><td>阻塞</td></tr><tr><td>写锁</td><td>阻塞</td><td>阻塞</td></tr></tbody></table><blockquote><p><strong>注意：写独占，读共享，写锁优先级高</strong></p></blockquote><p>读写锁接口</p><p>初始化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,const pthread_rwlockattr _t *restrict attr)；</span><br></pre></td></tr></table></figure><p>销毁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br></pre></td></tr></table></figure><p>加锁和解锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  读锁加锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  写锁加锁</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;  解锁</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程同步</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux同步"><a href="#Linux同步" class="headerlink" title="Linux同步"></a>Linux同步</h1><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><blockquote><ul><li>当一个线程互斥地访问某个变量时，它可能发现在其他线程状态改变值之前，它什么也做不了。</li><li>例如一个线程访问队列时，发现队列为空，它只能等待，只到其它线程将一个节点添加到队列中。 这种情况就需要⽤用到条件变量。</li></ul></blockquote><p><strong>同步解决了进程饥饿问题</strong></p><h2 id="条件变量函数"><a href="#条件变量函数" class="headerlink" title="条件变量函数"></a>条件变量函数</h2><p>初始化条件变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *rest rict attr)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">cond：要初始化的条件变量    </span><br><span class="line">attr：<span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>销毁条件变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond）</span></span></span><br></pre></td></tr></table></figure><p>等待条件满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mute x)</span></span>; </span><br><span class="line">参数：    </span><br><span class="line">cond：要在这个条件变量上等待    </span><br><span class="line">mutex：互斥量，后⾯面详细解</span><br></pre></td></tr></table></figure><p>唤醒等待</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="生产消费者"><a href="#生产消费者" class="headerlink" title="生产消费者"></a>生产消费者</h1><p>分析：</p><p>生产者生产者之间的关系—互斥关系（不能共享）</p><p>生产者消费者之间的关系—互斥关系，同步关系</p><p>消费者消费者之间的关系—互斥关系（不能共享）</p><p><strong>交易场所：超市</strong></p><p>321原则： 3种关系，2个角色，1 个交易场所</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程中可重入VS线程安全</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%8F%AF%E9%87%8D%E5%85%A5VS%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%8F%AF%E9%87%8D%E5%85%A5VS%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="可重入VS线程安全"><a href="#可重入VS线程安全" class="headerlink" title="可重入VS线程安全"></a>可重入VS线程安全</h2><p>概念：</p><blockquote><ul><li>线程安全：多个线程并发同一段代码时，不会出现不同结果。常见对全局变量或静态变量进行操作，并且没有锁保护的情况下，会出现该问题。</li><li>重入：同一函数被不同的执行流程钓调用，当前一个流程还没有执行完，就有其他执行流再次进入，我们称之为重入。一个函数在重入的条件下，运行结果不会出现任何不同或者任何问题，则该函数被称为可重入函数，否则不是。</li></ul></blockquote><a id="more"></a><h2 id="常见的线程安全不安全问题"><a href="#常见的线程安全不安全问题" class="headerlink" title="常见的线程安全不安全问题"></a>常见的线程安全不安全问题</h2><blockquote><ul><li>不保护共享变量的函数</li><li>函数状态随时被调用，状态发变化的函数</li><li>返回指向静态变量指针的函数</li><li>调用线程不安全函数的函数</li></ul></blockquote><h2 id="常见的线程安全的情况"><a href="#常见的线程安全的情况" class="headerlink" title="常见的线程安全的情况"></a>常见的线程安全的情况</h2><blockquote><ul><li>每个线程对全局变量或者静态变量只有读取权限，而没有写入的权限，一般来说这些线程是安全的</li><li>类或者接口对于线程来说都是原子操作</li><li>多个线程之间的切换不会导致该接口的执行结果存在二义性</li></ul></blockquote><h2 id="常见不可重入的情况"><a href="#常见不可重入的情况" class="headerlink" title="常见不可重入的情况"></a>常见不可重入的情况</h2><blockquote><ul><li>调用了malloc/free函数，因为malloc函数使用全局链表来管理堆的</li><li>调用了标准I/O库函数，标准I/O库的很多实现都以不可重入的方式使用全局数据结构 </li><li>可重入函数体内使用了静态的数据结构</li></ul></blockquote><h2 id="常见的可重入函数的情况"><a href="#常见的可重入函数的情况" class="headerlink" title="常见的可重入函数的情况"></a>常见的可重入函数的情况</h2><blockquote><ul><li>不是使用静态变量或全局变量</li><li>不使用用malloc或new开辟出来的空间</li><li>不调用课不可重入的函数</li><li>不返回静态或者全局数据，所有数据都有函数的调用者提供</li><li>使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据</li></ul></blockquote><h2 id="可重入与线程安全联系"><a href="#可重入与线程安全联系" class="headerlink" title="可重入与线程安全联系"></a>可重入与线程安全联系</h2><blockquote><ul><li>函数是可重入的，线程就是安全的</li><li>函数是不可重入，那就不能由多个线程使用，有可能引发线程安全问题</li><li>如果一个函数由全局变量，那么这个函数即不是线程安全的也不是可重入的。</li></ul></blockquote><h2 id="可重入与线程安全的区别"><a href="#可重入与线程安全的区别" class="headerlink" title="可重入与线程安全的区别"></a>可重入与线程安全的区别</h2><blockquote><ul><li>可重入函数是线程安全函数的一种</li><li>线程安全不一定可重入，而可重入函数则一定是线程安全的。</li><li>如果将对临界资源的访问加上锁，则这个函数是线程安全的，但如果这个重入函数，若锁还未释放则会产生死锁（自己进入自己锁好的函数，本线程被挂起，本线程带着锁且被挂起，线程携带的锁永远不会被释放–<strong>死锁</strong>），因此是不可重入的。</li></ul></blockquote><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a><strong>死锁的概念</strong></h3><ul><li><blockquote><p>死锁是指在一组进程中的各个进程均占有不会释放的资源，但因互相申请被其他进程所占有不会释放的资源而处于一种永久等待状态。</p></blockquote></li></ul><h3 id="死锁的四个必要条件"><a href="#死锁的四个必要条件" class="headerlink" title="死锁的四个必要条件"></a><strong>死锁的四个必要条件</strong></h3><blockquote><ul><li>互斥条件：一个资源每次只能被一个执行流使用</li><li>请求与保持条件：一个执行流因请求资源而阻塞时，对已获得资源保持不放</li><li>不剥夺条件：一个执行已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干执行流之间形成一种头尾相接的循环等待资源的关系。</li></ul></blockquote><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><blockquote><ul><li>破坏死锁四个必要条件</li><li>加锁顺序一致  所有线程申请锁的顺序是一定</li><li>避免未释放场景</li><li>资源一次性分配</li></ul></blockquote><h2 id="避免死锁的算法"><a href="#避免死锁的算法" class="headerlink" title="避免死锁的算法"></a>避免死锁的算法</h2><blockquote><ul><li><p>死锁检测算法</p></li><li><p>银行家算法</p><p>哲学家就餐问题</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程互斥</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h1><h3 id="进程线程间的互斥相关背景概念"><a href="#进程线程间的互斥相关背景概念" class="headerlink" title="进程线程间的互斥相关背景概念"></a>进程线程间的互斥相关背景概念</h3><ul><li><strong>临界资源</strong>：多线程执行流共享的资源叫做临界资源</li><li><strong>临界区</strong>：每个线程内部，访问临界资源的代码，就叫做临界区</li><li><strong>互斥</strong>：任何时刻，互斥保证有且只有一个执行流进入临界区，访问临界资源，通常对临界资源起保护作用</li><li><strong>原子性</strong>：不被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成</li></ul><h2 id="–-操作并不是原子的操作，而是对应三条汇编指令"><a href="#–-操作并不是原子的操作，而是对应三条汇编指令" class="headerlink" title="–/++操作并不是原子的操作，而是对应三条汇编指令"></a>–/++操作并不是原子的操作，而是对应三条汇编指令</h2><ul><li>load:将共享变量从内存加载到寄存器中</li><li>update:更新寄存器里面的值，执行-1操作</li><li>store：将新值，从寄存器中写回共享变量的内存地址中</li></ul><p>要解决++/–操作不是原子的要做到以下3点</p><ol><li>代码必须有互斥行为：当代码进入到临界区执行时，不允许其他线程进入该临界区</li><li>如果多个线程同时要求执行临界区的代码时。并且临界区没有线程在执行，那么只允许一个线程进入该临界区。</li><li>如果线程不在临界区中执行，那么该线程不能阻止其他线程进入临界区。</li></ol><p><img src="/2019/01/16/Linux多线程互斥/Lock原理图.png" alt="Lock原理图"></p><a id="more"></a><h2 id="mutex-互斥量"><a href="#mutex-互斥量" class="headerlink" title="mutex(互斥量)"></a>mutex(互斥量)</h2><blockquote><ul><li>大部分情况，线程使用的数据都是局部变量，变量的地址空间在线程的栈空间内，这种情况，变量的归属单个线程，其他线程无法获取这种变量</li><li>但是有的时候，很多变量都需要线程共享，这样的变量称为共享变量，可以通过数据的共享，完成线程之间的交互</li><li>多个线程并发操作共享变量，会带来一些问题。</li></ul><p>通常情况下同步是要互斥为前提的，同步可以保证多个执行流按照特定有效的顺序去访问临界资源。</p></blockquote><p><strong>总结：</strong>互斥了解决数据的二义性问题，安全性，正确性问题。</p><p>同步互斥可以让多个线程，多个进程之间可以协同工作。</p><h2 id="1-互斥锁（mutex）"><a href="#1-互斥锁（mutex）" class="headerlink" title="1.互斥锁（mutex）"></a>1.互斥锁（mutex）</h2><p>例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作共享变量会有问题的售票系统</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> tickets = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> * <span class="title">buyTicket</span><span class="params">(<span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> * thread = (<span class="keyword">char</span>*) arg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             usleep(<span class="number">1000</span>);</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"%s get a ticket ,num:%d\n"</span>,thread,tickets);</span><br><span class="line">            tickets--;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%s quit!\n"</span>,thread);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1,t2,t3,t4;</span><br><span class="line">    pthread_create(&amp;t1,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 1"</span>);</span><br><span class="line">    pthread_create(&amp;t3,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 3"</span>);</span><br><span class="line">    pthread_create(&amp;t4,<span class="literal">NULL</span>,buyTicket,(<span class="keyword">void</span> *)<span class="string">"thread 4"</span>);    </span><br><span class="line">    pthread_join(t1,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t2,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t3,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(t4,<span class="literal">NULL</span>);                                                                                                                             </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加锁后 互斥</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> ticket = <span class="number">100</span>; <span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">route</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">char</span> *id = (<span class="keyword">char</span>*)arg;    </span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> ) &#123;        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);        </span><br><span class="line">        <span class="keyword">if</span> ( ticket &gt; <span class="number">0</span> ) &#123;           </span><br><span class="line">            usleep(<span class="number">1000</span>);            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s sells ticket:%d\n"</span>, id, ticket);           </span><br><span class="line">            ticket--;            </span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);            <span class="comment">// sched_yield(); 放弃CPU       </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);            </span><br><span class="line">            <span class="keyword">break</span>;       </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">pthread_t</span> t1, t2, t3, t4;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;t1, <span class="literal">NULL</span>, route, <span class="string">"thread 1"</span>);    </span><br><span class="line">    pthread_create(&amp;t2, <span class="literal">NULL</span>, route, <span class="string">"thread 2"</span>);   </span><br><span class="line">    pthread_create(&amp;t3, <span class="literal">NULL</span>, route, <span class="string">"thread 3"</span>);   </span><br><span class="line">    pthread_create(&amp;t4, <span class="literal">NULL</span>, route, <span class="string">"thread 4"</span>);</span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t2, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t3, <span class="literal">NULL</span>);    </span><br><span class="line">    pthread_join(t4, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex锁必须先初始化，互斥锁用完后，必须删除互斥锁</p><p>锁的初始化</p><ul><li>静态初始化</li></ul><p><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER</code></p><ul><li><p>动态初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> pthread_mutexattr <span class="keyword">_t</span> *<span class="keyword">restrict</span> attr)</span></span>;    参数：        mutex：要初始化的互斥量        attr：<span class="literal">NULL</span>`</span><br></pre></td></tr></table></figure><p>销毁互斥量 </p><p>销毁互斥量需要注意： </p><ul><li><p>使⽤用PTHREAD_ MUTEX_ INITIALIZER初始化的互斥量不需要销毁 </p></li><li><p>不要销毁⼀一个已经加锁的互斥量 </p></li><li><p>已经销毁的互斥量，要确保后⾯面不会有线程再尝试加锁</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_mutex_destroy(pthread_mutex_t *mutex)；</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>互斥量加锁和解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_mutex_lock(pthread_mutex_t *mutex); int pthread_mutex_unlock(pthread_mutex_t *mutex); 返回值:成功返回0,失败返回错误号</span><br></pre></td></tr></table></figure><blockquote><p>调⽤用pthread_ lock 时，可能会遇到以下情况: 互斥量处于未锁状态，该函数会将互斥量锁定，同时返回成功 发起函数调⽤用时，其他线程已经锁定互斥量，或者存在其他线程同时申请互斥量，但没有竞争到互 斥量，那么pthread_ lock调⽤<strong>会陷⼊入阻塞，等待互斥量解锁。</strong> </p></blockquote><p><strong>trylock：非阻塞式获取锁</strong></p><p><strong>总结：</strong></p><p><strong>锁本身是临界资源</strong>，但是申请锁的操作是原子性的。所以才可以使用锁保护临界资源。</p>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程控制</title>
      <link href="/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/01/16/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><h2 id="POSIX线程库"><a href="#POSIX线程库" class="headerlink" title="POSIX线程库"></a>POSIX线程库</h2><blockquote><ul><li>与线程有关的函数构成了⼀一个完整的系列，绝⼤大多数函数的名字都是以“pthread_”打头的 </li><li>引入头文件</li><li>链接这些线程库时要使用编译命令”-lpthread”选项</li></ul></blockquote><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：创建⼀一个新的线程 </span><br><span class="line">原型    int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*star t_routine)(void*), void *arg); </span><br><span class="line">参数    thread:返回线程ID    attr:设置线程的属性，attr为<span class="literal">NULL</span>表⽰示使⽤用默认属性    start_routine:是个函数地址，线程启动后要执⾏行的函数    arg:传给线程启动函数的参数</span><br><span class="line">返回值：成功返回<span class="number">0</span>；失败返回错误码</span><br></pre></td></tr></table></figure><p>错误检查: </p><ul><li>传统的⼀一些函数是，成功返回0，失败返回-1，并且对全局变量errno赋值以指⽰示错误。</li><li>pthreads函数出错时不会设置全局变量errno（⽽而⼤大部分其他POSIX函数会这样做）。⽽而是将错误 代码通过返回值返回 </li><li>pthreads同样也提供了线程内的errno变量，以⽀支持其它使⽤用errno的代码。对于pthreads函数的错 误，建议通过返回值判定，因为读取返回值要比读取线程内的errno变量的开销更小</li></ul><a id="more"></a><h2 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h2><p>pthread库中</p><p><strong>线程需要等待：</strong></p><ul><li>已经退出的线程，其空间没有被释放，仍然在进程的地址空间内。 </li><li>创建新的线程不会复用刚才退出线程的地址空间。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：等待线程结束 </span><br><span class="line">原型    <span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **value_ptr)</span></span>; </span><br><span class="line">参数    thread:线程ID    value_ptr:它指向一个指针，后者指向线程的返回值 </span><br><span class="line">返回值：成功返回<span class="number">0</span>；失败返回错误码</span><br></pre></td></tr></table></figure><blockquote><p><strong>线程等待，当前发起等待线程被挂起（阻塞式），等待被等待退出。</strong></p></blockquote><p>retval：被等待线程退出的返回值。（不关注就传一个NULL）</p><p>线程退出几种情况：</p><ul><li>线程运行完了结果对</li><li>线程运行完了结果不对</li><li>线程没运行完出异常</li></ul><p>但是一个进程中的线程异常退出，整个进程就退出了，发起等待线程也就被终止，所以不关注出异常情况。</p><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><p>如果需要只终止某个线程而不终止整个进程,可以有三种方法:</p><ol><li>从线程函数return 退出码。这种方法对主线程不适用,从main函数return相当于调用exit。 </li><li>线程可以调用pthread_ exit（退出码）终止自己。 </li><li>一个线程可以调用pthread_ cancel终止同一进程中的另一个线程</li></ol><ul><li>pthread_exit函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：线程终止 </span><br><span class="line">原型    <span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *value_ptr)</span></span>; </span><br><span class="line">参数    value_ptr:value_ptr不要指向一个局部变量。 </span><br><span class="line">返回值：无返回值，跟进程一样，线程结束的时候无法返回到它的调用者（自身）</span><br></pre></td></tr></table></figure><ul><li>需要注意,pthread_exit或者return返回的指针所指向的内存单元必须是全局的或者是用malloc分配的,不能在线程函数 的栈上分配,因为当其它线程得到这个返回指针时线程函数已经退出了。</li><li>pthread_cancel函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">功能：取消一个执行中的线程 </span><br><span class="line">原型    int pthread_cancel(pthread_t thread); </span><br><span class="line">参数    thread:线程ID </span><br><span class="line">返回值：成功返回0；失败返回错误码</span><br></pre></td></tr></table></figure><p>调用<strong>join函数</strong>的线程将挂起等待,直到id为thread的线程终止。thread线程以不同的方法终止,通过pthread_join得到的终 止状态是不同的，总结如下:</p><blockquote><p>1.如果thread线程通过<strong>return</strong>返回,value_ ptr所指向的单元里存放的是thread线程函数的返回值。 2. 如果thread线程被别的线程调用<strong>pthread_ cance</strong>l异常终掉,value_ ptr所指向的单元里存放的是常数<strong>PTHREAD_ CANCELED   ——返回值为：-1。</strong> </p><p>3.如果thread线程是自己调用<strong>pthread_exit</strong>终止的,value_ptr所指向的单元存放的是传给<strong>pthread_exit的参数。</strong> </p><p>4.如果对thread线程的<strong>终止状态不感兴趣,可以传NULL给value_ ptr参数</strong>。</p></blockquote><h2 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h2><ul><li>默认情况下，新创建的线程是joinable的，线程退出后，需要对其进行pthread_join操作，否则无法释放资 源，从而造成系统泄漏。</li><li>如果不关心线程的返回值，join是一种负担，这个时候，我们可以告诉系统，当线程退出时，自动释放线程 资源。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure><p>可以是线程组内其他线程对目标线程进行分离，也可以是线程自己分离:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(pthread_self());</span><br></pre></td></tr></table></figure><p>joinable和分离是冲突的，一个线程不能既是joinable又是分离的。</p><p>joinable和分离是冲突的，一个线程不能既是joinable又是分离的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux线程ID和进程ID</title>
      <link href="/2019/01/16/Linux%E7%BA%BF%E7%A8%8BID%E5%92%8C%E8%BF%9B%E7%A8%8BID/"/>
      <url>/2019/01/16/Linux%E7%BA%BF%E7%A8%8BID%E5%92%8C%E8%BF%9B%E7%A8%8BID/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux查看正在运行的线程"><a href="#在Linux查看正在运行的线程" class="headerlink" title="在Linux查看正在运行的线程"></a><strong>在Linux查看正在运行的线程</strong></h1><p><strong><code>ps -aL</code></strong></p><h1 id="线程ID和进程ID"><a href="#线程ID和进程ID" class="headerlink" title="线程ID和进程ID"></a>线程ID和进程ID</h1><p><img src="/2019/01/16/Linux线程ID和进程ID/线程ID和进程ID.png" alt="线程ID和进程ID"></p><p>同一个进程内部的线程（多个执行流）用getpid()返回的是一个一个PID。（用户级id）</p><a id="more"></a><ul><li>一个进程里面对应多个PCB(线程的PCB) </li></ul><table><thead><tr><th>用户态</th><th>系统调用</th><th>内核进程描述符中对应的结构</th></tr></thead><tbody><tr><td>线程ID</td><td>pid_t gettid(void);</td><td>pid_t pid(操作系统调度的线程号) 操作系统级别 //c库中被没有间接调用 tid = syscall(SYS_gettid);——<strong>LWP</strong></td></tr><tr><td>进程ID</td><td>pid_t getpid(void);</td><td>pid_t tgid (进程组ID)  用户级  直接可以调用**</td></tr></tbody></table><p><strong>LWP - getttid()  –pid</strong> (操作系统级别)</p><p><strong>ps命令中的-L选项，会显示如下信息：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost linux]<span class="meta"># ps -eLf |head -1 &amp;&amp; ps -eLf |grep a.out |grep -v grep UID        PID  PPID   LWP  C NLWP STIME TTY          TIME CMD </span></span><br><span class="line">root     <span class="number">28543</span> <span class="number">22937</span> <span class="number">28543</span>  <span class="number">0</span>    <span class="number">2</span> <span class="number">15</span>:<span class="number">32</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./a.out </span><br><span class="line">root     <span class="number">28543</span> <span class="number">22937</span> <span class="number">28544</span>  <span class="number">0</span>    <span class="number">2</span> <span class="number">15</span>:<span class="number">32</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./a.out</span><br></pre></td></tr></table></figure><ul><li>LWP:线程ID，既gettid()系统调用的返回值。 </li><li>NLWP:线程组内线程的个</li></ul><blockquote><p>Linux提供了gettid系统调用来返回其线程ID，可是glibc并没有将该系统调用封装起来，在开放接口来共程序员使 用。如果确实需要获得线程ID，可以采用如下方法：     #include &lt;sys/syscall.h&gt;   pid_t tid;   tid = syscall(SYS_gettid);</p></blockquote><p><strong>当一个线程的pid=tgid则这个线程是主线程</strong></p><p>线程ID及进程地址空间布局</p><ul><li><p>pthread_create函数会产生一个线程ID，存放在第一个参数指向的地址中。该线程ID(库级别操作id)和前面所说的线程ID（pid）不是一回事。</p></li><li><p>前面讲的线程ID属于进程调度的范畴。因为线程是轻量级进程，是操作系统调度器的最小单位，所以需要 一个数值来唯一表示该线程。 </p></li><li><p>pthread_ create函数第一个参数指向一个虚拟内存单元，该内存单元的地址即为新创建线程的线程ID，属于 NPTL线程库的范畴。线程库的后续操作，就是根据该线程ID来操作线程的。 线程库NPTL提供了pthread_ self函数，可以获得线程自身的ID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_t</span> pthread_self(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux多线程概念</title>
      <link href="/2019/01/14/Linux%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/01/14/Linux%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程的概念（复习）-铺垫"><a href="#线程的概念（复习）-铺垫" class="headerlink" title="线程的概念（复习）-铺垫"></a>线程的概念（复习）-铺垫</h1><ul><li>进程是<strong>分配系统资源的基本单位</strong></li><li>线程是<strong>一个标准的进程(一个执行流的进程)</strong></li></ul><p><img src="/2019/01/14/Linux线程概念/Linux线程图解.png" alt="Linux线程图解"></p><h2 id="1-理解（Linux下）"><a href="#1-理解（Linux下）" class="headerlink" title="1.理解（Linux下）"></a>1.理解（Linux下）</h2><p><strong>线程是在进程的内部运行的：</strong>线程是在进程的地址空间内运行的，共享一份虚拟地址空间。</p><p><strong>线程大部分资源都是共享的</strong>。（共用一个虚拟地址空间）</p><p><strong>进程大部分资源都是独立的</strong>。（每个一个进程都有自己独自的一份虚拟地址空间）</p><p>CPU是只能识别PCB的，但是他无法区分进程还是线程。所以Linux当中CPU看到的一个进程相当于一个轻量级进程（&lt;=一个标准的进程(一个执行流的进程)）</p><p>Linux下没有一份真正意义的进程。使用进程模拟线程。</p><p>TCB ThreadContrlClock 线程控制块</p><p><img src="/2019/01/14/Linux线程概念/线程概念.png" alt="线程概念"></p><a id="more"></a><h2 id="2-线程的资源"><a href="#2-线程的资源" class="headerlink" title="2.线程的资源"></a>2.线程的资源</h2><ul><li><strong>私有资源</strong></li></ul><blockquote><ol><li>线程ID</li><li>一组寄存器（上下文保护）</li><li>线程栈</li><li>erro</li><li>信号屏蔽字</li><li>调度优先级</li></ol></blockquote><ul><li><strong>共享资源</strong></li></ul><blockquote><ol><li>同有个地址空间</li><li>文件描述符</li><li>每种处理信号处理方式（忽略，默认，自定义）</li><li>当前工作目录</li><li>用户id和组id</li></ol></blockquote><h2 id="3-线程优点"><a href="#3-线程优点" class="headerlink" title="3.线程优点"></a>3.线程优点</h2><blockquote><ul><li>创建线程比创建一个进程代价小</li><li>与进程之间切换相比，线程之间的切换需要操作系统的工作小的多</li><li>线程占用的资源要比进程少很多</li><li>能充分利用多处理器的可并行数量</li><li>在等待慢速IO操作的同时，程序可以执行其他任务</li><li>计算密集型应用，为了能在多处理器系统上运行，将计算分解到多个线程中实现</li><li>IO密集型应用，为了提高性能，将IO操作重叠。线程可以同时等待不同IO操作</li></ul></blockquote><h2 id="4-线程缺点"><a href="#4-线程缺点" class="headerlink" title="4.线程缺点"></a>4.线程缺点</h2><ul><li>性能损失<ul><li>一个很少被外部事件阻塞的计算密集型线程往往⽆无法与共它线程共享同⼀一个处理器。如 果计算密集型线程的数量⽐比可⽤用的处理器多，那么可能会有较⼤大的性能损失，这⾥里的性 能损失指的是增加了额外的同步和调度开销，⽽而可⽤用的资源不变。</li></ul></li></ul><ul><li><p>健壮性降低</p><ul><li>编写多 程需要更全⾯面更深⼊入的考虑，在一个多线程程序⾥里，因时间分配上的细微偏差 或者因共享了不该共享的变量⽽而造成不良影响的可能性是很⼤大的，换句话说线程之间是 缺乏保护的。</li></ul></li><li><p>缺乏访问控制</p><ul><li>进程是访问控制的基本粒度，在⼀一个线程中调⽤用某些OS函数会对整个进程造成影响</li></ul></li><li><p>编程难度提高</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-javaIO</title>
      <link href="/2019/01/06/14-javaIO/"/>
      <url>/2019/01/06/14-javaIO/</url>
      
        <content type="html"><![CDATA[<h1 id="Java高级开发之JavaIO"><a href="#Java高级开发之JavaIO" class="headerlink" title="Java高级开发之JavaIO"></a>Java高级开发之JavaIO</h1><p>IO部分的重点：五个类（File、OutputStream、InputStream、Reader、Writer）一个接口（Serializable）</p><h1 id="1-File文件操作类"><a href="#1-File文件操作类" class="headerlink" title="1.File文件操作类"></a>1.File文件操作类</h1><p>在java.io包中，File类是唯一一个与文件本身操作（创建，删除，取得信息）有关的程序类</p><h2 id="1-1File类的基本使用"><a href="#1-1File类的基本使用" class="headerlink" title="1.1File类的基本使用"></a>1.1File类的基本使用</h2><p>java.io.File类是一个普通的类，直接产生实例化对象即可，两个构造方法如下：</p><blockquote><p>public File(String pathname);</p><p>public File(String parent,String child); //设置父路径和子类</p></blockquote><p>如果要进行文件的基本操作，可以使用FIle类的如下方法；</p><blockquote><p>创建一个新文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOExcepotion</span></span><br></pre></td></tr></table></figure><blockquote><p>判断一个文件是否存在</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> bollean <span class="title">exists</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>由于java具有跨平台特性但是，在实际项目部署环境可能与开发环境不同.那么这个时候路径的问题就很麻烦。Windows下面使用的是“\”,而Unix系统下使用的是“/”。所以使用路径分隔符时都会采用File类的一个常量”<code>public static final String separator</code>“来描述</p>]]></content>
      
      
      <categories>
          
          <category> JAVASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-视图</title>
      <link href="/2019/01/06/12-%E8%A7%86%E5%9B%BE/"/>
      <url>/2019/01/06/12-%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="12-视图"><a href="#12-视图" class="headerlink" title="12.视图"></a>12.视图</h1><p>MySQL5添加了对视图的支持。</p><p>视图是一个<strong>虚拟的表</strong>。其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。<strong>视图的数据变化会影响到基表，基表的数据变化也会影响到视图。</strong></p><p>视图可以把查询包装成一个虚拟表（临时表），方便检索。</p><a id="more"></a><h2 id="12-1使用视图的作用"><a href="#12-1使用视图的作用" class="headerlink" title="12.1使用视图的作用"></a>12.1使用视图的作用</h2><blockquote><ul><li><strong>重用SQL语句</strong></li><li><strong>简化复杂的SQL操作。在编写查询后，可以方便地重新利用而不必知道它地基本查询细节</strong></li><li><strong>使用表地组成部分而不是整个表</strong></li><li><strong>保护数据。可以给用户授予表地特定部分的访问权限而不是整个表的访问权限。</strong>(提高安全性)</li><li><strong>更改数据格式和表。视图可以返回与底层表的表示和格式不同的数据。</strong></li></ul></blockquote><p>在视图创建后，可以利用与表基本相同的方式利用他们。可以对视图执行select操作，过滤和排序数据，将视图联结到其他视图或者表，甚至能添加更新操作（添加更新数据存在某种限制）</p><h3 id="12-1-2视图带来的性能问题"><a href="#12-1-2视图带来的性能问题" class="headerlink" title="12.1.2视图带来的性能问题"></a>12.1.2视图带来的性能问题</h3><p>因为视图本省不包含数据，所以每次检索使用视图时，都必须处理查询执行时所需的任一个检索。如果你用了多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降的很厉害。因此在部署使用了大量视图的应用前，应该进行测试。</p><h2 id="12-2视图的规则和限制"><a href="#12-2视图的规则和限制" class="headerlink" title="12.2视图的规则和限制"></a>12.2视图的规则和限制</h2><ul><li>与表名相同，视图也需要唯一名称</li><li>对于可以创建的视图数目没有限制</li><li>对于创建视图，必须具有足够的访问权限。这些权限通常由数据库管理人员授予</li><li>视图可以像表一样嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图</li><li>order by可以用在视图中，但是如果从该视图检索数据的select语句也包含order by,那么该视图中的order by将被覆盖。</li><li>视图不能索引[^1]，也不能有关联的触发器[^2]或默认值。</li></ul><p>[^1]: 视图是一张临时表（存储引擎 myisam） 不能有主键<br>[^2]: view procedure  ,trigger(触发器)：会监听 一些update 等 相当于一个切面</p><ul><li><p>视图可以和表一起使用，例如，编写一条联结表和视图的select语句。 </p><p>​                                                                          `</p></li></ul><h2 id="12-3视图使用"><a href="#12-3视图使用" class="headerlink" title="12.3视图使用"></a>12.3视图使用</h2><ul><li>创建视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名 as select 语句</span><br></pre></td></tr></table></figure><ul><li>查看创建视图的语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create view 视图名</span><br></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名</span><br></pre></td></tr></table></figure><ul><li>更新视图</li></ul><blockquote><p>可以先用<code>drop</code>再用<code>create</code>，也可以直接用<code>create or replace view</code><br>如果要更新的视图不存在，则第二条更新语句就会创建一个新的视图；<br>如果要更新的视图存在；则第二条根更新的语句会替代原有视图。</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create view v_ename_dname as select ename,dname from emp,dept where emp.deptno = dept.deptno;</span><br><span class="line">Query OK, 0 rows affected (0.25 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_scott |</span><br><span class="line">+-----------------+</span><br><span class="line">| dept            |</span><br><span class="line">| emp             |</span><br><span class="line">| exam            |</span><br><span class="line">| salgrade        |</span><br><span class="line">| stu             |</span><br><span class="line">| v_ename_dname   |</span><br><span class="line">+-----------------+</span><br><span class="line">6 rows in set (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from  v_ename_dname;</span><br><span class="line">+--------+------------+</span><br><span class="line">| ename  | dname      |</span><br><span class="line">+--------+------------+</span><br><span class="line">| SMITH  | RESEARCH   |</span><br><span class="line">| ALLEN  | SALES      |</span><br><span class="line">| WARD   | SALES      |</span><br><span class="line">| JONES  | RESEARCH   |</span><br><span class="line">| MARTIN | SALES      |</span><br><span class="line">| BLAKE  | SALES      |</span><br><span class="line">| CLARK  | ACCOUNTING |</span><br><span class="line">| SCOTT  | RESEARCH   |</span><br><span class="line">| KING   | ACCOUNTING |</span><br><span class="line">| TURNER | SALES      |</span><br><span class="line">| ADAMS  | RESEARCH   |</span><br><span class="line">| JAMES  | SALES      |</span><br><span class="line">| FORD   | RESEARCH   |</span><br><span class="line">| MILLER | ACCOUNTING |</span><br><span class="line">+--------+------------+</span><br><span class="line">14 rows in set (0.12 sec)</span><br></pre></td></tr></table></figure><ul><li>修改了视图，对基表数据有影响</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">update v_ename_dname set dname=&apos;sales&apos;  where ename=&apos;CLARK&apos;; </span><br><span class="line">select * from EMP  where ename=&apos;CLARK&apos;;</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">| empno  | ename | job     | mgr  | hiredate            | sal     | comm | deptno |</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">| 007782 | CLARK | MANAGER | 7839 | 1981-06-09 00:00:00 | 2450.00 | NULL |     10 |</span><br><span class="line">+--------+-------+---------+------+---------------------+---------+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| deptno | dname      | loc      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | sales      | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>修改了基表，。对视图也有影响</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update emp set deptno=20 where ename=&apos;james&apos;; -- 修改基表</span><br><span class="line">Query OK, 1 row affected (0.09 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from v_ename_dname where ename = &apos;james&apos;;</span><br><span class="line">+-------+----------+</span><br><span class="line">| ename | dname    |</span><br><span class="line">+-------+----------+</span><br><span class="line">| JAMES | RESEARCH |   &lt;-视图中的数据发生了变化</span><br><span class="line">+-------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名;</span><br></pre></td></tr></table></figure><h2 id="12-4利用视图简化更复杂的联结"><a href="#12-4利用视图简化更复杂的联结" class="headerlink" title="12.4利用视图简化更复杂的联结"></a>12.4利用视图简化更复杂的联结</h2><p>从上面的例子就可以看出，我再次从筛选出来的视图中查找时，就不需要再写where from 条件，直接使用视图即可。</p><blockquote><p>创建可重用的视图：创建不受特定数据限制的视图是一种好办法。扩展视图的范围不仅可以使得它能被重用，而且甚至更多有用。这样做不需要创建和维护多个类似视图</p></blockquote><h2 id="12-5用视图过滤不想要的数据"><a href="#12-5用视图过滤不想要的数据" class="headerlink" title="12.5用视图过滤不想要的数据"></a>12.5用视图过滤不想要的数据</h2><p>视图对应普通的where子句也很有用。</p><blockquote><p>where子句和where子句如果从检索数据时使用了一条where子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p></blockquote><h2 id="12-6使用视图与计算字段"><a href="#12-6使用视图与计算字段" class="headerlink" title="12.6使用视图与计算字段"></a>12.6使用视图与计算字段</h2><p>将用select 筛选出来的的计算字段的语句将筛选出来的结果作为视图用运用，简化SQL语句，便于查找。</p><h2 id="12-7更新视图（详解）"><a href="#12-7更新视图（详解）" class="headerlink" title="12.7更新视图（详解）"></a>12.7更新视图（详解）</h2><p>通常，视图是可以更新的（即，可以对视图 insert、update、delete）。更新一个视图将更新其基表，因为视图是一个虚拟表，其中并没有真实存在数据而只是select筛选出来的数据的整合成一个临时表而已。如果你对视图进行修改，则实际上是对其基表增加或删除，修改。</p><p>但是并非所有视图都是可以更新的。基本上说，如果MySQL不能正确地确定被更新的数据，则不允许更新（包括插入删除）。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新：</p><ul><li>分组（使用group by）;</li><li>联结；</li><li>子查询；</li><li><p>聚集函数（min()、count()、sum() 等）；</p></li><li><p>distinct;</p></li><li>导出（计算）列</li></ul><p>即视图基本不能进行更新，这不是一种严重的限制，其实视图主要用于数据检索的。</p><blockquote><p>一般，视图应该用于检索（select语句）而不是用于更新(insert,update和delete)。</p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><strong>视图是一个虚拟的表。他们包含的不是数据而是根据需要检索出来的数据的查询。视图提供了一种MySQL的Select语句层次的封装，可以用来简化数据处理以及重新格式化基础数据或保护基础数据。</strong></p><ul><li>与表一样，必须唯一命名（不能出现同名视图或表名）</li><li>创建视图数目无限制，但要考虑复杂查询创建为视图之后的性能影响 </li><li>视图不能添加索引，也不能有关联的触发器或者默认值 </li><li>视图可以提高安全性，必须具有足够的访问权限 </li><li><code>order by</code> 可以用在视图中，但是如果从该视图检索数据 <code>select</code>中也含有 <code>order by</code> ,那么该视图中的 <code>order by</code> 将被覆盖 </li><li>视图可以和表一起使用</li></ul><h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><p><strong>牛客：针对actor表创建视图actor_name_view</strong></p><p><a href="https://www.nowcoder.com/practice/b9db784b5e3d488cbd30bd78fdb2a862?tpId=82&amp;&amp;tqId=29806&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/sql/question-ranking" target="_blank" rel="noopener">牛客：针对actor表创建视图actor_name_view</a></p><p><strong>题目描述：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">针对actor表创建视图actor_name_view，只包含first_name以及last_name两列，并对这两列重新命名，first_name为first_name_v，last_name修改为last_name_v：</span><br><span class="line">CREATE TABLE IF NOT EXISTS actor (</span><br><span class="line">actor_id smallint(5) NOT NULL PRIMARY KEY,</span><br><span class="line">first_name varchar(45) NOT NULL,</span><br><span class="line">last_name varchar(45) NOT NULL,</span><br><span class="line">last_update timestamp NOT NULL DEFAULT (datetime(&apos;now&apos;,&apos;localtime&apos;)))</span><br></pre></td></tr></table></figure><p>分析：写视图就是先思考select语句即可</p><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create view actor_name_view  as select first_name as first_name_v , last_name as last_name_v from actor;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-事务管理</title>
      <link href="/2019/01/05/11-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/05/11-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="11-事务管理"><a href="#11-事务管理" class="headerlink" title="11-事务管理"></a>11-事务管理</h1><p>事务就是一组DML语句组成，这些语句在逻辑上存在着相关性，这一组DML语句要么成功，要么全部失败，是一个整体。MySQL提供一种机制，保证我们达到这样的效果。事务还规定不同的客户端看到的数据是不相同的。</p><p>事务处理是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果。利用事务处理，可保证一组操作不会中途停止，他们或者作为整体执行，或者完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表。如果发生错误，则进行回退（撤销操作）以恢复数据库到某个已知且安全的状态。</p><a id="more"></a><p>基本术语：</p><blockquote><ul><li><strong>事务（transaction）指一组SQL语句；</strong></li><li><strong>回退（rollback）指撤销指定SQL语句的过程</strong></li><li><strong>提交（Commit）指将未储存的SQL语句结果写入数据库表；</strong></li><li><strong>保留点（savepoint）指事处理中设置的临界占位符（place-holder），你可以对它发布退回（与回退整个事务处理不同）</strong></li></ul></blockquote><h2 id="11-2-事务处理基本操作"><a href="#11-2-事务处理基本操作" class="headerlink" title="11.2  事务处理基本操作"></a>11.2  事务处理基本操作</h2><p>案例：</p><p>银行转账的例子更需要考虑事务问题。</p><ul><li><p>创建测试表</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table account(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(50) not null default &apos;&apos;,</span><br><span class="line">    -&gt; balance decimal(10,2) not null default 0.0</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure></li><li><p>开始一个事务</p><p><code>start transaction</code>  <code>begin</code></p></li><li><p>创建一个保存点</p><p><code>savepoint 保存点名</code></p></li><li><p>回到保存点（根据具体情况）</p><p><code>rollback to 保存点名</code> <code>release savepoint</code></p></li><li><p>提交结束当前事务</p><p><code>commit;</code> <code>rollback</code></p></li><li><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction; -- 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint aa; -- 设置保存点aa</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(1,&apos;张三&apos;,10); --添加一条存款记录</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; savepoint bb; -- 设置保存点bb</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(2,&apos;李四&apos;，100000)； -- 再添加一条记录</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into account values(2,&apos;李四&apos;,100000); -- 再添加一条存款记录</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from account; -- 两条记录都在</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">| id | name   | balance   |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">|  1 | 张三   |     10.00 |</span><br><span class="line">|  2 | 李四   | 100000.00 |</span><br><span class="line">+----+--------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback to bb;  -- 发现后来添加这一条记录是误操作。所以回滚到bb状态 </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from account; -- 第二条记录没了</span><br><span class="line">+----+--------+---------+</span><br><span class="line">| id | name   | balance |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">|  1 | 张三   |   10.00 |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-2事务处理注意事项"><a href="#11-2事务处理注意事项" class="headerlink" title="11.2事务处理注意事项"></a>11.2事务处理注意事项</h2><ul><li><p>如果没有设置保存点，也可以回滚，只是回滚到事务的开始。直接使用 rollback(前提事务还没有提交)</p></li><li><p>如果一个事务被提交了（Commit）,则不可以回退（rollback）</p></li><li><p>可以选择回退到哪一个保存点</p></li><li><p>innnoDB支持事务，MyISAM不支持事务</p></li><li><p>开始事务 start transaction</p></li><li><p>rollback只能在一个事务处理内使用（在执行一条start transaction命令之后）</p></li></ul><h3 id="小tips"><a href="#小tips" class="headerlink" title="小tips:"></a>小tips:</h3><blockquote><p><strong>事务处理用来管理insert,update和delete语句，不能回退select,create,drop语句，如果你执行回退，他们不会被撤销。</strong>DDL语句和隐式修改MySQL构架的语句：<code>set password</code> ,<code>create user</code>…</p><p>管理语句：<code>cache index</code> <code>load indeex</code>  <code>analyze table</code>…</p></blockquote><h2 id="11-3使用Commit"><a href="#11-3使用Commit" class="headerlink" title="11.3使用Commit"></a>11.3使用Commit</h2><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这就是所谓的隐含提交(implicit commot)，即提交（写或保存）操作就是自动进行的。</p><p>但是在事务处理块中，提交不会隐含地进行。为进行明确地提交，使用commit语句。commit语句后当前事务就已经结束了，在事务中保存地回退点就不再存在了。</p><p>【以下仅个人理解】</p><p>可以这样理解事务地执行过程，开始一个事务后所有的SQL语句（insert，delete,update）执行的结果都在内存中保存并未真实的写入物理磁盘中（文件），一个回退点就相当标记当前时刻临时表中（内存）的状态，当执行回退时，就像栈一样的之前的语句从语句栈中弹出，返回表的回退点的状态。</p><p><strong>当commit执行后，或者rollback语句执行后事务回关闭。</strong>将内存中的有效SQL语句对应表写回物理磁盘中表（文件）  【<strong>此处的rollback语句并非是<code>rollback to 回退点</code>语句，回滚的回退点的语句并不能真正结束事务，还需显示的调用commit 或 rollback语句</strong>】</p><p><strong>当一个事务中某行语句执行出错时，commit之前的一条语句，则自动回退到执行错误语句的前面且事务并没有被提交，假如再使用<code>start transaction</code>则会提交之前的事务，开始新的事务。</strong></p><h3 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips:"></a>小Tips:</h3><blockquote><p>隐含事务关闭：当commit执行后，或者rollback语句执行后事务回关闭，事务回自动关闭（将来的更改将会隐式的提交）</p></blockquote><h2 id="11-4使用保留点"><a href="#11-4使用保留点" class="headerlink" title="11.4使用保留点"></a>11.4使用保留点</h2><p>简单的rollback和commit语句就可以写入或撤回整个事务处理。但是，只是对简单的事务处理才能这样做，更复杂的事务处理可能需要部分提交或回退。</p><p>回退点<code>savepoint 回退点名称</code> ，如果重复使用回退点的名称，则覆盖新的回退点。</p><p><strong>释放保留点</strong>：<code>rollback to 保留点名称</code> 、release savepoint(MySQL 5以来)</p><h2 id="11-5更改默认的提交行为"><a href="#11-5更改默认的提交行为" class="headerlink" title="11.5更改默认的提交行为"></a>11.5更改默认的提交行为</h2><p>默认MySQL行为是自动提交所有更改。换句话说，任何时候你执行一条MySQL语句，该语句实际上就是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br></pre></td></tr></table></figure><p>autocommit标志决定是否自动提交更改，不管有没有commit语句。设置autocommit 为（假 0）指示MySQL不自动提交更改（直到autocommit被设置为真为止）</p><blockquote><p>改标志autocommit针对每一个连接而不是服务器的。</p></blockquote><h2 id="11-6-事务的隔离级别"><a href="#11-6-事务的隔离级别" class="headerlink" title="11.6 事务的隔离级别"></a>11.6 事务的隔离级别</h2><p>当我们有多个客户端同时操作数据库的某张表，如何进行隔离操作？MySQL提供了个隔离级别</p><p>当MySQL表被多个线程或者客户端开启各自事务操作数据库中的数据库时，MySQL提供了一种机制，可以让不同的事务操作数据时，具有隔离性。从而保证数据的一致性。</p><h3 id="11-6-1无隔离性的带来问题"><a href="#11-6-1无隔离性的带来问题" class="headerlink" title="11.6.1无隔离性的带来问题"></a>11.6.1无隔离性的带来问题</h3><p>1.脏读</p><p>是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交数据中，这时，另外事务也访问这个数据，然后使用了这个不是最新的数据。</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Mary的原工资为1000，财务人员将Mary的工资改为8000（但未提交事务）</span><br><span class="line">2.Mary读取自己的工资，发现自己的工资变为8000，很开心！</span><br><span class="line">3.而财务发现自己操作有误，回滚了事务，Marry工资变为了1000，Marry读到的工资数8000是一个脏数据。</span><br><span class="line">解决:在事务修改完成并提交后才可以读取到数据，则可避免该问题</span><br></pre></td></tr></table></figure><p>2.不可重复读</p><p>是指一个事务内，多次读同一数据。在这个事务还没结束时，另外一个事务也访问该同一数据。那么，在第一个事务中两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据有可能不一样。这样读发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复度。（即不读到相同的数据内容）</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.在事务1中，Marry读取到自己工资为1000，操作并没有完成。</span><br><span class="line">2.在事务2中，这时财务人员修改了Marry的工资为2000，并提交事务。</span><br><span class="line">3.在事务1中，Marry再次读取到自己的工资时，工资变了2000</span><br><span class="line">解决方法：在事务修改完成并提交后才可以读取到数据，则可避免该问题</span><br></pre></td></tr></table></figure><p>3.幻读</p><p>是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改设计到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入了一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就像发生了幻觉一样。</p><p>如以下场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">目前工资为1000的员工有10人。   </span><br><span class="line">1.事务1,读取所有工资为1000的员工。    </span><br><span class="line">2.这时事务2向employee表插入了一条员工记录，工资也为1000    </span><br><span class="line">3.事务1再次读取所有工资为1000的员工 共读取到了11条记录，          </span><br><span class="line">解决办法：如果在操作事务完成数据处理之前，任何其他事务都不可以添加新数据，则可避免该问题</span><br></pre></td></tr></table></figure><p><strong>备注</strong>：不可重复读的<strong>重点是修改</strong>：同样的条件, 你读取过的数据,再次读取出来发现值不一样了 幻读的重点在 于新增或者删除：同样的条件, 第1次和第2次读出来的记录数不一样</p><h3 id="11-6-2事务的隔离级别"><a href="#11-6-2事务的隔离级别" class="headerlink" title="11.6.2事务的隔离级别"></a>11.6.2事务的隔离级别</h3><table><thead><tr><th>隔离级别</th><th style="text-align:left">脏读</th><th style="text-align:left">不可重复读</th><th style="text-align:left">幻读</th><th style="text-align:left">加锁读</th></tr></thead><tbody><tr><td></td><td style="text-align:left">1修改未提交2读1回滚2读</td><td style="text-align:left">1读2修改提交1再读</td><td style="text-align:left">1读2增加3读（发现多了一条数据）</td><td style="text-align:left"></td></tr><tr><td>读未提交(read uncommitter）</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>读已提交(read committed)</td><td style="text-align:left">✖</td><td style="text-align:left">✔</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>可重复读(repeatable read)</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">✔</td><td style="text-align:left">不加</td></tr><tr><td>可串行化读(serializable)</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">✖</td><td style="text-align:left">加锁</td></tr></tbody></table><ul><li>设置事务的隔离级别</li></ul><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><ul><li>查看当前隔离级别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>隔离级别：客串行化例子：</li></ul><ol><li>当客户端A在执行select过程中（还没有提交结束事务），DBMS会对库加锁，如果这时客户端B执行插入，只要还没释放锁，插入不进去，会将B的update语句放入阻塞队列，直到释放了锁或超时。</li></ol><blockquote><p><strong>说明：mysql默认的隔离级别是可重复读，一般情况下不要修改，修改完后一定要修改回去，要不然就会一直保持直到关闭客户端。</strong></p></blockquote><h2 id="11-7事务的ACID特性"><a href="#11-7事务的ACID特性" class="headerlink" title="11.7事务的ACID特性"></a>11.7事务的ACID特性</h2><ul><li><strong>原子性（Atomicity）</strong></li></ul><p>事务是应用中最小的执行单位，具有不可再分的特征，事务是应用中不可再分的最小逻辑执行体。</p><ul><li><strong>一致性（Consistency</strong>）</li></ul><p>事务执行的结果，必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库只包含事务成功提交的结果 时，数据库处于一致性状态。如果系统运行发生中断，某个事务尚未完成而被迫中断，而改未完成的事务对数据库 所做的修改已被写入数据库，此时数据库就处于一种不正确（不一致）的状态。因此一致性是通过原子性来保证的。</p><ul><li><strong>隔离性（lsolation）</strong></li></ul><p>各种事务的执行互不干扰，任意一个事务的内部操作对其他并发事务都是隔离的。也就是说，并发执行的事务之间不能看到对方的中间状态。并发执行的事务之间不能互相影响。</p><ul><li><strong>持久性（Durability）</strong></li></ul><p>持久性是指一个事务一旦被提交，它对数据库所做的改变都要记录到永久存储其中（如：磁盘）。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-索引特性</title>
      <link href="/2019/01/04/10-%E7%B4%A2%E5%BC%95%E7%89%B9%E6%80%A7/"/>
      <url>/2019/01/04/10-%E7%B4%A2%E5%BC%95%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="10索引特性（重点-）"><a href="#10索引特性（重点-）" class="headerlink" title="10索引特性（重点**）"></a>10索引特性（重点**）</h1><p>索引：提高数据库的性能，索引是物美价廉的东西。不用增加内存，不用该程序，不用调sql ,只要执行正确的<code>create index</code>，查询 ==速度== 就能提高成百上千倍。但是查速度的提高是以插入，更新，删除的速度为代价的，这些写操作，增加了大量的IO。所以它的价值，在于提高==海量数据的键锁速度==。</p><p><strong>常见索引分为：</strong></p><ul><li>主键索引（primary key)</li><li>唯一键索引（unique）</li><li>普通索引 (index)</li><li>全文索引（fulltext）–解决中文索引问题</li></ul><p><strong>索引部分目前只做简单学习，下来将索引部分详细研究后再对本篇博客做补充。</strong></p><a id="more"></a><p><strong>练习</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">-- 构建一个8000000条记录的数据 --构建的海量表数据需要有差异性，所以使用存储过程来创建， 拷贝下面代码就可以了，暂时不用理解</span><br><span class="line"> </span><br><span class="line">-- 产生随机字符串 </span><br><span class="line">delimiter $$ </span><br><span class="line">create function rand_string(n INT) </span><br><span class="line">returns varchar(255) </span><br><span class="line">begin  </span><br><span class="line">declare chars_str varchar(100) default   &apos;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&apos;; </span><br><span class="line">declare return_str varchar(255) default &apos;&apos;; </span><br><span class="line">declare i int default 0; </span><br><span class="line">while i &lt; n do    </span><br><span class="line">set return_str =concat(return_str,substring(chars_str,floor(1+rand()*52),1));   set i = i + 1;   </span><br><span class="line">end while;  </span><br><span class="line">return return_str;  </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">--产生随机数字 delimiter $$ </span><br><span class="line">create function rand_num() </span><br><span class="line">returns int(5) </span><br><span class="line">begin  </span><br><span class="line">declare i int default 0; </span><br><span class="line">set i = floor(10+rand()*500); </span><br><span class="line">return i; </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">--创建存储过程，向雇员表添加海量数据 </span><br><span class="line">delimiter $$ </span><br><span class="line">create procedure insert_emp(in start int(10),in max_num int(10))</span><br><span class="line">begin </span><br><span class="line">declare i int default 0;  </span><br><span class="line">set autocommit = 0;   </span><br><span class="line">repeat  set i = i + 1;  </span><br><span class="line">insert into EMP values ((start+i) ,rand_string(6),&apos;SALESMAN&apos;,0001,curdate(),2000,400,rand_num());  </span><br><span class="line">until i = max_num </span><br><span class="line">end repeat; </span><br><span class="line">commit; </span><br><span class="line">end $$ </span><br><span class="line">delimiter ;</span><br><span class="line"> -- 执行存储过程，添加8000000条记录 </span><br><span class="line"> call insert_emp(100001, 8000000);</span><br></pre></td></tr></table></figure><p>目前没有进行mysql sql编程的经验，以下只做这几点的概述。</p><p>关于<code>delimiter $$</code>的意思</p><blockquote><p>将分隔符； 临时性的改为$$  防止在函数中出现” ; “会导致直接执行。<code>用完后改回来。delimiter ;</code></p></blockquote><p>建立处海量数据的表（8000000条数据）</p><ul><li><p>查询员工编号为9998877的员工，MySQL会从第一条数据开始遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp whrer empno=998877;</span><br></pre></td></tr></table></figure><p>耗时4.93秒（耗时时间跟储存介质即电脑中储存mysql数据的硬盘有关），在实际项目中，本机是由一个人来操作的，假如放到公网中，同时又10000个人并发查询，则就可能引起死机</p><p><strong>解决办法：</strong>创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table emp add index(empno);</span><br></pre></td></tr></table></figure><p>耗时0.1秒都不到大大加快了查询速度，但是创建索引的过程还是耗时挺久的4秒左右。</p><p>粗略估计增加了快500倍。</p></li></ul><h2 id="10-1查询过程中的基本原理"><a href="#10-1查询过程中的基本原理" class="headerlink" title="10.1查询过程中的基本原理"></a>10.1查询过程中的基本原理</h2><ul><li><p>没有索引时：执行<code>select * from emp whrer empno=998877;sql语句是对这张存有海量数据的表进行整表的查询</code></p></li><li><p>而增加索引，会让表中数据形成一棵树（MySQL 中默认引擎innodb是形成一颗B+树）影响查询速度的是<strong>树的深度</strong></p><p>B+树 是 普通二叉树的升级版，减少了树的深度。</p><p>B+Tree：详解</p><p><a href="https://zhuanlan.zhihu.com/p/24309634" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24309634</a></p></li></ul><h2 id="10-2创建索引"><a href="#10-2创建索引" class="headerlink" title="10.2创建索引"></a>10.2创建索引</h2><h3 id="10-2-1创建主键索引"><a href="#10-2-1创建主键索引" class="headerlink" title="10.2.1创建主键索引"></a>10.2.1创建主键索引</h3><ul><li><p>第一种方式：</p><p>==在创建表的时候，直接在字段名后面直接指定<code>primay key</code>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(30)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><p>==在创建表最后，指定某列或者几列为主键索引==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>第三种方式：</p><p>==创建表之后再添加主题==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ccreate table  user3(</span><br><span class="line">    id int, </span><br><span class="line">    name varchar(30)</span><br><span class="line">); </span><br><span class="line">-- 创建表以后再添加主键 </span><br><span class="line">alter table user3 add primary key(id);</span><br></pre></td></tr></table></figure></li></ul><p><strong>主键索引的特点</strong>：</p><ul><li>一个表中，最多有一个主键索引，当然可以使复合主键 </li><li>主键索引的效率高（主键不可重复） </li><li>创建主键索引的列，它的值不能为null，且不能重复 </li><li>主键索引的列基本上是int</li></ul><h3 id="10-2-2唯一键的创建"><a href="#10-2-2唯一键的创建" class="headerlink" title="10.2.2唯一键的创建"></a>10.2.2唯一键的创建</h3><ul><li><p>第一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 在表定义时，在某列后直接指定unique唯一属性。 </span><br><span class="line">create table user4(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表时，在表的后面指定某列或某几列为unique </span><br><span class="line">create table user5(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30), </span><br><span class="line">    unique(name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>第三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table user6(</span><br><span class="line">    id int primary key, </span><br><span class="line">    name varchar(30)</span><br><span class="line">）； </span><br><span class="line">-- </span><br><span class="line">alter table user6 add unique(name);</span><br></pre></td></tr></table></figure></li></ul><p><strong>唯一索引的特点：</strong></p><ul><li>一个表中，可以有多个唯一索引 </li><li>查询效率高 如果在某一列建立唯一索引，必须保证这列不能有重复数据 </li><li>==如果一个唯一索引上指定not null，等价于主键索引==</li></ul><h3 id="10-2-3-普通索引的创建"><a href="#10-2-3-普通索引的创建" class="headerlink" title="10.2.3 普通索引的创建"></a>10.2.3 普通索引的创建</h3><ul><li>第一种方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user8(id int primary key,     </span><br><span class="line">name varchar(20),     </span><br><span class="line">email varchar(30),     </span><br><span class="line">index(name) --在表的定义最后，指定某列为索引 </span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>第二种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table user9(id int primary key,  name varchar(20),  email varchar(30)); </span><br><span class="line">alter table user9 add index(name); </span><br><span class="line">-- 创建完表以后指定某列为普通索引</span><br></pre></td></tr></table></figure></li><li><p>第三种方式</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table user10(id int primary key,  </span><br><span class="line">name varchar(20),  </span><br><span class="line">email varchar(30)</span><br><span class="line">); </span><br><span class="line">-- 创建一个索引名为 idx_name 的索引    </span><br><span class="line">create index idx_name on user10(name);</span><br></pre></td></tr></table></figure><p>普通索引的特点：</p><ul><li>一个表中可以有多个普通索引，普通索引在实际开发中用的比较多 </li><li>如果某列需要创建索引，==但是该列有重复的值==，那么我们就应该使用普通索引 </li></ul><h3 id="10-2-4全文索引"><a href="#10-2-4全文索引" class="headerlink" title="10.2.4全文索引"></a>10.2.4全文索引</h3><p>当文章字段或有大量文字的字段进行检索时，会使用到全文索引。MySQL提供全文索引机制。之前是只有在MyISAM引擎，现在innodb引擎也支持全文索引。但是默认支持的是英文，你不支持中文。</p><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE articles (    </span><br><span class="line">id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,    </span><br><span class="line">title VARCHAR(200),    </span><br><span class="line">body TEXT,    </span><br><span class="line">FULLTEXT (title,body) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO articles (title,body) VALUES    </span><br><span class="line">(&apos;MySQL Tutorial&apos;,&apos;DBMS stands for DataBase ...&apos;),    </span><br><span class="line">(&apos;How To Use MySQL Well&apos;,&apos;After you went through a ...&apos;),    </span><br><span class="line">(&apos;Optimizing MySQL&apos;,&apos;In this tutorial we will show ...&apos;),    </span><br><span class="line">(&apos;1001 MySQL Tricks&apos;,&apos;1. Never run mysqld as root. 2. ...&apos;),    </span><br><span class="line">(&apos;MySQL vs. YourSQL&apos;,&apos;In the following database comparison ...&apos;),    </span><br><span class="line">(&apos;MySQL Security&apos;,&apos;When configured properly, MySQL ...&apos;);</span><br></pre></td></tr></table></figure><ul><li>查询有没有’database‘数据</li></ul><p>如果使用如下方式查询，虽然查询出结果，但是没有用到全文索引.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from artices where body like &apos;%database%&apos;;</span><br><span class="line"></span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">| id | title             | body                                     |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |</span><br><span class="line">|  5 | MySQL vs. YourSQL | In the following database comparison ... |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br></pre></td></tr></table></figure><p>可以使用explain工具看一下，是否使用到索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from articles where body like &apos;database&apos;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE  -- ：简单查询</span><br><span class="line">        table: articles</span><br><span class="line">   partitions: NULL   -- possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</span><br><span class="line">         type: ALL    -- ：全表查询</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL   -- &lt;==key为null表示没有用到索引</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL    -- 显示索引的哪一列被使用了，如果可能的话，是一个常数</span><br><span class="line">         rows: 6       -- ：这个值是innodb预估的一个值(并不是是一个准确值)MYSQL认为必须检查的用来返回请求数据的行数</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.02 sec)</span><br></pre></td></tr></table></figure><ul><li>全文索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select * from articles</span><br><span class="line">    -&gt; where match(title,body) against (&apos;database&apos;);</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">| id | title             | body                                     |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |</span><br><span class="line">|  5 | MySQL vs. YourSQL | In the following database comparison ... |</span><br><span class="line">+----+-------------------+------------------------------------------+</span><br><span class="line">2 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure><p>通过explain来分析这个sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  explain SELECT * FROM articles WHERE MATCH (title,body) AGAINST (&apos;database&apos;)\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: articles</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: fulltext  -- 全文索引</span><br><span class="line">possible_keys: title</span><br><span class="line">          key: title     -- &lt;=key 用到了title</span><br><span class="line">      key_len: 0</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>关于explain 分析后的结果参数内容含义解释如下：<a href="https://www.cnblogs.com/yycc/p/7338894.html" target="_blank" rel="noopener">https://www.cnblogs.com/yycc/p/7338894.html</a></p><h2 id="10-3查询索引"><a href="#10-3查询索引" class="headerlink" title="10.3查询索引"></a>10.3查询索引</h2><ul><li>第一种方法： <code>show key from 表明</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show keys from articles\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: articles  -- :表名</span><br><span class="line">   Non_unique: 0   -- 0表示唯一索引</span><br><span class="line">     Key_name: PRIMARY-- &lt;=主键索引</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id-- 索引在那里列</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null:</span><br><span class="line">   Index_type: BTREE   ： -- 以二叉树形式的索引</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: articles</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: title</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: title</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">        Table: articles</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: title</span><br><span class="line"> Seq_in_index: 2</span><br><span class="line">  Column_name: body</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 6</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><p>第二种方式：<code>show index from 表明;</code></p></li><li><p>第三种方式（信息比较简略）：<code>desc 表明：</code></p></li></ul><h2 id="10-4删除索引"><a href="#10-4删除索引" class="headerlink" title="10.4删除索引"></a>10.4删除索引</h2><ul><li>第一种方法-删除主键索引：<code>alter table 表明 drop primary key;</code></li><li>第二种方法-其他索引的删除： <code>alter table 表明 drop index 索引名; 索引名就是show keys from 表名种的key_name字段</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user10 drop index idx_name;</span><br></pre></td></tr></table></figure><ul><li>第三种方法方法：drop index 索引名 on 表名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index name on user10;</span><br></pre></td></tr></table></figure><h2 id="10-5索引创建原则"><a href="#10-5索引创建原则" class="headerlink" title="10.5索引创建原则"></a>10.5索引创建原则</h2><ul><li>比较频繁作为查询条件的字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件（主要业务的要求）</li><li>更新非常频繁的字段不适合当作创建索引</li><li>不会出现在where子句中的字段不该创建索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-表的内外连接</title>
      <link href="/2019/01/03/09-%E8%A1%A8%E7%9A%84%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/01/03/09-%E8%A1%A8%E7%9A%84%E5%86%85%E5%A4%96%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>配合食用效果极佳 </strong></p><p><strong>内连接查询：</strong>往往使用频繁，可以配合多种查询方法食用。</p><p>内连接就是两表的笛卡儿积表的基础上进行筛选</p><p><strong>外连接查询：</strong>首先要确定<strong>基准表</strong>（<strong>基准信息</strong>），即左连接的左表，右连接的右表。然后确定<strong>结合表</strong>，结合表需要的筛选条件。</p><a id="more"></a><h1 id="09-表的内外连接"><a href="#09-表的内外连接" class="headerlink" title="09 表的内外连接"></a>09 表的内外连接</h1><h2 id="9-1内链接"><a href="#9-1内链接" class="headerlink" title="9.1内链接"></a>9.1内链接</h2><p>内连接实际上就是利用where子句对两种表形成的笛卡儿积进行筛选，我们前面学习的查询都是内连接，也是在开发过程中使用的最多的连接查询</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表1 inner join 表2 on 连接条件 and其他连接条件;</span><br></pre></td></tr></table></figure><blockquote><p>之前学的就是内连接</p></blockquote><p>显示smith的名字和部门名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 之前写法</span><br><span class="line">select ename,dename from emp,dept where emp.deptno=dept.deptno and ename=&apos;smith&apos;;</span><br><span class="line"></span><br><span class="line">-- 标准内连接写法</span><br><span class="line">select ename,dename from emp inner join dept on emp.deptno=dept.depyno and ename=&apos;smith&apos;;</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>inner join就是inner join两个表的笛卡儿积中筛选on 后的条件</p><h2 id="9-2外连接"><a href="#9-2外连接" class="headerlink" title="9.2外连接"></a>9.2外连接</h2><p>外连接分为左连接右连接。（记住一种自己熟悉的即可）</p><h3 id="9-2-1左外连接"><a href="#9-2-1左外连接" class="headerlink" title="9.2.1左外连接"></a>9.2.1左外连接</h3><p><strong>左外连接:</strong>  如果联合查询的时，左侧的表我们完全显示 </p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名1 left join 表名2 on 连接条件</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>left join就是左表（一定显示）和右表中on后筛选后的表的结合（以左表为基础上添加（符合筛选条件的）右表）</p><h3 id="9-2-2右外连接"><a href="#9-2-2右外连接" class="headerlink" title="9.2.2右外连接"></a>9.2.2右外连接</h3><p><strong>右连接：</strong>如果联合查询，右侧的表完全显示我们就说是右外连接。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表明1 right join 表明2 on 连接条件</span><br></pre></td></tr></table></figure><p><strong>理解：</strong>left join就是右表（一定显示）和左表中on后筛选后的表的结合（以右表为基础上添加（符合筛选条件的）左标）</p><p><strong>小练习：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 键两张表</span><br><span class="line">create table stu (id int, name varchar(30));  -- 学生表 </span><br><span class="line">insert into stu values(1,&apos;jack&apos;),(2,&apos;tom&apos;),(3,&apos;kity&apos;),(4,&apos;nono&apos;); </span><br><span class="line"></span><br><span class="line">create table exam (id int, grade int);  -- 成绩表</span><br><span class="line">insert into exam values(1, 56),(2,76),(11, 8);</span><br></pre></td></tr></table></figure><ul><li><p><strong>查询所有学生的成绩，如果没有这个学生的成绩，也要将学生的个人信息显示出来。</strong></p><p><strong>分析：</strong>关键字:所有学生， 成绩，（没有成绩也要显示出来） （<strong>以学生表为基准表，结合成绩表</strong>）外连接（左右都可以）</p><p><strong>左外连接：</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu left inner exam on stu.id=exam.id;</span><br></pre></td></tr></table></figure><p>​    <strong>右外连接：</strong>（不适合，因为一般都是基准表在结合表的前面显示）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stu.* from exam right inner stu on stu.id=exam.id;</span><br><span class="line"></span><br><span class="line">-- 改为：（太麻烦）</span><br><span class="line">select stu.id ,stu.name,exam.id,exam.grade from exam right join stu on stu.id=exam.id;</span><br></pre></td></tr></table></figure><ul><li><strong>对stu表和exam表联合查询，把所有的成绩都显示出来，即使这个成绩没有学生与它对应，也要显示出来</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu right join exam on stu.id=exam.id;</span><br></pre></td></tr></table></figure><ul><li><p><strong>列处部门名称和这些部门的员工信息，同时列出没有员工的部门</strong></p><p><strong>分析：</strong>关键字（部门名称，这些部分的员工信息，列出没有员工的部门）（<strong>以部门名称基准表，结合与员工表</strong>）外连接（左右都可以）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 方法一：</span><br><span class="line">select d.dname, e.* from dept d left join emp e on d.deptno=e.deptno; </span><br><span class="line">-- 方法二： </span><br><span class="line">select d.dname, e.* from emp e right join dept d on d.deptno=e.deptno;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote><p>内连接查询：往往使用频繁，可以配合多种查询方法食用。</p><p>内连接就是两表的笛卡儿积表的基础上进行筛选</p><p>外连接查询：首先要确定<strong>基准表</strong>（<strong>基准信息</strong>），即左连接的左表，右连接的右表。然后确定<strong>结合表</strong>，结合表需要的筛选条件。</p></blockquote><blockquote><p><strong>SQL</strong>查询中各个关键字的执行先后顺序：</p><p>from &gt; on&gt; join &gt; where &gt; group by &gt; with &gt; having &gt; select &gt; distinct &gt; order by &gt; limit</p></blockquote><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>1.<a href="https://leetcode-cn.com/problems/rank-scores/" target="_blank" rel="noopener">178. 分数排名</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</span><br><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Create table If Not Exists Scores (Id int, Score DECIMAL(3,2))；</span><br><span class="line">Truncate table Scores</span><br><span class="line">insert into Scores (Id, Score) values (&apos;1&apos;, &apos;3.5&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;2&apos;, &apos;3.65&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;3&apos;, &apos;4.0&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;4&apos;, &apos;3.85&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;5&apos;, &apos;4.0&apos;)；</span><br><span class="line">insert into Scores (Id, Score) values (&apos;6&apos;, &apos;3.65&apos;)；</span><br></pre></td></tr></table></figure><p><strong>解答</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">a.Score as Score,</span><br><span class="line">count(*) as Rank</span><br><span class="line">from Scores a inner join (select distinct Score from Scores ) b </span><br><span class="line">where a.Score&lt;=b.Score</span><br><span class="line">group by a.id</span><br><span class="line">order by Rank;</span><br></pre></td></tr></table></figure><p>2.<a href="https://leetcode-cn.com/problems/exchange-seats/" target="_blank" rel="noopener">626. 换座位</a></p><p><strong>题目描述：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</span><br><span class="line"></span><br><span class="line">其中纵列的 id 是连续递增的</span><br><span class="line"></span><br><span class="line">小美想改变相邻俩学生的座位。</span><br><span class="line"></span><br><span class="line">你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</span><br><span class="line"></span><br><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习复合查询</title>
      <link href="/2019/01/03/MySQL%E7%BB%83%E4%B9%A0%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/01/03/MySQL%E7%BB%83%E4%B9%A0%E5%A4%8D%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>复合查询（重点）</strong></p><ul><li>函数得使用</li></ul><ul><li><p>多表查询</p></li><li><p>自连接</p></li><li><p>子查询</p></li></ul><a id="more"></a><h1 id="07-MySQL-函数"><a href="#07-MySQL-函数" class="headerlink" title="07-MySQL 函数"></a>07-MySQL 函数</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote><p>查找字符串’10,A,B’ 中逗号’,’出现的次数cnt。</p></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(&apos;10,A,B&apos;)-length(replace(&apos;10,A,B&apos;, &apos;,&apos; ,&apos;&apos;)) as cnt;</span><br></pre></td></tr></table></figure><h1 id="08-MySQL-复合查询"><a href="#08-MySQL-复合查询" class="headerlink" title="08-MySQL 复合查询"></a>08-MySQL 复合查询</h1><h2 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote><p>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, s.salary from employees as e, salaries as s where e.emp_no =s.emp_no and e.hire_date = s.from_date order by e.emp_no desc;</span><br></pre></td></tr></table></figure><p><strong>解决2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, s.salary from employees as e inner join salaries as s on e.emp_no = s.emp_no and e.hire_date = s.from_date order by e.emp_no desc;</span><br></pre></td></tr></table></figure><h2 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2.题目描述"></a>2.题目描述</h2><blockquote><p>针对库中的所有表生成select count(*)对应的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; create table emp_bonus(</span><br><span class="line">&gt; emp_no int not null,</span><br><span class="line">&gt; recevied datetime not null,</span><br><span class="line">&gt; btype smallint not null);</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_emp` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&apos;select count(*) from &apos;,t.TABLE_NAME,&apos;;&apos;) AS cnts  from (select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database()) t;</span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;select count(*) from &quot;||name||&quot;;&quot; as cnts  from sqlite_master where type=&apos;table&apos;</span><br></pre></td></tr></table></figure><h2 id="3-题目描述"><a href="#3-题目描述" class="headerlink" title="3.题目描述"></a>3.题目描述</h2><blockquote><p>获取所有非manager的员工emp_no</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no from employees as e left join dept_manager as d on e.emp_no =d.emp_no where d.dept_no is null</span><br></pre></td></tr></table></figure><h2 id="4-题目描述"><a href="#4-题目描述" class="headerlink" title="4.题目描述"></a>4.题目描述</h2><blockquote><p>获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。<br>结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_emp` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, m.emp_no as manager_no from dept_emp as e inner join dept_manager as m on e.dept_no = m.dept_no where e.to_date = &apos;9999-01-01&apos; and m.to_date = &apos;9999-01-01&apos; and e.emp_no != m.emp_no;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
            <tag> MySQL数据库练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习</title>
      <link href="/2019/01/02/MySQL%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/01/02/MySQL%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL基本查询得练习（基础部分）</strong></p><p>MySQL学习得关键多连多练多练！！！</p><a id="more"></a><h1 id="MySQL小练"><a href="#MySQL小练" class="headerlink" title="MySQL小练"></a>MySQL小练</h1><h2 id="06-MySQL基本查询"><a href="#06-MySQL基本查询" class="headerlink" title="06-MySQL基本查询"></a>06-MySQL基本查询</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><blockquote><p>对于表actor批量插入如下数据<br>`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE  IF NOT EXISTS actor  (`</span><br><span class="line">&gt; `actor_id  smallint(5)  NOT NULL PRIMARY KEY,`</span><br><span class="line">&gt; `first_name  varchar(45) NOT NULL,`</span><br><span class="line">&gt; `last_name  varchar(45) NOT NULL,`</span><br><span class="line">&gt; `last_update  timestamp NOT NULL DEFAULT (datetime(&apos;now&apos;,&apos;localtime&apos;)))`</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into actor(actor_id,first_name,last_name,last_update) values</span><br><span class="line">(1,&apos;PENELOPE&apos;,&apos;GUINESS&apos;,&apos;2006-02-15 12:34:33 &apos;),</span><br><span class="line">(2,&apos;NICK&apos;,&apos;WAHLBERG&apos;,&apos;2006-02-15 12:34:33&apos;);</span><br></pre></td></tr></table></figure><h3 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2. 题目描述"></a>2. 题目描述</h3><blockquote><p>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct salary from salaries where to_date = &apos;9999-01-01&apos; order by salary desc;</span><br></pre></td></tr></table></figure><h3 id="3-题目描述"><a href="#3-题目描述" class="headerlink" title="3. 题目描述"></a>3. 题目描述</h3><blockquote><p>查找最晚入职员工的所有信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt;  PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt; </span><br><span class="line">&gt; **解答：</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees order by hire_date desc limit 1;</span><br></pre></td></tr></table></figure><h3 id="4-题目描述"><a href="#4-题目描述" class="headerlink" title="4. 题目描述"></a>4. 题目描述</h3><blockquote><p>查找入职员工时间排名倒数第三的员工所有信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `employees` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `birth_date` date NOT NULL,</span><br><span class="line">&gt; `first_name` varchar(14) NOT NULL,</span><br><span class="line">&gt; `last_name` varchar(16) NOT NULL,</span><br><span class="line">&gt; `gender` char(1) NOT NULL,</span><br><span class="line">&gt; `hire_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees order by hire_date desc limit 2,1;</span><br></pre></td></tr></table></figure><h3 id="5-题目描述"><a href="#5-题目描述" class="headerlink" title="5. 题目描述"></a>5. 题目描述</h3><blockquote><p>查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_no , count(distinct salary) t from salaries group by emp_no having t&gt;15;</span><br></pre></td></tr></table></figure><h3 id="6-题目描述"><a href="#6-题目描述" class="headerlink" title="6. 题目描述"></a>6. 题目描述</h3><blockquote><p>获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE `dept_manager` (</span><br><span class="line">&gt; `dept_no` char(4) NOT NULL,</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">&gt; CREATE TABLE `salaries` (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `salary` int(11) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date NOT NULL,</span><br><span class="line">&gt; PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select dept_no, d.emp_no ,salary from salaries as s ,dept_manager as d </span><br><span class="line">where s.emp_no = d.emp_no </span><br><span class="line">and d.to_date = &apos;9999-01-01&apos; </span><br><span class="line">and s.to_date = &apos;9999-01-01&apos;;</span><br></pre></td></tr></table></figure><h3 id="7-题目描述"><a href="#7-题目描述" class="headerlink" title="7. 题目描述"></a>7. 题目描述</h3><blockquote><p>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; CREATE TABLE IF NOT EXISTS &quot;titles&quot; (</span><br><span class="line">&gt; `emp_no` int(11) NOT NULL,</span><br><span class="line">&gt; `title` varchar(50) NOT NULL,</span><br><span class="line">&gt; `from_date` date NOT NULL,</span><br><span class="line">&gt; `to_date` date DEFAULT NULL);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title ,count(title) t from titles group by title having t&gt;=2;</span><br></pre></td></tr></table></figure><h3 id="8-LeetCode-182-查找重复的电子邮箱"><a href="#8-LeetCode-182-查找重复的电子邮箱" class="headerlink" title="8. LeetCode [182. 查找重复的电子邮箱]"></a>8. LeetCode [182. 查找重复的电子邮箱]</h3><blockquote><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Create table If Not Exists Person (</span><br><span class="line">&gt; Id int, </span><br><span class="line">&gt; Email varchar(255)</span><br><span class="line">&gt; );</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Email from Person group by Email having count(Email)&gt;1;</span><br></pre></td></tr></table></figure><h3 id="9-LeetCode-595-大的国家"><a href="#9-LeetCode-595-大的国家" class="headerlink" title="9. LeetCode [595.大的国家]"></a>9. LeetCode [595.大的国家]</h3><blockquote><p>这里有张 <code>World</code> 表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt; | name            | continent  | area       | population   | gdp           |</span><br><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt; | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">&gt; | Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">&gt; | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">&gt; | Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">&gt; | Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">&gt; +-----------------+------------+------------+--------------+---------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p><p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>例如，根据上表，我们应该输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt; | name         | population  | area         |</span><br><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt; | Afghanistan  | 25500100    | 652230       |</span><br><span class="line">&gt; | Algeria      | 37100000    | 2381741      |</span><br><span class="line">&gt; +--------------+-------------+--------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>World表：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Create table If Not Exists World (</span><br><span class="line">&gt; </span><br><span class="line">&gt; name varchar(255), </span><br><span class="line">&gt; </span><br><span class="line">&gt; continent varchar(255), </span><br><span class="line">&gt; </span><br><span class="line">&gt; area int, </span><br><span class="line">&gt; </span><br><span class="line">&gt; population int,</span><br><span class="line">&gt; </span><br><span class="line">&gt; gdp int</span><br><span class="line">&gt; </span><br><span class="line">&gt; )；</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name ,population,area from World where area&gt;3000000 or population&gt;25000000;</span><br></pre></td></tr></table></figure><h3 id="10-LeetCode-177-第N高薪水"><a href="#10-LeetCode-177-第N高薪水" class="headerlink" title="10. LeetCode[177.第N高薪水]"></a>10. LeetCode[177.第N高薪水]</h3><blockquote><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第 <em>n</em> 高的薪水（Salary）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; +----+--------+</span><br><span class="line">&gt; | Id | Salary |</span><br><span class="line">&gt; +----+--------+</span><br><span class="line">&gt; | 1  | 100    |</span><br><span class="line">&gt; | 2  | 200    |</span><br><span class="line">&gt; | 3  | 300    |</span><br><span class="line">&gt; +----+--------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>例如上述 <code>Employee</code> 表，<em>n = 2</em> 时，应返回第二高的薪水 <code>200</code>。如果不存在第 <em>n</em> 高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; +------------------------+</span><br><span class="line">&gt; | getNthHighestSalary(2) |</span><br><span class="line">&gt; +------------------------+</span><br><span class="line">&gt; | 200                    |</span><br><span class="line">&gt; +------------------------+</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  declare M Int;</span><br><span class="line">  Set M = N-1;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      select distinct Salary from Employee  order by Salary desc LIMIT M,1</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
            <tag> MySQL数据库练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/15/hello-world/"/>
      <url>/2018/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p><strong>博客开始2018</strong></p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SOYANGA</title>
  
  <subtitle>Hello World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://soyanga.github.io/"/>
  <updated>2019-11-18T15:27:22.426Z</updated>
  <id>https://soyanga.github.io/</id>
  
  <author>
    <name>SOYANGA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓学习笔记-5</title>
    <link href="https://soyanga.github.io/2019/11/18/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
    <id>https://soyanga.github.io/2019/11/18/安卓学习笔记-5/</id>
    <published>2019-11-18T15:19:19.000Z</published>
    <updated>2019-11-18T15:27:22.426Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Android学习笔记-5"><a href="#Android学习笔记-5" class="headerlink" title="Android学习笔记(5)"></a>Android学习笔记(5)</h1><p><img src="/2019/11/18/安卓学习笔记-5/Android生命周期.png" alt="Andorid生命周期"></p><a id="more"></a><h2 id="Android-stduio-DDMS调试使用"><a href="#Android-stduio-DDMS调试使用" class="headerlink" title="Android stduio  DDMS调试使用"></a>Android stduio  DDMS调试使用</h2><p><strong>Devices</strong>:查看当前运行程序（任务管理器）</p><p><strong>Emulator Control</strong>：可以向模拟器发送GPS地址，打入电话，发送短信</p><p><strong>LogCat:信息输入面板，日志输出：</strong></p><ul><li><strong>Log,v //输出冗余信息</strong></li><li><strong>Log.d //输出调试信息</strong></li><li><strong>Log.i //输出普通信息</strong></li><li><strong>Log.w //输出警告信息</strong></li><li><strong>Log.e //输出错误信息</strong></li></ul><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.v(<span class="string">"Tag_A,"</span>我是冗余信息<span class="string">")</span></span><br></pre></td></tr></table></figure><p>此时会在LogCat中输出信息Tag是标签，后面的string字符串是输出的Text内容</p><h2 id="ADT可视化开发-第三方开发工具"><a href="#ADT可视化开发-第三方开发工具" class="headerlink" title="ADT可视化开发/第三方开发工具"></a>ADT可视化开发/第三方开发工具</h2><p>可以对UI界面的控件进行拖动</p><h2 id="Keystore签名的作用"><a href="#Keystore签名的作用" class="headerlink" title="Keystore签名的作用"></a>Keystore签名的作用</h2><ul><li>保护应用程序</li><li>应用程序升级发布便利</li></ul><h2 id="Android基本组件的介绍"><a href="#Android基本组件的介绍" class="headerlink" title="Android基本组件的介绍"></a>Android基本组件的介绍</h2><h3 id="应用程序的生命周期"><a href="#应用程序的生命周期" class="headerlink" title="应用程序的生命周期"></a>应用程序的生命周期</h3><ul><li><strong>声明周期-进程周期</strong><ul><li><strong>创建到结束的过程</strong></li></ul></li><li><strong>进程类别</strong><ul><li>前台进程：直接显示的屏幕中</li><li>可见进程：保证前台进程正常运行</li><li>服务进程：后台任务管理</li><li>后台进程：作用不大缺少该进程不会影响app运行</li><li>空进程 ：提供缓存机制 没有任何其他作业</li></ul></li></ul><blockquote><p>注：重要程度由上到下</p><p>根据当前资源的由Android自主决定进程的销毁</p></blockquote><p><img src="/2019/11/18/安卓学习笔记-5/Android生命周期.png" alt="Andorid生命周期"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Android学习笔记-5&quot;&gt;&lt;a href=&quot;#Android学习笔记-5&quot; class=&quot;headerlink&quot; title=&quot;Android学习笔记(5)&quot;&gt;&lt;/a&gt;Android学习笔记(5)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/18/安卓学习笔记-5/Android生命周期.png&quot; alt=&quot;Andorid生命周期&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://soyanga.github.io/categories/Android/"/>
    
    
      <category term="Android学习笔记" scheme="https://soyanga.github.io/tags/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习笔记-4</title>
    <link href="https://soyanga.github.io/2019/11/18/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
    <id>https://soyanga.github.io/2019/11/18/安卓学习笔记-4/</id>
    <published>2019-11-18T15:19:03.000Z</published>
    <updated>2019-11-18T15:20:56.548Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Android学习笔记-4"><a href="#Android学习笔记-4" class="headerlink" title="Android学习笔记(4)"></a>Android学习笔记(4)</h1><p><img src="/2019/11/18/安卓学习笔记-4/t01bbf9569f54fe37e5.jpg" alt="t01bbf9569f54fe37e5"></p><a id="more"></a><blockquote><p>小Tips:</p><p>如果你要反编译解析的app，在Android中无法找到对应APK则可以用软件解决软件问题，下载一些手机上可以提取apk的软件；eg:提取应用APK安装包，APK文件提取器，APK应用管理即可获取系统中所有软件APK</p></blockquote><h2 id="对Android自带App代码进行解析"><a href="#对Android自带App代码进行解析" class="headerlink" title="对Android自带App代码进行解析"></a>对Android自带App代码进行解析</h2><h3 id="ADC数模转换app"><a href="#ADC数模转换app" class="headerlink" title="ADC数模转换app"></a>ADC数模转换app</h3><h4 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topeet.adctest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">adc</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Close</span><span class="params">()</span></span>; <span class="comment">//关闭adc数模转换模块</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Ioctl</span><span class="params">(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2)</span></span>;<span class="comment">//控制adc的IO控制</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Open</span><span class="params">()</span></span>;<span class="comment">//打开adc数模转换</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span>[] Read();<span class="comment">//读取adc数模转换数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  System.loadLibrary(<span class="string">"adc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上关于ADC数模转换的方法均是本地方法，即c语言写好的在linux下运行的方法，Android直接使用Java JNI调用即可。 关于ADC模块的本地方法都在。<code></code>/dev/adc`方法里面</p><h3 id="Buzzer蜂鸣器app"><a href="#Buzzer蜂鸣器app" class="headerlink" title="Buzzer蜂鸣器app"></a>Buzzer蜂鸣器app</h3><h4 id="核心代码：-1"><a href="#核心代码：-1" class="headerlink" title="核心代码："></a>核心代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topeet.buzzertest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">buzzer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Close</span><span class="params">()</span></span>; <span class="comment">//蜂鸣器关闭</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Ioctl</span><span class="params">(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2)</span></span>;<span class="comment">//蜂鸣器的io控制 parameter 2 is cmd ,cmd = 1 buzzer on</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Open</span><span class="params">()</span></span>;<span class="comment">//蜂鸣器打开</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">   System.loadLibrary(<span class="string">"buzzer"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上是关于Buzzer蜂鸣器的方法也均是本地方法，Android直接使用Java JNI调用即可。 关于ADC模块在<code>/dev/buzzer_ctl</code>文件里面</p><h3 id="Led灯app"><a href="#Led灯app" class="headerlink" title="Led灯app"></a>Led灯app</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topeet.ledtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">led</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Close</span><span class="params">()</span></span>; <span class="comment">//led关闭</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Ioctl</span><span class="params">(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2)</span></span>;<span class="comment">//parameter 2 is cmd ,cmd = 1 leds on</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">Open</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">   System.loadLibrary(<span class="string">"led"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上是关于Led灯的方法也均是本地方法，Android直接使用Java JNI调用即可。 关于ADC模块都在<code>/dev/leds</code>文件里面</p><h2 id="Java-JNI编程"><a href="#Java-JNI编程" class="headerlink" title="Java JNI编程"></a>Java JNI编程</h2>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Android学习笔记-4&quot;&gt;&lt;a href=&quot;#Android学习笔记-4&quot; class=&quot;headerlink&quot; title=&quot;Android学习笔记(4)&quot;&gt;&lt;/a&gt;Android学习笔记(4)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/18/安卓学习笔记-4/t01bbf9569f54fe37e5.jpg&quot; alt=&quot;t01bbf9569f54fe37e5&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://soyanga.github.io/categories/Android/"/>
    
    
      <category term="Android学习笔记" scheme="https://soyanga.github.io/tags/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习笔记-3</title>
    <link href="https://soyanga.github.io/2019/11/16/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://soyanga.github.io/2019/11/16/安卓学习笔记-3/</id>
    <published>2019-11-16T02:54:07.000Z</published>
    <updated>2019-11-16T03:00:20.780Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Android学习笔记-3"><a href="#Android学习笔记-3" class="headerlink" title="Android学习笔记(3)"></a>Android学习笔记(3)</h1><p><img src="/2019/11/16/安卓学习笔记-3/Img399471617.jpg" alt="Img399471617"></p><a id="more"></a><h2 id="反编译APK获取代码-amp-资源"><a href="#反编译APK获取代码-amp-资源" class="headerlink" title="反编译APK获取代码&amp;资源"></a>反编译APK获取代码&amp;资源</h2><p>获取app的apk文件后，将其扩展名称改为<strong>.zip</strong>或者<strong>.rar</strong>。然后解压打开<strong>res目录</strong>即可获取里面的图片素材，但是不能获取xml资源文件！！</p><p>解决方法</p><h3 id="三兄弟齐心协力法"><a href="#三兄弟齐心协力法" class="headerlink" title="三兄弟齐心协力法"></a>三兄弟齐心协力法</h3><ol><li><strong>apktool：</strong>获取资源文件，提取图片文件，布局文件，还有一些XML的资源文件</li><li><strong>dex2jar：</strong>将APK反编译成Java源码(将classes.dex转化为jar文件)</li><li><strong>jd-gui：</strong>查看2中转换后的jar文件。<ul><li>并使用jd-gui将jar包反编译成java代码</li></ul></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-使用apktool获取资源"><a href="#1-使用apktool获取资源" class="headerlink" title="1.使用apktool获取资源"></a>1.使用apktool获取资源</h4><h5 id="提前将xxx-apk文件获放置到apktool-exe的文件夹下"><a href="#提前将xxx-apk文件获放置到apktool-exe的文件夹下" class="headerlink" title="提前将xxx.apk文件获放置到apktool.exe的文件夹下"></a>提前将xxx.apk文件获放置到apktool.exe的文件夹下</h5><ol><li><p>双击cmd.exe文件来到命令行，键入：<code>apktool.bat d xxx.apk</code>即可 Enter回车</p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115110230970.png" alt="image-20191115110230970"></p><ul><li>就可以在文件夹中生成了我们要的资源文件（主要是xml资源，布局，图片等）</li></ul><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115110414499.png" alt="image-20191115110414499"></p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115110549221.png" alt="image-20191115110549221"></p></li></ol><h4 id="2-使用dex2jar将classes-dex转换成jar文件"><a href="#2-使用dex2jar将classes-dex转换成jar文件" class="headerlink" title="2.使用dex2jar将classes.dex转换成jar文件"></a>2.使用dex2jar将classes.dex转换成jar文件</h4><h5 id="前提获取classes-dex文件"><a href="#前提获取classes-dex文件" class="headerlink" title="前提获取classes.dex文件"></a>前提获取classes.dex文件</h5><ol><li><p>将xxx.apk文件的文件扩展名改为xxx.zip或者xxx.rar</p></li><li><p>然后用解压缩文件将xxx.zip进行解压缩，并从中拷贝出来放置到dex2jar.bat所在目录下</p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115111243614.png" alt="image-20191115111243614"></p></li><li><p><em>打开cmd在dex2jar.bat所在目录下，来到这个目录下：键入：**</em>d2j-dex2jar.bat classes.dex** </p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115111643849.png" alt="image-20191115111643849"></p></li><li><p>接着我们看到了生成了一个jar包</p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115111752637.png" alt="image-20191115111752637"></p></li></ol><h4 id="3-使用jd-gui查看jar包中的class文件"><a href="#3-使用jd-gui查看jar包中的class文件" class="headerlink" title="3.使用jd-gui查看jar包中的class文件"></a>3.使用jd-gui查看jar包中的class文件</h4><ol><li><p>打开ju-gui文件夹，运行jd-gui.exe程序</p></li><li><p>File -&gt;Open File(Ctrl + o)-&gt;选择刚才生成的jar包打开，就能看到里面的代码（class代码）</p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115112354402.png" alt="image-20191115112354402"></p></li></ol><h4 id="4-并使用jd-gui将jar包反编译成java代码"><a href="#4-并使用jd-gui将jar包反编译成java代码" class="headerlink" title="4.并使用jd-gui将jar包反编译成java代码"></a>4.并使用jd-gui将jar包反编译成java代码</h4><p>如果查看源码并且想在源码的基础上修改源码中的内容，并且进行二次打包。则需要对class文件进行反编译，使用jd-gui即可</p><ol><li><p>File-&gt;Saze Source(反编译并保存单个class为java代码)/Save All Source(反编译并保存整个文件中的class为java代码)保存的整个文件会被打包成zip压缩包文件。</p><p><img src="/2019/11/16/安卓学习笔记-3/image-20191115113741203.png" alt="image-20191115113741203"></p></li><li><p>接着使用IDE对java代码进行修改即可</p></li></ol><h2 id="对Android自带App代码进行解析"><a href="#对Android自带App代码进行解析" class="headerlink" title="对Android自带App代码进行解析"></a>对Android自带App代码进行解析</h2>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Android学习笔记-3&quot;&gt;&lt;a href=&quot;#Android学习笔记-3&quot; class=&quot;headerlink&quot; title=&quot;Android学习笔记(3)&quot;&gt;&lt;/a&gt;Android学习笔记(3)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/16/安卓学习笔记-3/Img399471617.jpg&quot; alt=&quot;Img399471617&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://soyanga.github.io/categories/Android/"/>
    
    
      <category term="Android学习笔记" scheme="https://soyanga.github.io/tags/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习笔记-2</title>
    <link href="https://soyanga.github.io/2019/11/14/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://soyanga.github.io/2019/11/14/安卓学习笔记-2/</id>
    <published>2019-11-14T15:23:41.000Z</published>
    <updated>2019-11-18T15:25:34.994Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="Andoroid学习笔记-2"><a href="#Andoroid学习笔记-2" class="headerlink" title="Andoroid学习笔记(2)"></a>Andoroid学习笔记(2)</h1><p>Time: 2019/11/14</p><p><img src="/2019/11/14/安卓学习笔记-2/timg.png" alt="timg"></p><a id="more"></a><h2 id="工程项目结构具体解析"><a href="#工程项目结构具体解析" class="headerlink" title="工程项目结构具体解析"></a>工程项目结构具体解析</h2><p><img src="/2019/11/14/安卓学习笔记-2/image-20191113224542920.png" alt="image-20191113224542920"></p><p><strong>res目录:</strong>res下的每个资源都会R.java文件中生成唯一的id。</p><p><strong>mipmap目录：</strong>mipmap会在图片缩放在提供一定的性能优化，根据分辨率的不同系统会根据屏幕分辨率来选择hdpi,mdpi,xmdpi,xxhdpi下的对应的图片，可以解压别人的apk可以看到上述目录同一名称的图片，在四个文件夹下都有，只是大小和像素不同。加载图片的顺序是，使用最接近的密度级别来加载图片，如何想禁止Android不跟随屏幕密度加载不同文件夹的资源，只需要在<code>AndriodManifest.xml</code>文件中添加<code>android:anyDensity=“false”</code>字段即可。</p><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><ul><li><strong>drawable:</strong>存放各种位图文件（png,jpg,9png,gif）除此之外可能是一些其他的drawable类型的xml文件</li><li><strong>mipmap-hdpi：</strong>高分辨率，一般我们把图片丢这里</li><li><strong>mipmap-mdpi：</strong>中等分辨率，很少，除非兼容的的手机很旧</li><li><strong>mipmap-xhdpi：</strong>超高分辨率（中高端机型）</li><li><strong>mipmap-xxhdpi：</strong>超超高分辨率（高端机型）</li></ul><h3 id="布局资源"><a href="#布局资源" class="headerlink" title="布局资源"></a>布局资源</h3><ul><li><strong>layout：</strong>该目录下存放的就是我们的布局文件，另外在一些特定的机型上，我们做屏幕适配，比如480*320这样的手机，我们会另外创建一套布局，就行：layout-480x320这样的文件夹！(可后续做屏幕适配)</li></ul><h3 id="菜单资源"><a href="#菜单资源" class="headerlink" title="菜单资源"></a>菜单资源</h3><ul><li>menu:物理按钮，menu键在手机上，现在用的并不多，菜单项相关的资源xml可以在这里编写</li></ul><h3 id="Values目录"><a href="#Values目录" class="headerlink" title="Values目录"></a>Values目录</h3><ul><li>demens.xml:定义尺寸资源</li><li>string.xml：定义字符串资源</li><li>styles.xml：定义样式资源</li><li>colors.xml：定义颜色资源</li><li>arrays.xml：定义数组资源</li><li>attrs.xml：自定义控件时用的较多，自定义控件的属性！</li><li>theme主题文件，和styles很相似，但是会对整个应用中的Actvitiy或指定Activity起作用，一般是改变窗口外观的！可在Java代码中通过setTheme使用，或者在Androidmanifest.xml中为&lt;application…&gt;添加theme的属性！ PS:你可能看到过这样的values目录：values-w820dp，values-v11等，前者w代表平板设备，820dp代表屏幕宽度；而v11这样代表在API(11)，即android 3.0后才会用到的！</li></ul><h3 id="raw目录"><a href="#raw目录" class="headerlink" title="raw目录"></a>raw目录</h3><p>用于存放各种原生资源（音频，视频，一些XML文件等），我们可以通过<code>openRawResource(int id)</code>来获取资源的二进制流，这里的资源也会在R文件哪里生成一个资源id。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li>属性动画</li><li>补间动画</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animator:存放属性动画的XML文件</span><br><span class="line">anim:存放补间动画的XML文件</span><br></pre></td></tr></table></figure><h2 id="如何取使用这些资源"><a href="#如何取使用这些资源" class="headerlink" title="如何取使用这些资源"></a>如何取使用这些资源</h2><p>资源文件存放位置已经知道了，如何去使用：我们每个资源文件都会在R.java文件下生成一个资源id,我们可以通过这个资源来完成资源的访问，使用情况有如下两种：</p><ul><li><p>Java代码中使用</p></li><li><p>XML代码中使用</p></li></ul><h3 id="Java代码中使用"><a href="#Java代码中使用" class="headerlink" title="Java代码中使用"></a>Java代码中使用</h3><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol><li><p>创建托图片控件对象（ImageView）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageView iv = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li><li><p>对图片控件对象进行设置，将控件对象与图片资源进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iv.setImageBitMap(BitMapFactory.decodeResource(getResources(),R.drwaable.logo);</span><br></pre></td></tr></table></figure></li><li><p>将设置好的图片控件与放置到当前View位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setContentView(iv);</span><br></pre></td></tr></table></figure></li></ol><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txtName.setText(getResources().getText(R.string.name));</span><br></pre></td></tr></table></figure><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgIcon.steBackgroundDrawableResource(R.drawable.icon);</span><br></pre></td></tr></table></figure><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txtName.setTextColor(getResource().getColor(r.color.red));</span><br></pre></td></tr></table></figure><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.main);</span><br></pre></td></tr></table></figure><h4 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textName = (TextView)findViewById(R.id.txt_name);</span><br></pre></td></tr></table></figure><h3 id="XML代码中使用"><a href="#XML代码中使用" class="headerlink" title="XML代码中使用"></a>XML代码中使用</h3><p>通过@XXX即可得到，比如这里获取文本和图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView android:text=&quot;@string/hello_world&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background = &quot;@drawable/img_back&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="深入了解三个文件"><a href="#深入了解三个文件" class="headerlink" title="深入了解三个文件"></a>深入了解三个文件</h2><p>工程中三个比较重要的文件：<code>MainActivity.java</code> 布局文件:<code>activity_main</code>和Android配置文件:<code>AndroidManifest.xml</code></p><h3 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java:"></a>MainActivity.java:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><ol><li>顶一个MainActivity类，这个类继承自AppCompatActivity，并且实现了onCreate抽象方法</li><li>调用父类方法<code>super.onCreaye(savedInstanceState);</code></li><li><code>steContentView()</code>：加载R.layout.activity.main的布局文件</li><li>在AndroidManifest.xml中进行声明<code>&lt;activity android:name=&quot;.MainActivity&quot; &gt;</code></li></ol><h3 id="布局文件：activity-main-xml"><a href="#布局文件：activity-main-xml" class="headerlink" title="布局文件：activity_main.xml"></a>布局文件：activity_main.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h4><ol><li>第一二行:有了它就可以alt + /作为提示，提示你输入什么不该输入什么，什么是对的，什么是错的，可以理解位语法文件，或则语法判断器，语法分析器（离线版）</li><li><code>android.id=&quot;@+id/textView&quot;</code>:为了这个布局设置一个id值标记为textView,并且添加到R文件的id内部类中</li><li><code>android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;</code> :这句话是控制组件的宽度和高度，有三个属性可以选择<ul><li><code>warp_content</code>：组件刚好显示组件的内容大小</li><li><code>fill_parent</code>：填充父容器水平方向的空间</li><li><code>match_parent</code>与前者相同  </li></ul></li><li><code>android:orientation=&quot;vertical&quot;</code>:为线性布局指定方式，组件的排列方向是水平(horizontal)还是竖直(vertical)</li><li><code>tools:context=&quot;.MainActivity&quot;</code>:这句话不会被打包进入APK,只是ADT的Layout Editor在你当前的Layout文件里面设置对应的渲染上下文，说明你当前的Layout所在的渲染上下文是activity name对应的那个activity，如果这个activity在manifest文件中设置了Theme，那么ADT的Layout Editor会根据这个Theme来渲染你当前的Layout。就是说如果你设置的MainActivity设置了一个Theme.Light(其他的也可以)，那么你在可视化布局管理器里面看到的背景控件什么的就应该是Theme.Light的样子。仅用于给你看见即所得的效果而已。</li><li><code>android：text=&quot;@string/hello_world&quot;</code>:为了这个textview设置文本，引用string资源里面的hello_wold字符串的文本。</li></ol><h3 id="AndroidManifest-xml配置文件"><a href="#AndroidManifest-xml配置文件" class="headerlink" title="AndroidManifest.xml配置文件"></a>AndroidManifest.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.myapplication"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码分析：-2"><a href="#代码分析：-2" class="headerlink" title="代码分析："></a>代码分析：</h4><h5 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h5><ul><li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code> ：定义了使用xml的版本和编码方式</li><li><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code>：定义了我们需要使用的架构，源自的地址</li><li><code>package=&quot;com.example.myapplication&quot; &gt;</code>:定义我们程序所在的java包，应用包名是应用的唯一标识</li></ul><h5 id="users-sdk"><a href="#users-sdk" class="headerlink" title="users-sdk"></a>users-sdk</h5><ul><li><code>android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;</code>:定义程序的版本号，版本名称当然也可以协程测试版v1.0这样的名字</li><li><code>&lt;uses-sdk android:minSdkVersion=&quot;8&quot; android:targetSdkVersion=&quot;21&quot;/&gt;</code>：使用该app的最低sdk版本为2.2.开发的系统版本号为4.2，后面的编号代表每一个版本的sdk</li></ul><h5 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h5><ul><li><p><code>android:allowBackup=&quot;true&quot;</code>：是否允许备份文件，允许</p></li><li><p><code>android:icn=&quot;@drawable/ice_launcher&quot;</code>:定义应用的图标，引用drawable中的ice_launchaer</p></li><li><p><code>android:label=&quot;@string/app_name&quot;</code>:定义应用的名称，引用string中的app_name</p></li><li><code>android:theme=&quot;@style/AppTheme&quot;</code>：定义应用使用的主题，app风格</li></ul><h5 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h5><ul><li><code>android:name=&quot;.MainActivity&quot;</code>：声明一个activity，包括activity所在的包和app名称，前面部分可以用.表示</li><li><code>android:label=&quot;@string/app_name&quot;</code>:Activity的名称，显示给用户看的</li></ul><h5 id="Intent-filter-章图过滤器"><a href="#Intent-filter-章图过滤器" class="headerlink" title="Intent-filter(章图过滤器)"></a>Intent-filter(章图过滤器)</h5><ul><li><code>&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</code></li><li><code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</code></li></ul><p>这两行代码决定了程序的入口，且app会被显示在Home的应用程序列表中</p><h3 id="除此之外"><a href="#除此之外" class="headerlink" title="除此之外"></a>除此之外</h3><blockquote><p>①如果app包含其他组件的话,都要使用类型说明语法在该文件中进行声明 Server:元素 <code>BroadcastReceiver</code>元素 <code>ContentProvider</code>元素 IntentFilter<code>&lt;intent-filter&gt;</code>元素</p><p>②权限的声明: 在该文件中显式地声明程序需要的权限,防止app错误地使用服务, 不恰当地访问 资源,最终提高android app的健壮性 <code>android.permission.SEND_SMS</code> 有这句话表示app需要使用发送信息的权限,安装的时候就会提示用户, 相关权限可以在sdk参考手册查找！</p></blockquote><h4 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h4><ul><li>添加了应用程序的权限（发送短信的操作）在<code>&lt;/manifest&gt;</code>结尾标签之前(整个应用程序)</li><li>放置到\<activity>内置,其他app访问当前\<activity>时时必须获取的权限</activity></activity></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-permission</span> <span class="attr">android.name</span>=<span class="string">"android.permission.SEND_SMS"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/11/14/安卓学习笔记-2/image-20191118113150053.png" alt="image-20191118113150053"></p><h2 id="互联网三大定律（科普知识）"><a href="#互联网三大定律（科普知识）" class="headerlink" title="互联网三大定律（科普知识）"></a>互联网三大定律（科普知识）</h2><p><strong>摩尔定律：</strong>当价格不变时，每一美元所能买到的电脑性能将每隔18-24个月翻一倍以上。</p><p><strong>吉尔德定律</strong>：网络主干网带宽大约每八个月增长一倍，网络主干网的网络带宽不断增长意味着各种新的网络应用方式的出现和网络用户的使用费用不断降低。</p><p><strong>迈特卡夫定律：</strong>随着一个计数的使用者不断增多，每一个使用者从中获取的价值不断增多，但使用者却不断下降的现象是由市场决定的。（网络的价值与网络使用者的数量的平方成正比）</p><h2 id="反编译APK"><a href="#反编译APK" class="headerlink" title="反编译APK"></a>反编译APK</h2><ol><li><strong>apktool：</strong>获取资源文件，提取图片文件，布局文件，还有一些XML的资源文件</li><li><strong>dex2jar：</strong>将APK反编译成Java源码(将classes.dex转化为jar文件)</li><li><strong>jd-gui：</strong>查看2中转换后的jar文件</li></ol><p><strong>修改将xxx.ap改成xxx,zip解压缩可以获得apk中的png,jpg,gif资源，但是 <em>xml类的资源</em> 是乱码的！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Andoroid学习笔记-2&quot;&gt;&lt;a href=&quot;#Andoroid学习笔记-2&quot; class=&quot;headerlink&quot; title=&quot;Andoroid学习笔记(2)&quot;&gt;&lt;/a&gt;Andoroid学习笔记(2)&lt;/h1&gt;&lt;p&gt;Time: 2019/11/14&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/11/14/安卓学习笔记-2/timg.png&quot; alt=&quot;timg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://soyanga.github.io/categories/Android/"/>
    
    
      <category term="Android学习笔记" scheme="https://soyanga.github.io/tags/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习笔记&lt;1&gt;</title>
    <link href="https://soyanga.github.io/2019/11/13/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://soyanga.github.io/2019/11/13/安卓学习笔记-1/</id>
    <published>2019-11-13T15:05:01.000Z</published>
    <updated>2019-11-13T15:10:00.882Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Android学习笔记（一）"><a href="#Android学习笔记（一）" class="headerlink" title="Android学习笔记（一）"></a>Android学习笔记（一）</h1><p>Time： 2019/11/13 </p><p><img src="/2019/11/13/安卓学习笔记-1/1.png" alt="1"></p><a id="more"></a><h2 id="针对安卓开发需要的注意的两个问题："><a href="#针对安卓开发需要的注意的两个问题：" class="headerlink" title="针对安卓开发需要的注意的两个问题："></a>针对安卓开发需要的注意的两个问题：</h2><ol><li><strong>系统碎片化</strong>：版本兼容问题，以及由于国内Rom定制盛行，对原生系统的更改导致开发后的app无法在定制Rom上正常运行。（已经测试需要的功能正常运行，板子上安装的是谷歌原生Android4.03）</li><li><strong>屏幕碎片化</strong>：屏幕尺寸问题（放到最后的优化自适应屏幕尺寸，当前只考虑1980 * 800的7寸的屏幕）</li></ol><h2 id="平台架构图"><a href="#平台架构图" class="headerlink" title="平台架构图"></a>平台架构图</h2><p>Android操作系统是一个软件组件的栈，在架构图中它大致可以分为五个部分和四个主要层。</p><p><img src="/2019/11/13/安卓学习笔记-1/image-20191113114302834.png" alt="image-20191113114302834"></p><ol><li><p><strong>Application(应用程序层)</strong>我们一般来说的应用层开发就是在这个层次上进行的，当然包括了系统内置的一组应用程序，java语言开发的。</p></li><li><p><strong>Application Framework(应用程序框架层)</strong>无论系统内置或者我们自己编写的App,都需要使用到这层，eg:获取电话黑名单，自动挂断电话，我们就需要用到电话管理（TelephoneyManager）通过该层我嫩就可以很轻松的实现挂断操作，而不需要关心底层实现。</p></li><li><p><strong>Librarises(库) + Android Runtime(Android运行时</strong>)Android给我们提供了一组C/C++库，为平台的不同组件所使用，比如媒体框架；而Android Runtime则由Android核心库集 + Dalvik虚拟机构成</p><ul><li>Dalvik虚拟机则是针对移动设备的虚拟机。特点：不需要很快的cpu计算速度和大量的内存空间，而每个App都单独地运行在单独地Dalvik虚拟机内地每个app对应一条Dalvik进程</li></ul><p><img src="/2019/11/13/安卓学习笔记-1/image-20191113112723998.png" alt="image-20191113112723998"></p><ul><li><strong>后期可以优化的点Dalvik虚拟机的配置</strong></li></ul></li><li><p><strong>Linux内核</strong> 这里就设计底层驱动，一些服务，不如安全性，内存管理以及进程管理等。</p></li></ol><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ol><li>Dalvik:Android特有的虚拟机，适合运行与移动端</li><li>AVD:（android virtual machine）:安卓虚拟设备（安卓模拟器）</li><li>ADT:（android development tools）:安卓开发工具</li><li>SDK:（software development kit）:软件开发工具包，就是安卓系统，平台架构等的工具集合</li><li>DDMS:安卓调试工具</li><li>adb:安卓调试，在sdk的platform-tools目录下，功能很多，命令行必备</li><li>DX工具：将class转换成.dex文件</li><li>AAPT:安卓资源打包工具</li><li>R.java文件：由app工具根据App中的资源文件自动生成，可以理解为资源字典</li><li>AndroidManifest.xml:app包名+组件声明+程序兼容的最低版本+所需权限等程序的配置文件</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul><li><p>build:构建目录，相当于bin目录</p></li><li><p>libs:依赖的包</p></li><li><p>src:</p><ul><li>androidTest:安卓单元测试的目录</li><li>main<ul><li>Java：写Java代码的地方,业务功能实现</li><li>res:资源文件  （res下每个资源都都会在R.java生成一个唯一的id） <ul><li>drawable:图像资源</li><li>layout:布局资源</li><li>menu:菜单资源</li><li>value:<ul><li>demens:css配置文件</li><li>string：字符串资源</li><li>styles：style资源</li></ul></li></ul></li></ul></li></ul></li><li>AndroidManifest.xml:配置文件</li><li>build.gradle:Gradle构建脚本</li></ul><p>注：可以从 Logcat 选择日志类型来筛选查看日志，定位错误信息于代码地点</p><h2 id="9图片（GUI-UI-界面）"><a href="#9图片（GUI-UI-界面）" class="headerlink" title=".9图片（GUI(UI)界面）"></a>.9图片（GUI(UI)界面）</h2><p>eg: <em>pic1.9.png</em> </p><p>作用：在图片拉伸的时候特定的区域不会发生图片失真，eg:qq发送的消息气泡，不论里面的内容如何长度，气泡边缘区域的图片并不会发生变化。</p><p>应用：可以对具体的按钮或者背景在填充内容情况下边缘不会发生变形。</p><p>核心要点： <strong>左上拉伸，右下内容</strong> </p><p> 左边那条黑色线代表图片垂直拉伸的区域，<br>上边的那条黑色线代表水平拉伸区域，<br>右边的黑色线代表内容绘制的垂直区域，<br>下边的黑色线代表内容绘制的水平区域，<br>右边和下边的线是可选的，左边和上边的线不能省略。 </p><h2 id="界面原型设计"><a href="#界面原型设计" class="headerlink" title="界面原型设计"></a>界面原型设计</h2><ul><li><h3 id="Android自带DroidDraw工具设计Android界面-可自动生成代码"><a href="#Android自带DroidDraw工具设计Android界面-可自动生成代码" class="headerlink" title="Android自带DroidDraw工具设计Android界面(可自动生成代码)"></a>Android自带DroidDraw工具设计Android界面(可自动生成代码)</h3></li><li><h3 id="Mockplus原型工具的使用"><a href="#Mockplus原型工具的使用" class="headerlink" title="Mockplus原型工具的使用"></a>Mockplus原型工具的使用</h3></li></ul><h2 id="工程项目结构具体解析"><a href="#工程项目结构具体解析" class="headerlink" title="工程项目结构具体解析"></a>工程项目结构具体解析</h2><p><img src="/2019/11/13/安卓学习笔记-1/image-20191113224542920.png" alt="image-20191113224542920"></p><p><strong>res目录:</strong>res下的每个资源都会R.java文件中生成唯一的id。</p><p><strong>mipmap目录：</strong>mipmap会在图片缩放在提供一定的性能优化，根据分辨率的不同系统会根据屏幕分辨率来选择hdpi,mdpi,xmdpi,xxhdpi下的对应的图片，可以解压别人的apk可以看到上述目录同一名称的图片，在四个文件夹下都有，只是大小和像素不同。加载图片的顺序是，使用最接近的密度级别来加载图片，如何想禁止Android不跟随屏幕密度加载不同文件夹的资源，只需要在<code>AndriodManifest.xml</code>文件中添加<code>android:anyDensity=“false”</code>字段即可。</p><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><ul><li><strong>drawable:</strong>存放各种位图文件（png,jpg,9png,gif）除此之外可能是一些其他的drawable类型的xml文件</li><li><strong>mipmap-hdpi：</strong>高分辨率，一般我们把图片丢这里</li><li><strong>mipmap-mdpi：</strong>中等分辨率，很少，除非兼容的的手机很旧</li><li><strong>mipmap-xhdpi：</strong>超高分辨率（中高端机型）</li><li><strong>mipmap-xxhdpi：</strong>超超高分辨率（高端机型）</li></ul><h3 id="布局资源"><a href="#布局资源" class="headerlink" title="布局资源"></a>布局资源</h3><ul><li><strong>layout：</strong>该目录下存放的就是我们的布局文件，另外在一些特定的机型上，我们做屏幕适配，比如480*320这样的手机，我们会另外创建一套布局，就行：layout-480x320这样的文件夹！(可后续做屏幕适配)</li></ul><h3 id="菜单资源"><a href="#菜单资源" class="headerlink" title="菜单资源"></a>菜单资源</h3><ul><li>menu:物理按钮，menu键在手机上，现在用的并不多，菜单项相关的资源xml可以在这里编写</li></ul><h3 id="Values目录"><a href="#Values目录" class="headerlink" title="Values目录"></a>Values目录</h3><ul><li>demens.xml:定义尺寸资源</li><li>string.xml：定义字符串资源</li><li>styles.xml：定义样式资源</li><li>colors.xml：定义颜色资源</li><li>arrays.xml：定义数组资源</li><li>attrs.xml：自定义控件时用的较多，自定义控件的属性！</li><li>theme主题文件，和styles很相似，但是会对整个应用中的Actvitiy或指定Activity起作用，一般是改变窗口外观的！可在Java代码中通过setTheme使用，或者在Androidmanifest.xml中为&lt;application…&gt;添加theme的属性！ PS:你可能看到过这样的values目录：values-w820dp，values-v11等，前者w代表平板设备，820dp代表屏幕宽度；而v11这样代表在API(11)，即android 3.0后才会用到的！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Android学习笔记（一）&quot;&gt;&lt;a href=&quot;#Android学习笔记（一）&quot; class=&quot;headerlink&quot; title=&quot;Android学习笔记（一）&quot;&gt;&lt;/a&gt;Android学习笔记（一）&lt;/h1&gt;&lt;p&gt;Time： 2019/11/13 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/11/13/安卓学习笔记-1/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://soyanga.github.io/categories/Android/"/>
    
    
      <category term="Android学习笔记" scheme="https://soyanga.github.io/tags/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》-序言</title>
    <link href="https://soyanga.github.io/2019/09/26/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B-%E5%BA%8F%E8%A8%80/"/>
    <id>https://soyanga.github.io/2019/09/26/《暗时间》-序言/</id>
    <published>2019-09-26T13:14:48.000Z</published>
    <updated>2019-09-29T06:45:44.966Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="《暗时间》-序言-hourglass-flowing-sand"><a href="#《暗时间》-序言-hourglass-flowing-sand" class="headerlink" title="《暗时间》-序言:hourglass_flowing_sand:"></a>《暗时间》-序言:hourglass_flowing_sand:</h1><p><img src="http://pic.qjimage.com/tongro_rf003/high/087d2877.jpg" alt="沙漏图片"></p><p>​                                                                                                                        ——《暗时间》作者刘未鹏</p><a id="more"></a><p>大学可能是我读书最少的一个阶段（不包括专业书籍），立下flag每天都要看书并抽空做下读书笔记写一下自己的感悟。目前入手了岛上书店跟暗时间（二刷）:happy:准备两个月看完吧。关于为什么选这两本呢，每一本书对我都有特殊的意义~</p><p><strong>这本书的封面是一个沙漏说实话第一眼真的没看出来，是看了第一页的这句话时才知道书的封面是一个沙漏​</strong>:hourglass_flowing_sand:</p><p><strong><em>每个人的生命就像沙漏，里面装的沙子总量是大致相当，不同的是，有的沙漏颈部较细，有的沙漏颈部较粗。</em></strong></p><p><strong><em>颈部较细的沙漏能够抓住每一粒时间之沙，即便沙子总量一样，也能够拥有更长的生命。</em></strong></p><p>​                                                                                                                —2019.9.26 嵌入式课上偷偷所记</p><p><strong>“人生不过是解决问题（All life is Problem-Sloving）”</strong></p><p>​                                                                                                                <em>—波普尔</em></p><p><strong><em>判断与决策又是其中最常见的一类问题解决</em>。</strong></p><p><strong><em>现在是一个信息泛滥的时代，这导致我们经常面临一个问题：如何在信息海洋中有效筛选有价值的信息，以及避免错误的信息左右大脑我们的大脑🧠。</em></strong></p><p>随着时代的发展与进步，信息的数量以及信息获取的方便程度逐渐在提升。其变化之快在我们这辈跟爷爷辈之间可以明显感知到。还记得家里当时爷爷的报纸，每次收废品的来了我都能“小赚一笔“。而如今足不出户可知天下“大”事。各式各样app都是海量信息与我们之间的桥梁。我们接收着大量信息，我们好奇想知道更多的信息。但是我们也花费了不少的时间在这些大量的信息上。掌握优质的有用的信息却成了我们的烦恼。</p><p>我们不仅获取信息、筛选信息、甚至成为信息传播的媒介，其中最有意思的一点就是一块就是信息筛选，如何筛选保证最后得到的是有用正确的信息，我们就需要有<strong>批判性思维(critical thinking)</strong></p><blockquote><p>批判性思维(critical thinking)指得是能抓住要领，善于质疑辨析，甚至于严格推断，富有机智灵气，清晰敏捷的思维方式。</p></blockquote><p><strong>要想正确的思考，正确的筛选有效的信息，我们就需要了解大脑，尤其是了解它的弱点</strong></p><p>了解他的弱点这句话触动心弦</p><ul><li><strong>人总喜欢沿袭以往习得的经验</strong></li><li><strong>人总喜欢从关联当中寻找因果</strong></li><li><strong>人类思维充满着各种各样的捷径</strong>，每一条捷径都是一把双刃剑。一方面，它降低了大脑的认识复杂性（笼统看一个问题要比细致分析简单得多），有助于迅速做出绝大部分时候都正确得判断；但是另一方面它也常常导致人们把大部分情况下成立得法则当成放之四海而皆准得。<strong>可以说有多少捷径就有多少谬误</strong></li><li><strong>人类得情绪也很大程度上影响人类思考</strong></li><li><strong><em>我们很难学会质疑自己的判断，而总是“找到”其他为自己辩护的理由。</em></strong></li><li>人类大脑经过长时间进化，先天就是具备一些特定得“<strong>思维定势</strong>”，以使得人类在面对进化过程中经常出现得适应性问题能够不假思索地做出迅速反应。</li><li>人类不可避免地收着各种偏见地影响，其中有一些偏见有一定适应价值的“思维定势”（如事后聪明式偏见），而有些则是大脑认知机制“缺陷”。。</li></ul><p>以上构成了人类思维中的钟种谬误。而学会思考，就是学会认识到这些谬误，避免它，才能进行正确的思考</p><p><em>亚里斯多德曾经对人类语言中的各种各样的谬误有所了解</em></p><p><strong><em>“我们无法讨论不存在的东西，所以所有的事物都是真实的”</em></strong></p><p><strong>序言再读一次又是一次新的感受，之前快速阅读笼统的急迫的想要了解这本书主要讲了什么，而错过了诸多的细节。我决定改变之前笼统式读书走捷径的方式，决定这次不看目录读这本书，读完每一章再去看目录。对作者所讲的自己先理解，花时间去思考有自己的想法而不是思维定势的证实目录中的作者总结的观点。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;《暗时间》-序言-hourglass-flowing-sand&quot;&gt;&lt;a href=&quot;#《暗时间》-序言-hourglass-flowing-sand&quot; class=&quot;headerlink&quot; title=&quot;《暗时间》-序言:hourglass_flowing_sand:&quot;&gt;&lt;/a&gt;《暗时间》-序言:hourglass_flowing_sand:&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pic.qjimage.com/tongro_rf003/high/087d2877.jpg&quot; alt=&quot;沙漏图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;​                                                                                                                        ——《暗时间》作者刘未鹏&lt;/p&gt;
    
    </summary>
    
      <category term="《暗时间》-刘未鹏著" scheme="https://soyanga.github.io/categories/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B-%E5%88%98%E6%9C%AA%E9%B9%8F%E8%91%97/"/>
    
    
      <category term="读后感" scheme="https://soyanga.github.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Redis问题</title>
    <link href="https://soyanga.github.io/2019/08/26/Redis%E9%97%AE%E9%A2%98/"/>
    <id>https://soyanga.github.io/2019/08/26/Redis问题/</id>
    <published>2019-08-26T14:44:47.000Z</published>
    <updated>2019-08-26T14:45:38.216Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Redis问题"><a href="#Redis问题" class="headerlink" title="Redis问题"></a>Redis问题</h1><h2 id="海量Key里查询出某一固定前缀的Key"><a href="#海量Key里查询出某一固定前缀的Key" class="headerlink" title="海量Key里查询出某一固定前缀的Key"></a>海量Key里查询出某一固定前缀的Key</h2><p><strong>留意细节：</strong></p><ul><li><strong>摸清数据规模，即问清楚边界</strong></li></ul><a id="more"></a><h3 id="1-KEYS指令"><a href="#1-KEYS指令" class="headerlink" title="1.KEYS指令"></a>1.KEYS指令</h3><p><code>Keys pattern</code> :查找所有符合给定模式的pattern的key</p><p>key的数量过大，使用keys查询时会导致Redis服务器跟内存方面的压力。</p><blockquote><p>缺点：</p><ul><li><strong>keys指令一次性会返回所有匹配的key</strong></li><li><strong>键的数量过大会使得服务卡顿</strong></li></ul></blockquote><h3 id="2-Scan指令"><a href="#2-Scan指令" class="headerlink" title="2.Scan指令"></a>2.Scan指令</h3><p><code>SCAN cursor [MATCH pattern][COUNT count]</code></p><p>会无阻塞的提取出指定模式的key列表，每次执行可以返回少量结果。</p><p>返回结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scan 0 match k* count 10</span><br><span class="line">1)&quot;游标值&quot;</span><br><span class="line">2)1)&quot;k17930789&quot;</span><br><span class="line">  2)&quot;k12231719&quot;</span><br><span class="line">  3)&quot;k19606980&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>SCAN指令是一个基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</strong></li><li><strong>以0作为游标开始一次新的迭代，知道命令返回游标0完成一次遍历</strong>  0 -&gt; 0 的过程</li><li><strong>不保证每次执行都返回某个给定数量的元素，支持模糊查询</strong>(MATCH 参数正则)</li><li><strong>一次返回的数量不可控，只能是大概符合count参数</strong></li></ul><p>注意：</p><p>返回的游标不一定是递增的，可能后一次返回的游标比前一次还小。也就是说有可能会出现重复key的问题。我们需要外部程序进行去重操作。</p><p>eg:外部使用java去重</p><ul><li><strong>for循环执行scan操作</strong></li><li><strong>获取游标将每次返回的游标设置为下一次游标，并将结果存储在HashSet中进行去重操作</strong></li></ul><h2 id="如何实现分布式锁"><a href="#如何实现分布式锁" class="headerlink" title="如何实现分布式锁"></a>如何实现分布式锁</h2><p>通过Redis实现一个简单的分布式锁</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><blockquote><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的锁的一种实现。</p></blockquote><p>如果不同的系统或者同意系统的不同主机之间共享了某个资源时往往需要互斥来防止彼此干扰，进而保证一致性。</p><h3 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h3><ul><li><strong>互斥性</strong></li><li><strong>安全性（不可剥夺）</strong></li><li><strong>死锁</strong><ul><li><strong>某个客户端获取到了锁，而该客户端发生了宕机，此时该客户端没有释放资源，导致其他客户端无法获取资源。（机制来避免）</strong></li></ul></li><li><strong>容错</strong><ul><li><strong>当部分节点宕机时，Redis任然可以获取锁释放锁。</strong></li></ul></li></ul><h3 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h3><p><code>SETNX key value</code>：如果key不存在，则创建并赋值(set is not exist)</p><ul><li><strong>时间复杂度O(1)</strong></li><li><strong>返回值：设置成功，返回1；设置失败，返回0。</strong></li></ul><p><code>setnx</code>：有上述特性，且是原子性的。初期则被人们用来实现分布式锁。</p><p>可以在执行某段代码逻辑时先尝试使用<code>setnx</code>对某一个key设置值如果设置成功则此时没有别的线程在执行该段代码，或者没有别的线程占用该独占资源。此时当前线程可以正确的执行该段代码逻辑。</p><p><strong>如果设置失败</strong>，则证明此时有别的程序或资源占用该资源。则当前线程就需要<strong>等待直至setnx成功</strong>。</p><p><em>简单优雅的实现了简单的分布式锁，但是却引来了另一个问题。如何解决setnx长期有效问题？即一个线程长期持有锁，占用资源。</em></p><h3 id="如何解决setnx长期有效问题"><a href="#如何解决setnx长期有效问题" class="headerlink" title="如何解决setnx长期有效问题"></a>如何解决setnx长期有效问题</h3><p>解决这个问题比较简单，就是给该key设置一个过期时间。<code>setnx</code>并不支持传入<code>expire</code>参数。此时就需要使用<code>expire key seconds</code>指令了。</p><p><code>expire key seconds</code></p><ul><li><strong>设置key的生存时间，当key过期时（生存时间为0），会被自动删除。</strong></li></ul><p>程序中使用这个方案实现分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line"><span class="comment">//尝试分布式锁获取资源</span></span><br><span class="line"><span class="keyword">long</span> status = redisService.setnx(key,<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//设置key的生命周期即设置资源的生命周期</span></span><br><span class="line">    redisService.expire(key,expire);</span><br><span class="line">    <span class="comment">//执行独占资源逻辑</span></span><br><span class="line">    doOcuppiedWork();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序的缺陷，当我们setnx执行成功但是还没有执行expire时程序就挂掉了，则此时setnx就无法被改变，则就会资源独占。其他线程永远无法获取到该资源。</p><ul><li><strong>缺点：原子性得不到满足</strong></li></ul><p>==<strong>dis2.6.12开始我们就可以使用Set操作将setnx和expire合并在一块去执行保证了原子性</strong>==</p><h3 id="优雅SET解决法"><a href="#优雅SET解决法" class="headerlink" title="优雅SET解决法"></a>优雅SET解决法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">key</span> <span class="keyword">value</span> [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><ul><li>EX second：设置键的过期时间为second秒</li><li>PX millisecond：设置键的过期时间为millisecond毫秒</li><li>NX：只在键不存在时，才对键进行设置操作</li><li>XX：只在键已经存在时，才对键进行设置操作</li><li>SET操作成功完成时，返回OK,否则返回nil</li></ul><p>伪代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class);</span><br><span class="line">String result = redisService.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"OK"</span>,equals(result)) &#123;</span><br><span class="line"><span class="comment">//执行独占资源逻辑</span></span><br><span class="line">doOcuppiedWork()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大量的key同时过期的注意事项"><a href="#大量的key同时过期的注意事项" class="headerlink" title="大量的key同时过期的注意事项"></a>大量的key同时过期的注意事项</h2><p>集中过期，由于清除大量的key很耗时，会出现短暂的卡顿现象</p><ul><li>解决方案：在设置key的过期时间的时候，给每个key加一个随机值，使得过期时间分散一些。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Redis问题&quot;&gt;&lt;a href=&quot;#Redis问题&quot; class=&quot;headerlink&quot; title=&quot;Redis问题&quot;&gt;&lt;/a&gt;Redis问题&lt;/h1&gt;&lt;h2 id=&quot;海量Key里查询出某一固定前缀的Key&quot;&gt;&lt;a href=&quot;#海量Key里查询出某一固定前缀的Key&quot; class=&quot;headerlink&quot; title=&quot;海量Key里查询出某一固定前缀的Key&quot;&gt;&lt;/a&gt;海量Key里查询出某一固定前缀的Key&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;留意细节：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;摸清数据规模，即问清楚边界&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/categories/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/tags/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis的数据类型</title>
    <link href="https://soyanga.github.io/2019/08/26/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://soyanga.github.io/2019/08/26/Redis的数据类型/</id>
    <published>2019-08-26T14:39:35.000Z</published>
    <updated>2019-08-26T14:40:42.465Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h1><a id="more"></a><blockquote><p>Redis的单个操作都是原子性的。</p></blockquote><h2 id="供用户使用的数据类型"><a href="#供用户使用的数据类型" class="headerlink" title="供用户使用的数据类型"></a>供用户使用的数据类型</h2><ul><li><strong>String：最基本的数据类型，二进制安全</strong><ul><li>k-v键值对最大能存储521MB</li><li>二进制安全的意思是Redis的String可以包含任何数据。eg:jpg图片，或者序列化的对象</li><li>底层实现<code>sdshdr</code></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *保存字符串对象的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//buf 中已占用的空间长度</span></span><br><span class="line"> <span class="keyword">int</span> len;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//buf 中剩余可用空间的长度</span></span><br><span class="line"> <span class="keyword">int</span> <span class="built_in">free</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//数据空间</span></span><br><span class="line"> <span class="keyword">char</span> buf[];</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>Hash: String元素组成的字典，适合用于存储对象（<code>field(String)-v</code>映射表）</strong><ul><li>优点类似于类对象，有属性通过get跟set访问修改属性。服务端序列化成Json的格式然后存储在其中。</li></ul></li><li><strong>List ：列表，按照String元素插入顺序排序</strong><ul><li>可以对List进行头插也可以进行尾插 </li><li><code>lpush（头插）</code>，<code>lrange（从左开始顺序取）</code> == Stack（结构类似）</li></ul></li><li><strong>Set：String元素组成的无序集合，通过哈西表实现，不允许重复</strong><ul><li><code>sadd添加 key value</code>由于唯一性正确返回1，重复添加返回0。第二次插入的元素直接被忽略。</li><li><code>smembers key value</code> 查看set集合中的元素</li><li>应用场景：微博中将一个用户的所有关注的人和粉丝分别存储在两个集合中，利用Redis的求交集并集操作可以非常方便的实现如：共同关注共同喜好互关等功能，还可以将结果返回给客户端还是存储在新的集合之中。</li><li>如果想要有序排列则需要使用Sorted Set数据类型</li></ul></li><li><strong>Sorted Set:通过分数来为集合中的成员进行从小到大的排序</strong><ul><li>与Set集合相同点：都是String类型的集合，且不允许重复的成员</li><li><strong>与Set集合不同点：每个元素都会关联一个Doublue类型的分数（Score），Redis正是通过整个分数来为集合中的成员进行排序</strong></li><li>ZSet集合中的每个成员的分数是可以重复的(重复的意思成员的<code>Score相同</code>但是成员的value不相同)</li><li><code>zrangebyscore myzaet 0 10</code>Set依据score范围排序查看</li><li>应用：给全班的同学成绩进行排序则创建一个sort set value是每一位同学姓名，score是每一位同学分数。最后进行<code>zrangebyscore</code>排序即可。</li><li>还可以用带score的set做带权重的队列按权重大小获取队列中的任务，重要任务优先执行。（优先级队列）</li></ul></li><li><strong>用于计数的HyperLogLog,用于支持存储地理位置信息的Geo</strong></li></ul><h2 id="底层数据类型基础"><a href="#底层数据类型基础" class="headerlink" title="底层数据类型基础"></a>底层数据类型基础</h2><ol><li>简单动态字符串</li><li>链表</li><li>字典</li><li>跳跃表</li><li>整数集合</li><li>压缩列表</li><li>对象</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Redis的数据类型&quot;&gt;&lt;a href=&quot;#Redis的数据类型&quot; class=&quot;headerlink&quot; title=&quot;Redis的数据类型&quot;&gt;&lt;/a&gt;Redis的数据类型&lt;/h1&gt;
    
    </summary>
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/categories/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/tags/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>初识Redis</title>
    <link href="https://soyanga.github.io/2019/08/24/%E5%88%9D%E8%AF%86Redis/"/>
    <id>https://soyanga.github.io/2019/08/24/初识Redis/</id>
    <published>2019-08-24T14:57:57.000Z</published>
    <updated>2019-08-26T14:48:03.624Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h1><h2 id="Redis的铺垫"><a href="#Redis的铺垫" class="headerlink" title="Redis的铺垫"></a>Redis的铺垫</h2><p>MySQL的数据都是存储在磁盘中的，虽然在数据库层也做了对应的缓存，但是此缓存只是针对不变动的数据（读数据做缓存，写数据清理缓存）。即这种数据库的缓存仅仅针对的查询的内容而且粒度比较小。一般只有表中数据库未发生变动的时候数据库对应的Cache才能发挥作用。</p><p>无法减少业务系统对数据库产生的增删改查的IO压力，因此缓存数据库应运而生。该技术实现了对热点数据的高速缓存，提高应用的响应速度，极大的缓解后端MySQL数据库的压力。</p><p><img src="/2019/08/24/初识Redis/1566116158126.png" alt="1566116158126"></p><a id="more"></a><h2 id="面对缓存db穿透如何解决"><a href="#面对缓存db穿透如何解决" class="headerlink" title="面对缓存db穿透如何解决"></a>面对缓存db穿透如何解决</h2><ul><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免对底层数据系统的查询压力。（博隆过滤器判断一个数据不存在则这个数据真的是不存在，反之判断一个数据存在则这个数据不一定存在）<strong>可以一定程度上进行拦截不存在的请求，但是需要支持扩容机制，以及扩容后的多个位图，都将会被查询，降低了查询效率。</strong></li><li><strong>更为简单的方法，如果一个查询返回的数据为空，我们任然将这个空结果去缓存，但是它的过期时间会很短，最长不过5分钟。</strong></li></ul><h2 id="如何保证缓存与数据库双写时的一致性？"><a href="#如何保证缓存与数据库双写时的一致性？" class="headerlink" title="如何保证缓存与数据库双写时的一致性？"></a>如何保证缓存与数据库双写时的一致性？</h2><p>如果要使用缓存，就可能涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题。那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的，缓存可以稍微跟数据库偶尔不一致的情况，最好不要做这个缓存与数据库双写的一致性操作。</p><p><strong>解决方案</strong></p><p>将读请求和写请求串行化，串到一个内存队列中去，这个可以保证一定不会出现不一致的情况。</p><p><strong>串行化后，就会导致系统的吞吐量大幅度降低，</strong>用比正常情况下多几倍的机器去支撑一个请求。</p><h2 id="熔断技术"><a href="#熔断技术" class="headerlink" title="熔断技术"></a>熔断技术</h2><p>当MySQL数据库挂掉之后，Redis层还可以工作此时的请求就直接经过Redis返回给客户端。</p><h2 id="缓存中间件——Memcache-和-Redis的区别"><a href="#缓存中间件——Memcache-和-Redis的区别" class="headerlink" title="缓存中间件——Memcache 和 Redis的区别"></a>缓存中间件——Memcache 和 Redis的区别</h2><h3 id="Memcache-代码层次类似Hash"><a href="#Memcache-代码层次类似Hash" class="headerlink" title="Memcache:代码层次类似Hash"></a>Memcache:代码层次类似Hash</h3><ul><li>支持简单的数据类</li><li>不支持数据持久化存储</li><li>不支持主从同步</li><li>不支持分片</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><strong>数据类型丰富</strong></li><li><strong>支持数据磁盘持久化存储</strong></li><li>支持主从同步</li><li>支持分片</li></ul><h3 id="为什么Redis为什么这么快"><a href="#为什么Redis为什么这么快" class="headerlink" title="为什么Redis为什么这么快"></a>为什么Redis为什么这么快</h3><p>官方提供的是：10万的并发+的qps（每秒内查询次数）</p><ul><li>完全基于内存的，绝大部分请求是纯粹的内存操作，执行效率高。</li><li>单进程，单线程模型的K-V数据库，由C语言编写。读写的时候不会受硬盘IO速度的限制。</li><li>数据简单，对数据操作也简单</li><li>Redis不使用表，不会要求用户对存储的不同数据强制性的进行关联，因此性能高出关系型数据库不知一个量级。</li><li>其存储结构就是k-v键值对，其查找，操纵的时间复杂度都是O(1)的。</li><li>采用单线程，单线程也能处理高并发请求，想使用多核也可以启动多实例。</li><li><strong>正因为采用单线程处理，所以对于客户端所有请求都采用串行处理，因此多个客户端对一个键进行写操作时，就不会产生并发问题，避免了频繁的上下文切换，锁竞争使得Redis执行起来效率更高。（配合IO多路复用即可实现超高效率）</strong></li><li><strong>多核提高性能问题Redis已经做了相关的验证，Redis的qps相当高，并且在qps峰值的时候，Redis并不会跑满CPU。只是由于网络等原因导致并发量不能进一步上升，因此cpu并不是制约Redis的性能瓶颈。</strong></li></ul><blockquote><p>这里的单线程，只是说在处理网络请求中，我们使用单线程来处理。Redis Server并不是只有一个线程在处理。例如：Redis在持久化的时使用子进程或者子线程对Redis做持久化处理。</p></blockquote><ul><li><p>使用多路I/O复用模型，非阻塞IO（NIO）</p><p>Redis是在单线程执行由于读写操作会等待用户的输入输出时会出现阻塞，所以IO操作往往不能直接返回，进而导致整个进程无法对其他客户端提供服务。而IO对路复用是针对这个问题而出现的。</p></li></ul><h2 id="多路I-O复用模型"><a href="#多路I-O复用模型" class="headerlink" title="多路I/O复用模型"></a>多路I/O复用模型</h2><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p><strong>FD：</strong>File Descriptor, 文件描述符（用一个整数来表示）</p><p>​    操作系统中，一个打开的文件通过唯一的描述符进行引用，该描述符是打开文件的元数据到文件本身的映射。</p><h3 id="传统的IO阻塞模型"><a href="#传统的IO阻塞模型" class="headerlink" title="传统的IO阻塞模型"></a>传统的IO阻塞模型</h3><p><img src="/2019/08/24/初识Redis/1566119511319.png" alt="1566119511319"></p><p>会影响其他FD对应的服务，所以在需要处理多个任务处理任务的时候往往不会使用阻塞IO模型。</p><h3 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h3><p><strong>Select</strong>系统调用</p><p><img src="/2019/08/24/初识Redis/1566119661055.png" alt="1566119661055"></p><blockquote><p>Select 可以同时监控多个文件描述符的可读可写情况，当某个文件描述符可读可写时，Select就会返回这个可读可写的文件描述的个数。</p><p>Select是负责监听文件是否可读或者可写的将监听的任务交给Selecter后我们的程序就不会被阻塞了，可以执行其他任务去了。</p></blockquote><h3 id="Redis采用的I-O多路复用函数：epoll-kqueue-evport-select"><a href="#Redis采用的I-O多路复用函数：epoll-kqueue-evport-select" class="headerlink" title="Redis采用的I/O多路复用函数：epoll/kqueue/evport/select"></a>Redis采用的I/O多路复用函数：epoll/kqueue/evport/select</h3><ul><li><p>因地制宜</p><ul><li><p>因为Redis需要在多个平台上运行，为了最大化的提高执行效率和性能，会根据编译平台的不同。选择不同的I/O多路复用函数作为子模块。提供给上层统一的接口</p></li><li><p>redis的多路复用， 提供了select, epoll, evport, kqueue几种选择，在编译的时候来选择一种。</p><p>select是POSIX提供的， 一般的操作系统都有支撑<br>epoll 是LINUX系统内核提供支持的；<br>evport是Solaris系统内核提供支持的；<br>kqueue是Mac 系统提供支持的；</p></li></ul></li><li><p>优先选择时间复杂度为O(1)的I/O多路复用函数作为底层实现</p></li><li><p>一时间复杂度为O(n)的select作为保底</p><ul><li>因为select是POSIX提供的， 一般的操作系统都有支撑，会扫描监听的全部文件描述符，所以时间复杂度较大为O(n)</li></ul></li><li><p>基于react设计模式监听I/O事件（文件事件处理器）</p><ul><li>文件事件处理器采用I/O多路复用模块监听多个fd,accept,read,close事件产生时，文件事件处理器就会回调fd绑定的事件处理器。虽然文件事件处理器是单线程下的，但是采用I/O多路复用，实现了对多个fd读写的监控，提高了网络通信模型的性能，同时可以保证整个Redis服务的实现简单。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;初识Redis&quot;&gt;&lt;a href=&quot;#初识Redis&quot; class=&quot;headerlink&quot; title=&quot;初识Redis&quot;&gt;&lt;/a&gt;初识Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis的铺垫&quot;&gt;&lt;a href=&quot;#Redis的铺垫&quot; class=&quot;headerlink&quot; title=&quot;Redis的铺垫&quot;&gt;&lt;/a&gt;Redis的铺垫&lt;/h2&gt;&lt;p&gt;MySQL的数据都是存储在磁盘中的，虽然在数据库层也做了对应的缓存，但是此缓存只是针对不变动的数据（读数据做缓存，写数据清理缓存）。即这种数据库的缓存仅仅针对的查询的内容而且粒度比较小。一般只有表中数据库未发生变动的时候数据库对应的Cache才能发挥作用。&lt;/p&gt;
&lt;p&gt;无法减少业务系统对数据库产生的增删改查的IO压力，因此缓存数据库应运而生。该技术实现了对热点数据的高速缓存，提高应用的响应速度，极大的缓解后端MySQL数据库的压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/24/初识Redis/1566116158126.png&quot; alt=&quot;1566116158126&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/categories/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis数据库" scheme="https://soyanga.github.io/tags/Redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux重要指令回顾总结</title>
    <link href="https://soyanga.github.io/2019/08/19/Linux%E9%87%8D%E8%A6%81%E6%8C%87%E4%BB%A4%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
    <id>https://soyanga.github.io/2019/08/19/Linux重要指令回顾总结/</id>
    <published>2019-08-19T15:41:36.000Z</published>
    <updated>2019-08-19T15:46:48.910Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Linux常见指令总结"><a href="#Linux常见指令总结" class="headerlink" title="Linux常见指令总结"></a>Linux常见指令总结</h1><p><img src="/2019/08/19/Linux重要指令回顾总结/标题图.png" alt="标题图"></p><a id="more"></a><h2 id="如何查找特定的文件（find）"><a href="#如何查找特定的文件（find）" class="headerlink" title="如何查找特定的文件（find）"></a>如何查找特定的文件（find）</h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find path [options] params</span><br></pre></td></tr></table></figure><p><strong>作用：在指定目录下查找文件</strong></p><p>eg:</p><ul><li><strong>从当前目录下查找名为target3.java的文件</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name "target3.java" // 从当前目录下查找名为target3.java的文件，返回这个文件的路径</span><br></pre></td></tr></table></figure><ul><li><strong>进行全局查找一个文件( / Linux下的根目录)</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name  "target3.java" //在全局查找名为target3.java的文件，返回这个文件的路径</span><br></pre></td></tr></table></figure><ul><li><strong>在home目录下查找一个以<code>“target”</code>打头的文件（~ Linux下的home目录）</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "target*"</span><br></pre></td></tr></table></figure><ul><li><strong>在home目录下查找一个“target”打头的文件且不区分大小写</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -iname "targe*"</span><br></pre></td></tr></table></figure><p>输入<code>man  指令名</code>的形式获得指令名的参数选项（用法）</p><h2 id="检索文件内容（grep）"><a href="#检索文件内容（grep）" class="headerlink" title="检索文件内容（grep）"></a>检索文件内容（grep）</h2><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattren file</span><br></pre></td></tr></table></figure><ul><li><p>全称： Globle Regular Expression Print</p></li><li><p>作用：<strong>查找文件里符合条件的字符串</strong> </p><p>显示的结果为文件中包含目标字符串所在的行，其余行是不会显示的</p></li></ul><ul><li><strong>查找名为target开头的文件中包含 <code>moo</code>的文件</strong> </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;moo&quot; target*</span><br></pre></td></tr></table></figure><h2 id="管道操作符-（-）"><a href="#管道操作符-（-）" class="headerlink" title="管道操作符 （|）"></a>管道操作符 （|）</h2><ul><li><p>可将指令连接起来，<strong>前一个指令的输出作为后一个指令的输入</strong></p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566142159754.png" alt="管道操作符 "></p></li></ul><p>eg:</p><p>从home目录下查找一个文件名前缀为<code>target</code>的文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "target*"</span><br></pre></td></tr></table></figure><p>也可以用管道是实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ | grep "target"</span><br></pre></td></tr></table></figure><p>find ~表示输出当前目录下所有文件，作为输入输入给grep命令，让grep命令在输入文件中筛选出名字包含target的文件名并且输出来。</p><h3 id="使用管道注意的要点"><a href="#使用管道注意的要点" class="headerlink" title="使用管道注意的要点"></a>使用管道注意的要点</h3><ul><li><strong>只处理前一个命令正确的输出，不处理错误的输出。</strong></li><li><strong>右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃。</strong></li><li>sed,awk,gerp,cut,head,top,less,more,wc,join,sort,split等接收标准输入流</li></ul><h3 id="grep的使用——日志文件相关的"><a href="#grep的使用——日志文件相关的" class="headerlink" title="grep的使用——日志文件相关的"></a>grep的使用——日志文件相关的</h3><p>查找日志文件中包含<code>&#39;partial\[true\]&#39;</code>的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log</span><br></pre></td></tr></table></figure><p>将包含<code>partial\[true\]</code>行中的引擎名称打印出来 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]'</span><br></pre></td></tr></table></figure><p>将前一个的输出流做为第二个grep 的输入流 且带一个-o参数进行二次筛选</p><p>将与tomcat相关的进程信息打印出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -rf | grep tomcat</span><br></pre></td></tr></table></figure><p>也会将当前grep指令查找tomcat都打印出来，我们不需要这条信息 使用grep -v “grep”清除含有grep的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -rf | grep tomcat | grep -v "grep"</span><br></pre></td></tr></table></figure><h2 id="grep总结"><a href="#grep总结" class="headerlink" title="grep总结"></a>grep总结</h2><ul><li><code>grep &#39;partial\[true\]&#39; bac-plat-al-data.info.log</code></li><li><code>grep -o &#39;engine\[[0-9a-z]*\]&#39;</code>  使用 -o选项筛选出符合正则表达式的结果输出</li><li><code>grep -v &quot;grep&quot;</code>过滤掉包含相关字符串的内容</li></ul><h2 id="对文件内容做统计-awk"><a href="#对文件内容做统计-awk" class="headerlink" title="对文件内容做统计(awk)"></a>对文件内容做统计(awk)</h2><p><strong>awk统计指令</strong></p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] 'cmd' file</span><br></pre></td></tr></table></figure><ul><li><strong>一次读取一行文本，按输入==分割符==进行切片，切成多个组成部分</strong></li><li><strong>将切片直接保存在内建的变量中，\$1,\$2… ($0表示行的全部)</strong> <em>按列逐行进行切片</em></li><li><strong>支持对单个切片的判断，支持循环判断，默认分割符为空格</strong></li></ul><p><img src="/2019/08/19/Linux重要指令回顾总结/1566147758436.png" alt="对文件内容做统计"></p><p><strong>本文件中分为6列，我们利用awk将其按默认空格分割，且取出其第一列和第四列进行打印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $1,$4&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566147889495.png" alt="1566147889495"></p><p><strong>筛选 Proto为tcp 且 Recv-Q为1的数据行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' $1== tcp &amp;&amp; $2 == 1&#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148145306.png" alt="1566148145306"></p><p>如果要显示出表头则引入内建变量<code>NR</code>即可，从awk开始执行开始后，按照<strong>记录分割符</strong>，读取数据的次数</p><p>默认记录分割符是换行符，<strong>则默认的就是读取的数据行数。</strong>表头位于第一行，则NR设置为1即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' ($1==tcp &amp;&amp; $2==1) || NR==1 &#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148499562.png" alt="1566148499562"></p><p>使用自定义分割符筛选数据</p><p>使用<code>“,”</code>进行筛选 -F是不可缺少的，意思是以什么符号去分割筛选内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F "," '&#123;print $2&#125;' test.txt</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566148623262.png" alt="1566148623262"></p><p>打印以上日志中每个引擎出现的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]' </span><br><span class="line">| awk '&#123;enginearr[$1]++&#125;END&#123;for(i in enginearr)print i "\t" enginearr[i]&#125;'</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566149012312.png" alt="1566149012312"></p><p>分析指令含义：</p><p><code>awk {enginearr[$1]++}</code> 将awk按空格分割的行的数据存储在一个数组中，且数组下标是第一列，数组中的内容是第一列出现的次数。</p><p><code>END{for(i in enginearr)print i &quot;\t&quot; enginearr[i]}</code>END表示在前面执行完之后，会执行{}中的内容。</p><p>即遍历数组，i作为数组的下标，并且打印出数组中每行的下标  + “/t” + 数组内容。即<code>$1 +&quot;\t&quot; +出现次数</code></p><p>结果如上所示。</p><h2 id="awk总结"><a href="#awk总结" class="headerlink" title="awk总结"></a>awk总结</h2><p><strong>awk特别适合处理表格等格式化好的结果，文件。</strong></p><ul><li><strong>筛选出文件内容中某些列的数据 筛选件可以是多个空格隔开即可</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;pring $1,$4&#125;' netstat.txt</span><br></pre></td></tr></table></figure><ul><li><strong>筛选出文件内容中符合某些要求的列的数据</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' ($1==tcp &amp;&amp; $2==1) || NR==1 &#123;print $0&#125;' netstat.txt</span><br></pre></td></tr></table></figure><ul><li><strong>对筛选的内容逐行做统计操作，并且列出对应的统计结果</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 'partial\[true\]' bac-plat-al-data.info.log | grep -o 'engine\[[0-9a-z]*\]' </span><br><span class="line">| awk '&#123;enginearr[$1]++&#125;END&#123;for(i in enginearr)print i "\t" enginearr[i]&#125;'</span><br></pre></td></tr></table></figure><h2 id="批量替换掉文件里的内容（sed）"><a href="#批量替换掉文件里的内容（sed）" class="headerlink" title="批量替换掉文件里的内容（sed）"></a>批量替换掉文件里的内容（sed）</h2><p>sed指令</p><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [options] 'sed command' filename</span><br></pre></td></tr></table></figure><ul><li>全名 stream editor 流编辑器</li><li>适合用于对文本的行内容进行处理（利用正则表达式）</li></ul><p><img src="/2019/08/19/Linux重要指令回顾总结/1566149874323.png" alt="1566149874323"></p><p><strong>替换文件中错误的Str开头的行，替换为String</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^Str/String/' replace.java</span><br></pre></td></tr></table></figure><p>参数解析<code>&#39;-i s/^Str/String/&#39;</code></p><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p>s: 表示要进行字符串的操作</p><p>/^Str：要替换的字符串的开头</p><p>/String：替换后的字符串</p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150237798.png" alt="1566150237798"></p><p><strong>替换每一行末尾的<code>.</code>变为分号<code>;</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/\.$/\;/'</span>  replace.java</span><br></pre></td></tr></table></figure><p>解析：</p><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p> <code>.</code>需要被转义一下为<code>\.</code>且 <code>$</code>表示以什么结尾</p><p><code>\;</code>表示转义</p><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150709745.png" alt="1566150709745"></p><h2 id="sed总结"><a href="#sed总结" class="headerlink" title="sed总结"></a>sed总结</h2><ul><li>替换以什么开头的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/^Str/String/' replace.java</span><br></pre></td></tr></table></figure><ul><li>替换以什么结尾的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/\.$/\;/'  replace.java</span><br></pre></td></tr></table></figure><ul><li>全文替换所有的文字出现的字符串</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/Jack/me/g' replace.java</span><br></pre></td></tr></table></figure><p><strong>-i：选项表示的是目前最后的结果输入到文件中，否则只是将结果输出到终端上</strong></p><p><strong>最后一个参数g表示替换全文的，不加这个参数表示则只是替换当前行第一次出现Jack的字符串</strong></p><ul><li>删除文本中的空行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/^ *$/d' replace.java</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566150931800.png" alt="1566150931800"></p><p><code>/^ *&amp;</code>:以空格开头结尾 <code>d</code>表示删除</p><ul><li>删除文中满足条件的行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/Integer/d' replace.java</span><br></pre></td></tr></table></figure><p><img src="/2019/08/19/Linux重要指令回顾总结/1566151071477.png" alt="1566151071477"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;Linux常见指令总结&quot;&gt;&lt;a href=&quot;#Linux常见指令总结&quot; class=&quot;headerlink&quot; title=&quot;Linux常见指令总结&quot;&gt;&lt;/a&gt;Linux常见指令总结&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/08/19/Linux重要指令回顾总结/标题图.png&quot; alt=&quot;标题图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux常用指令" scheme="https://soyanga.github.io/categories/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
    
      <category term="Linux" scheme="https://soyanga.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux回炉</title>
    <link href="https://soyanga.github.io/2019/08/19/Linux%E5%9B%9E%E7%82%89/"/>
    <id>https://soyanga.github.io/2019/08/19/Linux回炉/</id>
    <published>2019-08-19T15:36:07.000Z</published>
    <updated>2019-08-19T15:40:42.080Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Linux知识学习"><a href="#Linux知识学习" class="headerlink" title="Linux知识学习"></a>Linux知识学习</h1><h2 id="Linux体系结构"><a href="#Linux体系结构" class="headerlink" title="Linux体系结构"></a>Linux体系结构</h2><p><img src="/2019/08/19/Linux回炉/1566119979376.png" alt="Linux体系结构"></p><ul><li>体系结构主要分为用<strong>户态（用户上层活动）和内核态</strong></li></ul><a id="more"></a><ul><li><p><strong>内核：本质是一段管理计算机硬件设备的程序</strong></p><blockquote><p><em>直接管理硬件，包括<strong>CPU</strong>,<strong>硬盘接口</strong>，<strong>网络接口</strong>等等。<strong>所有的计算机操作都需要通过内核传递给硬件</strong>。</em></p><p><em>用户程序的执行必须依托于内核的资源，<strong>包括CPU资源，存储资源，IO资源等</strong>。</em></p><p><em>为了访问这些资源，内核为其必须提供相应的接口，即<strong>系统调用</strong></em></p></blockquote></li><li><p>系统调用：内核的访问接口，是一种能再简化的操作</p><blockquote><p>一个操作系统上的功能，可以看作是操作系统上的系统调用的组合的结果。</p><p>一个操作系统不可能做出超越系统调用的操作，eg:给变量分配内存空间，就需要调用很多的系统调用。</p><p>由于一个系统的操作，比如分配变量内存需要调用需多系统调用指令，这无疑是给系统程序员增加了负担，因此产生了公共函数库，将程序员从复杂的系统调用细节种解脱出来，而提出的一种有效方法。</p></blockquote></li><li><p>公共函数库：系统的调用的组合拳（实现对系统调用的封装，将简单的业务逻辑，及接口呈现给用户，方便用户调用，极大的增强了程序涉及的灵活性），对于简单的操作我们可以直接调用系统资源进行，对于复杂的操作我们可以使用公共库函数实现。根据不同的实现标准会产生，不同的标准库，ISOC标准库等。</p></li><li><p>Shell:命令解释器，可编程。下通系统调用，上通各种应用。通常充当着一种胶水的角色。来连接各个小功能程序。让不同的程序能够以一个清晰的接口协调工作，从而增强各程序的功能。</p><blockquote><p>在没有图形界面之前Shell充当了用户的界面，当用户需要运行某些应用的时候，要通过Shell输入命令，已建立运行程序，同时Shell是可编程的，它可以执行符合Shell语法的文本。这样的文本称为Shell脚本。</p></blockquote></li></ul><p>通常简短的Shell命令，可以实现强大的功能，原因就是这些Shell语句通常对系统调用做了一层封装。</p><p>为了方便用户和系统交互，通常一个Shell对应一个系统终端，终端是一个硬件设备呈现个用户的是一个命令行的一个窗口，我们可以通过这个窗口输入或着输出这个文本，这个文本直接传递给Shell，进行分析解释执行。</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>查看系统调用的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 syscalls</span><br></pre></td></tr></table></figure><p>查看系统调用说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 acct</span><br></pre></td></tr></table></figure><p><strong><code>man 2</code>查询的是系统调用，<code>man 3</code>查询的是系统的库函数</strong></p><h3 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt</span><br></pre></td></tr></table></figure><p>使用<code>which ls</code>查看在默认文件下执行ls的文件路径 <code>/bin/ls</code> </p><p>Shell解析器解析<code>ls -lrt</code>这个字符串解析首先在默认路径下去查找<code>ls</code>的文件，找到后Shell将参数<code>-lrt</code>传入到在<code></code>ls`文件中去执行。</p><ul><li>查看当前Shell版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>查看可使用的Shell</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ul><li>修改当前使用的Shell，任意切换到Shell上面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s +Shell路径</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;Linux知识学习&quot;&gt;&lt;a href=&quot;#Linux知识学习&quot; class=&quot;headerlink&quot; title=&quot;Linux知识学习&quot;&gt;&lt;/a&gt;Linux知识学习&lt;/h1&gt;&lt;h2 id=&quot;Linux体系结构&quot;&gt;&lt;a href=&quot;#Linux体系结构&quot; class=&quot;headerlink&quot; title=&quot;Linux体系结构&quot;&gt;&lt;/a&gt;Linux体系结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/08/19/Linux回炉/1566119979376.png&quot; alt=&quot;Linux体系结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体系结构主要分为用&lt;strong&gt;户态（用户上层活动）和内核态&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://soyanga.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://soyanga.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>动态规划-买卖股票一网打尽(转载)</title>
    <link href="https://soyanga.github.io/2019/06/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E4%B8%80%E7%BD%91%E6%89%93%E5%B0%BD(%E8%BD%AC%E8%BD%BD)/"/>
    <id>https://soyanga.github.io/2019/06/29/动态规划-买卖股票一网打尽(转载)/</id>
    <published>2019-06-28T18:31:16.000Z</published>
    <updated>2019-06-28T18:35:22.689Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="买卖股票问题之一网打尽-call-me-hand"><a href="#买卖股票问题之一网打尽-call-me-hand" class="headerlink" title="买卖股票问题之一网打尽:call_me_hand:"></a>买卖股票问题之一网打尽:call_me_hand:</h1><p><img src="https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png" alt="状态转移图"></p><a id="more"></a><blockquote><p>在原作者的基础上，融合自身理解的东西，写成了java版的。</p><p>原作者：labuladong</p><p>链接：<a href="https://leetcode-cn.com/problems/two-sum/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/</a><br>来源：力扣（LeetCode）</p></blockquote><p>很多读者抱怨股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变。</p><p>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。</p><p>先随便抽出一道题，看看别人的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> prices[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span> s1=-prices[<span class="number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.size();++i) &#123;            </span><br><span class="line">    s1 = max(s1, -prices[i]);</span><br><span class="line">    s2 = max(s2, s1+prices[i]);</span><br><span class="line">    s3 = max(s3, s2-prices[i]);</span><br><span class="line">    s4 = max(s4, s3+prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(<span class="number">0</span>,s4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。</p><p>本文就来告诉你这个框架，然后带着你一道一道秒杀。</p><p>这 6 道股票买卖问题是有共性的，我们通过对第四题（限制最大交易次数为 k）的分析一道一道解决。因为第四题是一个最泛化的形式，其他的问题都是这个形式的简化。</p><p>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。</p><h2 id="一、穷举框架"><a href="#一、穷举框架" class="headerlink" title="一、穷举框架"></a>一、穷举框架</h2><p>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。</p><p>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。</p><p>而这里，我们不用递归思想进行穷举，而是利用「<strong>状态</strong>」进行穷举。我们具体到每一天，看看总共有几种可能的「<strong>状态</strong>」，再找出每个「<strong>状态</strong>」对应的「<strong>选择</strong>」。<strong>我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象</strong>，你只要记住「<strong>状态</strong>」和「<strong>选择</strong>」两个词就行，下面实操一下就很容易明白了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 择优(选择<span class="number">1</span>，选择<span class="number">2</span>...)</span><br></pre></td></tr></table></figure><p>比如说这个问题<strong>，每天都有三种「选择」：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择</strong>。</p><p>但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。</p><p>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span> or <span class="number">1</span>]</span><br><span class="line"><span class="number">0</span> &lt;= i &lt;= n-<span class="number">1</span>, <span class="number">1</span> &lt;= k &lt;= K</span><br><span class="line">n 为天数，大 K 为最多交易数</span><br><span class="line">此问题共 n × K × <span class="number">2</span> 种状态，全部穷举就能搞定。</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; n:</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= k &lt;= K:</span><br><span class="line">        <span class="keyword">for</span> s in &#123;<span class="number">0</span>, <span class="number">1</span>&#125;:</span><br><span class="line">            dp[i][k][s] = max(buy, sell, rest)</span><br></pre></td></tr></table></figure><p>而且我们可以用自然语言描述出每一个状态的含义，比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？</p><p>我们想求的最终答案是 <strong>dp[n - 1][K][0]</strong>，<em>即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。</em></p><p>记住如何解释「<strong>状态</strong>」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。</p><h2 id="二、状态转移框架"><a href="#二、状态转移框架" class="headerlink" title="二、状态转移框架"></a>二、状态转移框架</h2><p>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。</p><p><img src="https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png" alt="状态转移图"></p><p>通过这个图可以很清楚地看到，每种状态（<strong>0 和 1</strong>）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 sell      )</span><br><span class="line"></span><br><span class="line">解释：今天我没有持有股票，有两种可能：</span><br><span class="line">要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；</span><br><span class="line">要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。</span><br><span class="line"></span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">              max(   选择 rest  ,           选择 buy         )</span><br><span class="line"></span><br><span class="line">解释：今天我持有着股票，有两种可能：</span><br><span class="line">要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；</span><br><span class="line">要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。</span><br></pre></td></tr></table></figure><p>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。<strong>而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。</strong></p><h2 id="三、初始化就解析-person-fencing"><a href="#三、初始化就解析-person-fencing" class="headerlink" title="三、初始化就解析 :person_fencing:"></a>三、初始化就解析 :person_fencing:</h2><p>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。不过还差最后一点点，就是定义 <strong>base case(初始化)</strong>，即最简单的情况。</p><p>注意i与k的不同，表示不同的含义。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; dp[-<span class="number">1</span>][k][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">&gt; 解释：因为 i 是从 <span class="number">0</span> 开始的，所以 i = -<span class="number">1</span> 意味着还没有开始，这时候的利润当然是 <span class="number">0</span> 。</span><br><span class="line">&gt; dp[-<span class="number">1</span>][k][<span class="number">1</span>] = -infinity</span><br><span class="line">&gt; 解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。</span><br><span class="line">&gt; dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">&gt; 解释：因为 k 是从 <span class="number">1</span> 开始的，所以 k = <span class="number">0</span> 意味着根本不允许交易，这时候利润当然是 <span class="number">0</span> 。</span><br><span class="line">&gt; dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity</span><br><span class="line">&gt; 解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>把上面的状态转移方程总结一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base <span class="keyword">case</span>：</span><br><span class="line">dp[-<span class="number">1</span>][k][<span class="number">0</span>] = dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">dp[-<span class="number">1</span>][k][<span class="number">1</span>] = dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity</span><br></pre></td></tr></table></figure><blockquote><p>状态转移方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])<span class="comment">//维持，前一天卖出--当天无股票</span></span><br><span class="line">&gt; dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])<span class="comment">//维持，前一天买入--当前有股票</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p><p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。</p></blockquote><p>==<strong>由上知i = 0时转状态转移方程初始化如下：</strong>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">显然 i = <span class="number">0</span> 时 dp[i-<span class="number">1</span>] 是不合法的。这是因为我们没有对 i 的 base <span class="keyword">case</span> 进行处理。可以这样处理：</span><br><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]) </span><br><span class="line">= max(<span class="number">0</span>,-infinity + prices[i]) = <span class="number">0</span></span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">= max(-infinity, <span class="number">0</span>-prices[i]) = -prices[i]</span><br></pre></td></tr></table></figure><h2 id="四、秒杀题目-hatching-chick"><a href="#四、秒杀题目-hatching-chick" class="headerlink" title="四、秒杀题目:hatching_chick:"></a>四、秒杀题目:hatching_chick:</h2><h3 id="第一题，k-1"><a href="#第一题，k-1" class="headerlink" title="第一题，k = 1"></a><strong>第一题，k = 1</strong></h3><p>直接套状态转移方程，根据 base case，可以做一些化简：  <strong><code>dp[i-1][0][0] = 0</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">1</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] - prices[i]) </span><br><span class="line">            = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br><span class="line">解释：k = <span class="number">0</span> 的 base <span class="keyword">case</span>，所以 dp[i-<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">现在发现 k 都是 <span class="number">1</span>，不会改变，即 k 对状态转移已经没有影响了。</span><br><span class="line">可以进行进一步化简去掉所有 k：</span><br><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br></pre></td></tr></table></figure><p>直接写出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = prices.length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>显然 <code>i = 0</code> 时 <code>dp[i-1]</code>是不合法的。这是因为我们没有对 <code>i</code> 的 base case 进行处理。可以这样处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][0] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][0], dp[-1][1] + prices[i])</span></span><br><span class="line">        <span class="comment">// = max(0, -infinity + prices[i]) = 0</span></span><br><span class="line">        dp[i][<span class="number">1</span>] = -prices[i];</span><br><span class="line">        <span class="comment">//解释：</span></span><br><span class="line">        <span class="comment">//   dp[i][1] </span></span><br><span class="line">        <span class="comment">// = max(dp[-1][1], dp[-1][0] - prices[i])</span></span><br><span class="line">        <span class="comment">// = max(-infinity, 0 - prices[i]) </span></span><br><span class="line">        <span class="comment">// = -prices[i]</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，<strong>新状态只和相邻的一个状态有关</strong>，其实不用整个 dp 数组，<strong>只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k == 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit_k_1</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="comment">// base case: dp[-1][0] = 0, dp[-1][1] = -infinity</span></span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span></span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        <span class="comment">// dp[i][1] = max(dp[i-1][1], -prices[i])</span></span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, -prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。</p><h3 id="第二题，k-infinity"><a href="#第二题，k-infinity" class="headerlink" title="第二题，k = +infinity"></a>第二题，k = +infinity</h3><p><strong>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。</strong>可以这样改写框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">            = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p><strong>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])<span class="comment">//卖出</span></span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i])<span class="comment">//买入</span></span><br></pre></td></tr></table></figure><p>直接翻译成代码：</p><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, temp - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题，k-infinity-with-cooldown-基于第二题"><a href="#第三题，k-infinity-with-cooldown-基于第二题" class="headerlink" title="第三题，k = +infinity with cooldown(基于第二题)"></a>第三题，k = +infinity with cooldown(基于第二题)</h3><p>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])<span class="comment">//卖出</span></span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">2</span>][<span class="number">0</span>] - prices[i])<span class="comment">//买入</span></span><br></pre></td></tr></table></figure><p>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。</p><p>翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> dp_pre_0 = <span class="number">0</span>; <span class="comment">// 代表 dp[i-2][0]mai'ru</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">            dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);</span><br><span class="line">            <span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">            dp_pre_0 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_i_0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者方程如下,添加另一种状态过渡期状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第i天不持有股票的情况有两种</span></span><br><span class="line"><span class="comment">//a.第i-1天也不持有股票</span></span><br><span class="line"><span class="comment">//b.第i-1天是过渡期</span></span><br><span class="line">mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//第i天持有股票有两种情况</span></span><br><span class="line"><span class="comment">//a.第i-1天也持有股票，第i天不操作，</span></span><br><span class="line"><span class="comment">//b.第i-1天不持有股票，在第i天买入</span></span><br><span class="line">mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line"><span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">mp[i][<span class="number">2</span>] = mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i];</span><br></pre></td></tr></table></figure><p>翻译代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> mp[][] = <span class="keyword">new</span> <span class="keyword">int</span> [n][<span class="number">3</span>]; <span class="comment">//由于可以无限次交易，所以只定义两个维度，第一个维度是天数，第二个维度表示是否持有股票，0表示不持有，1表示持有，2表示过渡期</span></span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//第i天不持有股票的情况有两种</span></span><br><span class="line">            <span class="comment">//a.第i-1天也不持有股票</span></span><br><span class="line">            <span class="comment">//b.第i-1天是过渡期</span></span><br><span class="line">            mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">//第i天持有股票有两种情况</span></span><br><span class="line">            <span class="comment">//a.第i-1天也持有股票，第i天不操作，</span></span><br><span class="line">            <span class="comment">//b.第i-1天不持有股票，在第i天买入</span></span><br><span class="line">            mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            <span class="comment">//第i天是冷冻期只有一种情况，第i-1天持有股票且卖出</span></span><br><span class="line">            mp[i][<span class="number">2</span>] = mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后最大利润为最后一天，不持有股票或者进入冷冻期的情况</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(mp[n-<span class="number">1</span>][<span class="number">0</span>], mp[n-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四题，k-infinity-with-fee-基于第二题"><a href="#第四题，k-infinity-with-fee-基于第二题" class="headerlink" title="第四题，k = +infinity with fee(基于第二题)"></a>第四题，k = +infinity with fee(基于第二题)</h3><p>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i] - fee)<span class="comment">//设，前一天卖出交手续费（记完整一次交易）</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。</p></blockquote><p>直接翻译成代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] mp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">1</span>] = - prices[<span class="number">0</span>]-fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            mp[i][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">0</span>], mp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            mp[i][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][<span class="number">1</span>], mp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]-fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化可以使用变量来代替数组将空间时间复杂度变为O(1)</p><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_with_fee</span><span class="params">(<span class="keyword">int</span>[] prices, <span class="keyword">int</span> fee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">int</span> dp_i_0 = <span class="number">0</span>, dp_i_1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp_i_0;</span><br><span class="line">        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);</span><br><span class="line">        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i_0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题，k-2"><a href="#第五题，k-2" class="headerlink" title="第五题，k = 2"></a>第五题，k = 2</h3><p>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。</p><p><strong>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了</strong>。我们直接写代码，边写边分析原因。</p><p>原始的动态转移方程，没有可化简的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure><p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p><p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">/* 处理一下 base case*/</span> &#125;</span><br><span class="line">    dp[i][k][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">    dp[i][k][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>][k][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>为什么错误？我这不是照着状态转移方程写的吗？</p><p>还记得前面总结的「<strong>穷举框架</strong>」吗？就是说我们必须穷举所有状态。<strong>其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxK = <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span> [][][]mp = <span class="keyword">new</span> <span class="keyword">int</span>[n][maxK+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = maxK; k &gt; <span class="number">0</span>;k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i-<span class="number">1</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//处理 base case(初始化)</span></span><br><span class="line">                    mp[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                    mp[i][k][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[i][k][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][k][<span class="number">0</span>], mp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                mp[i][k][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][k][<span class="number">1</span>], mp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举了 n × max_k × 2 个状态，正确。</span></span><br><span class="line">        <span class="keyword">return</span> mp[n-<span class="number">1</span>][maxK][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。</p><p>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况手动列举出来也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">2</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">2</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][<span class="number">1</span>][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>], -prices[i])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> dp_i10 = <span class="number">0</span>, dp_i11 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> dp_i20 = <span class="number">0</span>, dp_i21 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">            dp_i20 = Math.max(dp_i20, dp_i21 + price);</span><br><span class="line">            dp_i21 = Math.max(dp_i21, dp_i10 - price);</span><br><span class="line">            dp_i10 = Math.max(dp_i10, dp_i11 + price);</span><br><span class="line">            dp_i11 = Math.max(dp_i11, -price);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i20;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会一头雾水，大惊失色，不得不对你肃然起敬。</p><h3 id="第六题，k-any-integer"><a href="#第六题，k-any-integer" class="headerlink" title="第六题，k = any integer"></a>第六题，k = any integer</h3><p>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。<strong>但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？</strong></p><p><strong>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。</strong></p><p>直接把之前的代码重用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit_k_any</span><span class="params">(<span class="keyword">int</span> max_k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = prices.length;</span><br><span class="line">    <span class="keyword">if</span> (max_k &gt; n / <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">return</span> maxProfit_k_inf(prices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][max_k + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = max_k; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> == -<span class="number">1</span>) &#123; <span class="comment">/* 处理 base case */</span> &#125;</span><br><span class="line">            dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);     </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>][max_k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices==<span class="keyword">null</span> || k==<span class="number">0</span> || prices.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。代码复用</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;prices.length/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> maxProfit(prices);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> [][][] mp = <span class="keyword">new</span> <span class="keyword">int</span> [prices.length][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = k; n &gt; <span class="number">0</span>  ; n--)&#123; <span class="comment">//交易次数</span></span><br><span class="line">                <span class="keyword">if</span>(i-<span class="number">1</span> == -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//初始化</span></span><br><span class="line">                    mp[i][n][<span class="number">0</span>] =  <span class="number">0</span>;</span><br><span class="line">                    mp[i][n][<span class="number">1</span>] = -prices[i];</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mp[i][n][<span class="number">0</span>] = Math.max(mp[i-<span class="number">1</span>][n][<span class="number">0</span>], mp[i-<span class="number">1</span>][n][<span class="number">1</span>] + prices[i]);</span><br><span class="line">                mp[i][n][<span class="number">1</span>] = Math.max(mp[i-<span class="number">1</span>][n][<span class="number">1</span>], mp[i-<span class="number">1</span>][n-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> mp[prices.length-<span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//买卖股票的最佳时机 II</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i-<span class="number">1</span>]&lt;prices[i])&#123;</span><br><span class="line">                max+=prices[i]-prices[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，6 道题目通过一个状态转移方程全部解决。</p><h2 id="五、最后总结-grin"><a href="#五、最后总结-grin" class="headerlink" title="五、最后总结:grin:"></a>五、最后总结:grin:</h2><p>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。</p><p>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？</p><p>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「<strong>三维 DP</strong>」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有。</p><p>所以，大家不要被各种高大上的名词吓到，再多的困难问题，奇技淫巧，也不过是基本套路的不断升级组合产生的。只要把住算法的底层原理，即可举一反三，逐个击破。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h1 id=&quot;买卖股票问题之一网打尽-call-me-hand&quot;&gt;&lt;a href=&quot;#买卖股票问题之一网打尽-call-me-hand&quot; class=&quot;headerlink&quot; title=&quot;买卖股票问题之一网打尽:call_me_hand:&quot;&gt;&lt;/a&gt;买卖股票问题之一网打尽:call_me_hand:&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic.leetcode-cn.com/c4eb5f0aa4daf7bef4b3b8af95129bb7394ec58e1ba7b191d9104bbd8ff1ccb3-40198bf2f6894018328b250b772b4a17724a983f99ba359b798a289733bffcbc-file_1559885188422-1.png&quot; alt=&quot;状态转移图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="经典算法题分析" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="动态规划 Dynamic Programming" scheme="https://soyanga.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-Dynamic-Programming/"/>
    
      <category term="转载修改" scheme="https://soyanga.github.io/tags/%E8%BD%AC%E8%BD%BD%E4%BF%AE%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>动态规划Dynamic Programming 入门</title>
    <link href="https://soyanga.github.io/2019/06/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92Dynamic-Programming-%E5%85%A5%E9%97%A8/"/>
    <id>https://soyanga.github.io/2019/06/27/动态规划Dynamic-Programming-入门/</id>
    <published>2019-06-26T17:12:33.000Z</published>
    <updated>2019-06-26T17:14:58.218Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划 Dynamic Programming"></a>动态规划 Dynamic Programming</h1><ol><li><strong>递推（递归+记忆化）</strong></li><li><strong>状态定义: opt[n], dp[n] ,fib[n] 定义成数组</strong></li><li><strong>状态转移方程： opt[n] = best_of(opt[n-1], opt[n-2])</strong></li><li><strong>最优子结构</strong></li></ol><a id="more"></a><h1 id="DP-vs-回溯-vs-贪心"><a href="#DP-vs-回溯-vs-贪心" class="headerlink" title="DP vs 回溯 vs 贪心"></a>DP vs 回溯 vs 贪心</h1><ul><li><strong>回溯（递归） —— 存在重新计算</strong>  假如不存在最优子结构的化，回溯（递归）就是最佳解法</li><li><strong>贪心 —— 永远局部最优</strong></li><li><strong>DP —— 记录局部最优子结构/多种记录值</strong></li></ul><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><h3 id="递归-记忆化"><a href="#递归-记忆化" class="headerlink" title="递归+记忆化"></a>递归+记忆化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> memo[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> climb_Stairs(<span class="number">0</span>, n, memo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climb_Stairs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n, <span class="keyword">int</span> memo[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> memo[i];</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i] = climb_Stairs(i + <span class="number">1</span>, n, memo) + climb_Stairs(i + <span class="number">2</span>, n, memo);</span><br><span class="line">        <span class="keyword">return</span> memo[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 memo为记忆数组 i为走过的台阶数  n为要走的台阶数</p><p>时间复杂度时O(n) </p><p>空间复杂度O(n)</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>反向递推 </p><p>不难发现，这个问题可以被分解为一些包含<strong>最优子结构的子问题</strong>，即它的最优解可以从其子问题的最优解来有效地构建，我们可以使用动态规划来解决这一问题。</p><p>第 i 阶可以由以下两种方法得到：</p><p>在第（i−1) 阶后向上爬1阶。</p><p>在第 (i−2) 阶后向上爬 2 阶。</p><p>所以到达第 i 阶的方法总数就是到第 (i−1) 阶和第 (i−2) 阶的方法数之和。</p><p>令 dp[i] 表示能到达第 i 阶的方法总数：</p><p>dp[i]=dp[i-1]+dp[i-2]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度时O(n) </p><p>空间复杂度O(n)</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;动态规划-Dynamic-Programming&quot;&gt;&lt;a href=&quot;#动态规划-Dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;动态规划 Dynamic Programming&quot;&gt;&lt;/a&gt;动态规划 Dynamic Programming&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;递推（递归+记忆化）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态定义: opt[n], dp[n] ,fib[n] 定义成数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态转移方程： opt[n] = best_of(opt[n-1], opt[n-2])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最优子结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="动态规划 Dynamic Programming" scheme="https://soyanga.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode52 N Queens II</title>
    <link href="https://soyanga.github.io/2019/06/27/LeetCode52-N-Queens-II/"/>
    <id>https://soyanga.github.io/2019/06/27/LeetCode52-N-Queens-II/</id>
    <published>2019-06-26T17:11:43.000Z</published>
    <updated>2019-06-26T17:14:12.308Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Leetcode52-N-Queens-II"><a href="#Leetcode52-N-Queens-II" class="headerlink" title="Leetcode52 N Queens II"></a>Leetcode52 N Queens II</h1><ul><li><strong>位运算高效解决N皇后问题</strong></li><li><strong>DFS</strong></li><li><strong>剪枝</strong></li></ul><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><a id="more"></a><p>强力高效解法–位运算<br>通过二进制位将当前行中皇后可以去放的位置，然后一 一进行dfs</p><p><em>dfs的递归终止条件：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (row&gt;=n) &#123;  </span><br><span class="line">count++; </span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用cols pie na int型整数来分别表示列 撇 捺</li><li>(~(cols | pie | na)) 表示的时当前撇捺列中可以放以及不可以放皇后的位置</li><li>1表示可以放(空位）   0表示不可以放(对列撇捺的剪枝处理)</li></ul><blockquote><p><strong>将x最高位至第n位(含)清零     x&amp;( (1&lt;&lt;n)-1)</strong><br>添加过滤将无关位屏蔽掉 （(~(cols | pie | na))&amp;( (1&lt;&lt;n)-1)</p></blockquote><p>即：bits记录当前行所有的空位（(~(cols | pie | na))&amp;( (1&lt;&lt;n)-1)</p><ul><li>当bits大于0，则表示还有空位可以放入，则一直尝试将棋盘当前行能放的空位放满</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(bits&gt;0)&#123;</span><br><span class="line">p = bits&amp;(-bits);  //1.得到一个空位</span><br><span class="line">dfs(n, row+1, cols | p , (pie | p)&lt;&lt;1, na | p) &gt;&gt;1);//2.给下一行设置剪枝</span><br><span class="line">bits = bits &amp;(bits-1);//3.标记所站的空位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.x &amp; -x =&gt;得到最低位的1          即得到一个空位</strong><br><strong>2.row+1：切换至下一行<br>             cols | p ：下一行列不能放的位<br>            (pie | p)&lt;&lt;1：下一行撇不能放的位<br>            (na | p) &gt;&gt;1：下行捺不能放的位</strong><br><strong>3.x = x &amp; (x-1) =&gt; 清零最低为的1    即将当前所占的位标记位以占</strong></p><p>最后获取到的dfs外部变量count的总数</p><h4 id="52-N皇后-II"><a href="#52-N皇后-II" class="headerlink" title="52. N皇后 II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/" target="_blank" rel="noopener">52. N皇后 II</a></h4><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="img"></p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 n，返回 n 皇后不同的解决方案的数量。</p><p>示例:</p><p>输入: 4<br>输出: 2<br>解释: 4 皇后问题存在如下两个不同的解法。<br>[<br> [“.Q..”,  // 解法 1<br>  “…Q”,<br>  “Q…”,<br>  “..Q.”],</p><p> [“..Q.”,  // 解法 2<br>  “Q…”,<br>  “…Q”,<br>  “.Q..”]<br>]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/n-queens-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/n-queens-ii</a></p><h2 id="位运算解解（最优解）"><a href="#位运算解解（最优解）" class="headerlink" title="位运算解解（最优解）"></a>位运算解解（最优解）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//计算的总数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span> cols, <span class="keyword">int</span> pie, <span class="keyword">int</span> na)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= n) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bits = (~(cols | pie | na)) &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>); <span class="comment">//得到当前所有空位</span></span><br><span class="line">        <span class="keyword">while</span> (bits &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = bits &amp; (-bits); <span class="comment">//获取最低位的1 获取空位</span></span><br><span class="line">            dfs(n, row + <span class="number">1</span>, (cols | p), (pie | p) &lt;&lt; <span class="number">1</span>, (na | p) &gt;&gt; <span class="number">1</span>); <span class="comment">//下一行继续进行dfs</span></span><br><span class="line">            bits &amp;= (bits - <span class="number">1</span>); <span class="comment">//清除最低位的1 标记空位为已占位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;Leetcode52-N-Queens-II&quot;&gt;&lt;a href=&quot;#Leetcode52-N-Queens-II&quot; class=&quot;headerlink&quot; title=&quot;Leetcode52 N Queens II&quot;&gt;&lt;/a&gt;Leetcode52 N Queens II&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;位运算高效解决N皇后问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;剪枝&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="动态规划典型题" scheme="https://soyanga.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%B8%E5%9E%8B%E9%A2%98/"/>
    
      <category term="LeetCode题解" scheme="https://soyanga.github.io/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>算法-位运算简记</title>
    <link href="https://soyanga.github.io/2019/06/24/%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AE%80%E8%AE%B0/"/>
    <id>https://soyanga.github.io/2019/06/24/算法-位运算简记/</id>
    <published>2019-06-24T06:33:35.000Z</published>
    <updated>2019-06-24T06:35:31.001Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="位运算简记"><a href="#位运算简记" class="headerlink" title="位运算简记"></a>位运算简记</h1><h2 id="XOR-异或"><a href="#XOR-异或" class="headerlink" title="XOR-异或"></a>XOR-异或</h2><blockquote><p>异或：相同位0，不同为1.也可以用【不进位加法】来理解</p></blockquote><p>异或操作的一些特点：</p><ul><li>x ^  0 = x</li><li>x ^ 1s = ~x   // 1s  = ~0</li><li>x ^ (~x)= 1s</li><li>x ^ x = 0</li><li>a ^ b  = c   -&gt;  a ^ c = b,  b ^ c = a   //交换ab</li><li>a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c </li></ul><a id="more"></a><h2 id="实战常用的位运算操作"><a href="#实战常用的位运算操作" class="headerlink" title="实战常用的位运算操作"></a>实战常用的位运算操作</h2><ul><li>x &amp; 1 == 1 OR ==0 判断奇偶性  等价于 （ x%2 == 1）</li><li>x = x &amp; (x-1) =&gt; 清零最低为的1 一直到x = 0</li><li>x &amp; -x =&gt;得到最低位的1</li></ul><h2 id="更为复杂的位运算操作"><a href="#更为复杂的位运算操作" class="headerlink" title="更为复杂的位运算操作"></a>更为复杂的位运算操作</h2><table><thead><tr><th>操作</th><th>运算</th></tr></thead><tbody><tr><td>将x最右边的n位清零</td><td>x &amp; (~0 &lt;&lt; n)</td></tr><tr><td>获取x的第n位值（0或1)</td><td>(x &gt;&gt; n) &amp; 1</td></tr><tr><td>获取x的第n位的幂值</td><td>x &amp; (1 &lt;&lt; (n - 1))</td></tr><tr><td>仅将第n位置为1</td><td>x \</td><td>(1&lt;&lt;n)</td></tr><tr><td>仅将第n为置为0</td><td>x &amp; ( ~(1 &lt;&lt; n))</td></tr><tr><td>将x最高位至第n位(含)清零</td><td>x&amp;( (1&lt;&lt;n)-1)</td></tr><tr><td>将第n位至第0位(含)清零</td><td>x&amp;(~((1&lt;&lt;(n+1))-1))</td></tr></tbody></table><h2 id="位运算练习"><a href="#位运算练习" class="headerlink" title="位运算练习"></a>位运算练习</h2><ul><li><p><strong>颠倒二进制位</strong></p><p>颠倒给定的 32 位无符号整数的二进制位。</p></li></ul><p>  示例 1：</p><p>  输入: 00000010100101000001111010011100<br>  输出: 00111001011110000010100101000000<br>  解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，<br>        因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。<br>  示例 2：</p><p>  输入：11111111111111111111111111111101<br>  输出：10111111111111111111111111111111<br>  解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，<br>        因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。</p><p>  提示：</p><p>  请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。<br>  在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</p><p>  来源：力扣（LeetCode）<br>  链接：<a href="https://leetcode-cn.com/problems/reverse-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-bits</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = n &gt;&gt; i;</span><br><span class="line">            <span class="comment">//1.取出要反转的每一位二进制</span></span><br><span class="line">            temp &amp;= <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//2.将该二进制位放到反转后的位置</span></span><br><span class="line">            temp  &lt;&lt;= (<span class="number">31</span>-i);</span><br><span class="line">            <span class="comment">//3.将该位添加到结果上</span></span><br><span class="line">            result |= temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. 位1的个数</a></h4></li><li><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p></li></ul><p>  示例 1：</p><p>  输入：00000000000000000000000000001011<br>  输出：3<br>  解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。<br>  示例 2：</p><p>  输入：00000000000000000000000010000000<br>  输出：1<br>  解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 ‘1’。<br>  示例 3：</p><p>  输入：11111111111111111111111111111101<br>  输出：31<br>  解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p><p>  来源：力扣（LeetCode）<br>  链接：<a href="https://leetcode-cn.com/problems/number-of-1-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-1-bits</a></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            n &amp;=(n-<span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338. 比特位计数"></a><a href="https://leetcode-cn.com/problems/counting-bits/" target="_blank" rel="noopener">338. 比特位计数</a></h4><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><p>输入: 2<br>输出: [0,1,1]<br>示例 2:</p><p>输入: 5<br>输出: [0,1,1,2,1,2]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/counting-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/counting-bits</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++)&#123;</span><br><span class="line">            result[i] = result[i&gt;&gt;<span class="number">1</span>]+(i&amp;<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//result[i] = result[i&amp;(i-1)]+1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>方法1：i &amp; (i - 1)去掉i最右边的一个1；因i &amp; (i - 1）&lt; i，故result[i &amp; (i - 1)]已计算，所以i中1的个数为</p><p>result[i &amp; (i - 1)] + 1</p><p>方法2：i &gt;&gt; 1去掉i的最低位；因(i &gt;&gt; 1) &lt; i，故result[i &gt;&gt; 1]已计算，因此i中1的个数为i &gt;&gt; 1中1的个数加最后一位1的个数，即为result[i &gt;&gt; 1] + (i &amp; 1)</p></blockquote><ul><li><h4 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231. 2的幂"></a><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">231. 2的幂</a></h4><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><p>示例 1:</p><p>输入: 1<br>输出: true<br>解释: 20 = 1<br>示例 2:</p><p>输入: 16<br>输出: true<br>解释: 24 = 16<br>示例 3:</p><p>输入: 218<br>输出: false</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/power-of-two" target="_blank" rel="noopener">https://leetcode-cn.com/problems/power-of-two</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;(n&amp;(n-<span class="number">1</span>))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>1.<strong>一个数是2的n次方 ，该数的比特位中则一定是且仅有一个1</strong></p><p>则判断是否是2的幂则转变位判断x中1的个数</p><p>x!=0 x&amp;(x-1)  = &gt;count++  final count = 1;</p><p>2.mod</p><p>3.logx = int</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;位运算简记&quot;&gt;&lt;a href=&quot;#位运算简记&quot; class=&quot;headerlink&quot; title=&quot;位运算简记&quot;&gt;&lt;/a&gt;位运算简记&lt;/h1&gt;&lt;h2 id=&quot;XOR-异或&quot;&gt;&lt;a href=&quot;#XOR-异或&quot; class=&quot;headerlink&quot; title=&quot;XOR-异或&quot;&gt;&lt;/a&gt;XOR-异或&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;异或：相同位0，不同为1.也可以用【不进位加法】来理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;异或操作的一些特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x ^  0 = x&lt;/li&gt;
&lt;li&gt;x ^ 1s = ~x   // 1s  = ~0&lt;/li&gt;
&lt;li&gt;x ^ (~x)= 1s&lt;/li&gt;
&lt;li&gt;x ^ x = 0&lt;/li&gt;
&lt;li&gt;a ^ b  = c   -&amp;gt;  a ^ c = b,  b ^ c = a   //交换ab&lt;/li&gt;
&lt;li&gt;a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="位运算简记" scheme="https://soyanga.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AE%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递归复杂度求解</title>
    <link href="https://soyanga.github.io/2019/05/11/%E9%80%92%E5%BD%92%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B1%82%E8%A7%A3/"/>
    <id>https://soyanga.github.io/2019/05/11/递归复杂度求解/</id>
    <published>2019-05-11T15:37:15.000Z</published>
    <updated>2019-05-11T15:42:18.218Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="26-递归的时间复杂度的求解"><a href="#26-递归的时间复杂度的求解" class="headerlink" title="[26]递归的时间复杂度的求解"></a>[26]递归的时间复杂度的求解</h1><p>递归时间复杂度的求解分为2种常规求法和递归树法</p><a id="more"></a><h2 id="常规求法"><a href="#常规求法" class="headerlink" title="常规求法"></a>常规求法</h2><h3 id="写递归代码的三部"><a href="#写递归代码的三部" class="headerlink" title="写递归代码的三部"></a>写递归代码的三部</h3><ol><li>找出递推公式</li><li>知道递推的出口</li><li>将以上两步翻译成代码</li></ol><p>常规求法就是按照递推公式去求解—-比较麻烦，考验数学的时候到了！！:sweat:</p><h2 id="递归树求法"><a href="#递归树求法" class="headerlink" title="递归树求法"></a>递归树求法</h2><p>根据写出的递推公式，以及递归的出口，画出递归树，分析每个节点的时间复杂度<em>当前行的节点个数\</em>行数</p><p>如下图：</p><p><img src="/2019/05/11/递归复杂度求解/qq数据\321830735\FileRecv\MobileFile\1552895962676.jpg" alt="1552895962676"></p><p>递归的时候时间复杂度为O(n*m) n为每行消耗的时间复杂度，m为数的高度。</p><p>即O($nlog_n$)   每行消耗的时间复杂度为O(n),树的高度为$nog_n$ 。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;26-递归的时间复杂度的求解&quot;&gt;&lt;a href=&quot;#26-递归的时间复杂度的求解&quot; class=&quot;headerlink&quot; title=&quot;[26]递归的时间复杂度的求解&quot;&gt;&lt;/a&gt;[26]递归的时间复杂度的求解&lt;/h1&gt;&lt;p&gt;递归时间复杂度的求解分为2种常规求法和递归树法&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="递归事件复杂度求解" scheme="https://soyanga.github.io/tags/%E9%80%92%E5%BD%92%E4%BA%8B%E4%BB%B6%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://soyanga.github.io/2019/05/11/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://soyanga.github.io/2019/05/11/红黑树/</id>
    <published>2019-05-11T15:33:32.000Z</published>
    <updated>2019-05-11T15:35:14.146Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构"><a href="#25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构" class="headerlink" title="[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构"></a>[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构</h1><p>二叉树的插入，删除，查找操作，各个操作的事件复杂度跟树的高度成正比，理想情况下时间复杂度是O($log_n$) 。</p><p>不过二叉树查找树在频繁的动态更新过程中，可<strong>能会出现树的高度远大于$log_2n$ 情况，从而导致操作效率下降。极端情况下，二叉树会退化成为链表，时间复杂度会退化到O(n)。</strong>平衡二叉树的出现解决了这个问题。</p><p>平衡二叉树严格定义上讲：<strong>二叉树中任意一个节点的左右节点的树高度相差不能大于1</strong>.从这个定义上来看，完全二叉树，满二叉树都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。<br><a id="more"></a></p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552563697223.jpg" alt="1552563697223"></p><p>AVL数是严格按照上述所讲的定义的，即任何一个节点的左右子树的高度差不超过1，是一种高度平衡的二叉查找树。红黑树并没有严格按照上述定义</p><p>平衡二叉查找树种的”平衡”的意思就是让整棵看起来比较”对称”，比较”平衡”，不要出现左子树很高、右子树很矮就行。<strong>这个就能让整棵树的高度相对来说比较低一些，相应的插入、删除、查找等操作的效率高一些。</strong></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>如何定义一棵”红黑树”？</p><p>平衡二叉树其实很多，比如，SplayTree(伸展树)、Tree(树堆)等，</p><p><strong>红黑树的英文是”Red-Black-Tree”,简称R-B Tree。</strong>，红黑树中节点，一类被标记为黑色，一类被标记为红色，除此之外，一棵红黑树好需要满足如下要求：</p><ol><li>根节点是黑色的</li><li>每个叶子节点都是黑色的空节点（NULL),也就是说，叶子节点不存储数据； —为了简化代码实现</li><li>任何相邻的节点都不能同时为红色，也就是说，红色节点被黑色节点隔开的。</li><li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。</li></ol><p>如下图，红黑树。</p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552566548676.jpg" alt="1552566548676"></p><h2 id="红黑树的性能分析"><a href="#红黑树的性能分析" class="headerlink" title="红黑树的性能分析"></a>红黑树的性能分析</h2><p>为什么说红黑树“近似平衡”的？</p><p>平衡的意思就等价为性能不退化。“近似平衡”就等价为性能不会退化的太严重。红黑树的高度是否稳定地趋近$log_2n$就好了。</p><p>二叉树的性能由二叉树的高度来决定，我们分析以下红黑树的高度。</p><p>首先，我们来看，如果我们将红色节点从红黑树中去掉，那单纯包含黑色节点的红黑树的高度是多少呢？如下图：</p><p><img src="/2019/05/11/红黑树/qq数据\321830735\FileRecv\MobileFile\1552566521418.jpg" alt="1552566521418"></p><p>红色节点之后，有些节点就没有父节点了，它们会直接拿这些节点的祖父节点（父节点得到父节点）作为父节点。所以，之前的二叉树就变成了四叉树。</p><p>构成的四叉树是一颗完全二叉树，所以包含黑色节点的四叉树的高度，比包含向同节点个数的完全二叉树高度还要小。</p><p>即<strong>“黑色”四叉树的高度要低于完全二叉树，所以去掉红色节点的”黑树”的高度也不会超过$log_2n$。</strong></p><h2 id="我们把红色节点加回去的红黑树的树的高度是多少呢？"><a href="#我们把红色节点加回去的红黑树的树的高度是多少呢？" class="headerlink" title="我们把红色节点加回去的红黑树的树的高度是多少呢？"></a>我们把红色节点加回去的红黑树的树的高度是多少呢？</h2><p>由二叉树的<strong>第三条特性任何相邻节点不能是红色，则红色要被黑色隔开</strong>。<strong>红黑树中包含最多黑色节点的路径不会超过$log_2n$,所以加入红色节点之后，最长路径不会超过$2log_2n$，也就是说红黑树的高度近似为$2log_2n$。</strong></p><p><strong>所以红黑树的高度只是比高度平衡的AVL树的高度($log_2n$ )仅仅大了一倍，在性能上，下降的并不多。</strong>这样推导出来的节点不够精确，实际上红黑树的性能更好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Treap,Splay Tree，绝大情况下，他们的操作效率都很高，但是他们无法避免极端情况下的时间复杂度退化的情况，虽然出现概率不大，但是对于单次操作而言非常敏感的场景来说，他们并不适用。</p><p>AVL树是一种高度平衡的二叉树，所以查找的效率非常高，但是AVL树为维持这种高度平衡的树，就要付出更大的代价，每次插入之后，删除倒要调整，就比较复杂跟耗时。所以对于频繁的插入删除操作而言，使用AVL树的代价就比较高了。</p><p><strong>所以红黑树的插入删除，查找各种操作比较稳定，对于工程应用跟偏向使用这个能应对各种异常情况，为了支持工业级别的应用，我们更倾向于使用这种性能跟稳定为平衡二叉树。</strong></p><p>红黑树的实现对于初学者来说比较复杂，我们可以使用跳表代替。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构&quot;&gt;&lt;a href=&quot;#25-红黑树-上-：为什么工程中都使用到了红黑树这种二叉树结构&quot; class=&quot;headerlink&quot; title=&quot;[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构&quot;&gt;&lt;/a&gt;[25]红黑树(上)：为什么工程中都使用到了红黑树这种二叉树结构&lt;/h1&gt;&lt;p&gt;二叉树的插入，删除，查找操作，各个操作的事件复杂度跟树的高度成正比，理想情况下时间复杂度是O($log_n$) 。&lt;/p&gt;
&lt;p&gt;不过二叉树查找树在频繁的动态更新过程中，可&lt;strong&gt;能会出现树的高度远大于$log_2n$ 情况，从而导致操作效率下降。极端情况下，二叉树会退化成为链表，时间复杂度会退化到O(n)。&lt;/strong&gt;平衡二叉树的出现解决了这个问题。&lt;/p&gt;
&lt;p&gt;平衡二叉树严格定义上讲：&lt;strong&gt;二叉树中任意一个节点的左右节点的树高度相差不能大于1&lt;/strong&gt;.从这个定义上来看，完全二叉树，满二叉树都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="红黑树" scheme="https://soyanga.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基础(下)</title>
    <link href="https://soyanga.github.io/2019/05/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80(%E4%B8%8B)/"/>
    <id>https://soyanga.github.io/2019/05/03/二叉树基础(下)/</id>
    <published>2019-05-02T16:03:34.000Z</published>
    <updated>2019-05-02T16:04:26.810Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？"><a href="#24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？" class="headerlink" title="[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？"></a>[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？</h1><p>二叉树查找树特点：支持动态数据集合的快速插入和删除，查找操作。</p><h2 id="二叉查找树-Binary-Search-Tree"><a href="#二叉查找树-Binary-Search-Tree" class="headerlink" title="二叉查找树(Binary Search Tree)"></a>二叉查找树(Binary Search Tree)</h2><p>二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。为了快速查找而生的树。这些都依赖二叉树的特殊结构。二叉查找树的要求，<strong>在树中的任意一个节点，其左子树的每个节点的值，都小于这个节点的值，而右子树节点的值都大于这个节点的值。</strong></p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉搜索树图.jpg" alt="二叉搜索树图"></p><a id="more"></a><h3 id="内置节点代码"><a href="#内置节点代码" class="headerlink" title="内置节点代码"></a>内置节点代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node left;</span><br><span class="line">    <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftData = left.data;</span><br><span class="line">        <span class="keyword">int</span> rightData = right.data;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"data="</span> + data +</span><br><span class="line">                <span class="string">", left="</span> + leftData +</span><br><span class="line">                <span class="string">", right="</span> + rightData +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉查找树的查找操作"><a href="#二叉查找树的查找操作" class="headerlink" title="二叉查找树的查找操作"></a>二叉查找树的查找操作</h2><p>首先我们先取根节点，如果要查找的数据等于我们要查找的数据那么我们就先返回。  —类似于求取二叉树的高度</p><p>如果要查找的数据小于我们要查找的数据，我们就在左子树查找。</p><p>如果要查找的数据大于我们要查找的数据，我们就在右子树查找</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树查找操作.jpg" alt="二叉树查找操作"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">find</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node p = tree;  <span class="comment">//跟节点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &gt; p.data)&#123;</span><br><span class="line">            p = p.left;   <span class="comment">//查找树小遍历左子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data &lt; p.data)&#123;</span><br><span class="line">            p = p.right;  <span class="comment">//查找树大遍历右子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//没有找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的查找树插入操作"><a href="#二叉树的查找树插入操作" class="headerlink" title="二叉树的查找树插入操作"></a>二叉树的查找树插入操作</h2><p>根查找差不多，跟查找类似，但是加了一个条件就是要插入的节点是叶子节点</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉搜索树的插入.jpg" alt="二叉搜索树的插入"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">if</span>(tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tree = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node p  = tree;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data &gt; p.data) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                p.right = <span class="keyword">new</span> Node(data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; p.data) &#123;  <span class="comment">//data &lt; p.data</span></span><br><span class="line">            <span class="keyword">if</span>(p.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                p.left = <span class="keyword">new</span> Node(data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树查找树删除操作"><a href="#二叉树查找树删除操作" class="headerlink" title="二叉树查找树删除操作"></a>二叉树查找树删除操作</h2><p>删除操作分为3种情况。</p><p>第一种情况是，如果要删除的节点没有子节点，我们只需要直接将父节点中，将要删除节点指针为null。比如图中的删除节点55。</p><p>第二种情况是，如果要删除的节点只有一个子节点（只有左子节或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的字节点就可以了。比如图中的删除节点13。</p><p>第三种情况是，如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小的节点，把它替换到删除的节点上，然后再删除这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了），所以，我们可以应用上面两条规则来删除这个最小节点了。我们可以将最小节点互换，然后删除叶子节点。比如图中的删除节点18。</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树删除图.jpg" alt="二叉树删除图"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    Node p = tree; <span class="comment">//p指向要删除的节点，初始化指向根节点</span></span><br><span class="line">    Node pp = <span class="keyword">null</span>; <span class="comment">//pp记录的是p的父节点</span></span><br><span class="line">    <span class="comment">//查找要删除的节点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.data != data) &#123;</span><br><span class="line">        pp = p;</span><br><span class="line">        <span class="keyword">if</span> (data &gt; p.data) &#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;       <span class="comment">//没有找到 要删除的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要删除的节点有两个子节点</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123; <span class="comment">//查找右子树中最小节点</span></span><br><span class="line">        Node minp = p.right;</span><br><span class="line">        Node minpp = p;  <span class="comment">//minpp表示minp的父节点</span></span><br><span class="line">        <span class="keyword">while</span> (minp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            minpp = minp;</span><br><span class="line">            minp = minp.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到要删除节点的右子树的最小值，即右子树的最端左孩子</span></span><br><span class="line">        p.data = minp.data; <span class="comment">//将要删除的节点的值更因为最左端的值</span></span><br><span class="line">        p = minp; <span class="comment">//将要删除的节点变为最左端节点</span></span><br><span class="line">        pp = minpp; <span class="comment">//更新要删除的节点的父节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将删除操作(叶子节点) 或者要删除的节点只有一个子节点</span></span><br><span class="line">    Node child; <span class="comment">//p 的子节点</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        child = p.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        child = p.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        child = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tree = child;   <span class="comment">//要删除的节点没有父节点，则要删除的是根节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p) &#123;</span><br><span class="line">        pp.left = child;   <span class="comment">//要删除的节点只有左子树</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pp.right = child; <span class="comment">//要删除的节点只有右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉查找树的其他操作"><a href="#二叉查找树的其他操作" class="headerlink" title="二叉查找树的其他操作"></a>二叉查找树的其他操作</h2><h3 id="寻找最大，最小节点"><a href="#寻找最大，最小节点" class="headerlink" title="寻找最大，最小节点"></a>寻找最大，最小节点</h3><p>最小节点：在最左端</p><p>最大节点：在最右端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">findMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p = tree;</span><br><span class="line">    <span class="keyword">while</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">findMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node p = tree;</span><br><span class="line">    <span class="keyword">while</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树时间复杂度分析"><a href="#二叉树时间复杂度分析" class="headerlink" title="二叉树时间复杂度分析"></a>二叉树时间复杂度分析</h2><p>二叉查找，插入，删除，查找操作的时间复杂度。</p><p>实际上，二叉查找树的各种操作根构造树的形态，图一第一种二叉查找树，根节点的左右子树极度不平衡，已经退化成了链表，所以查找的时间复杂度就变成了O(n)。</p><p><img src="/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉树搜索树的弊端.jpg" alt="二叉树搜索树的弊端"></p><p>我们刚其实分析了一种最糟糕的情况，我们现在来分析一个最理想的情况，二叉查找树是一棵完全二叉树（或满二叉树)。这个时候，插入，删除，查找的<strong>时间复杂度都跟树的高度成正比</strong>，也就是O(height)。</p><p>满二叉树的高度等于$log_2(n+1)$ 完全二叉树的高度在[$log_2(n+1)$,$log_2n+1$]近似为完全二叉树的高度小于等于$log_2n$ 。</p><p>显然极度不平衡的二叉查找树，他的查找性能肯定不能满足我们的需求，我们需要构建一种不管怎么删除，插入数据的时候都能保持任意节点左右子树都比较平衡的二叉查找树，这就是我们下一节课要详细讲的，一种特殊的二叉查找树，平衡二叉查找树。平衡二叉查找树的高度接近$log_n$,所以插入删除，查找操作的时间复杂度也比较稳定，是O($log_n$)。</p><h2 id="散列表和二叉树辨析"><a href="#散列表和二叉树辨析" class="headerlink" title="散列表和二叉树辨析"></a>散列表和二叉树辨析</h2><p>散列表的插入，删除，查找操作的时间复杂度可以做到常量级的O(1)非常高效相比于二叉树而言，二叉树显得很没有优势。</p><p>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序，而对二叉搜索树而言，中序遍历的结果就是，O(n)的时间复杂度内，输出有序数据序列。</p><p>第二，散列表扩容耗时很多，而且当遇到散列冲突的时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，平衡二叉查找树非常稳定，时间复杂度在$Olog_n$。</p><p>第三笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但是当哈希从冲突严中的时候，常量级时间复杂度不一定比$Olog_n$小，所以时间查找速度可能不一定比$Olog_n$块，加上哈希函数耗时，也不一定就比平衡二叉查找树的效率高。</p><p>第四，散列表给设计复杂，平衡二叉树只需要考虑平衡性的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？&quot;&gt;&lt;a href=&quot;#24-二叉树基础-下-有了如此高效的散列表，为什么还需要二叉树？&quot; class=&quot;headerlink&quot; title=&quot;[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？&quot;&gt;&lt;/a&gt;[24]二叉树基础(下):有了如此高效的散列表，为什么还需要二叉树？&lt;/h1&gt;&lt;p&gt;二叉树查找树特点：支持动态数据集合的快速插入和删除，查找操作。&lt;/p&gt;
&lt;h2 id=&quot;二叉查找树-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#二叉查找树-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树(Binary Search Tree)&quot;&gt;&lt;/a&gt;二叉查找树(Binary Search Tree)&lt;/h2&gt;&lt;p&gt;二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。为了快速查找而生的树。这些都依赖二叉树的特殊结构。二叉查找树的要求，&lt;strong&gt;在树中的任意一个节点，其左子树的每个节点的值，都小于这个节点的值，而右子树节点的值都大于这个节点的值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/03/二叉树基础(下)/婕\数据结构与算法之美\picture\二叉搜索树图.jpg&quot; alt=&quot;二叉搜索树图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="数据结构与算法之美" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="二叉树" scheme="https://soyanga.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-动态SQL映射</title>
    <link href="https://soyanga.github.io/2019/04/21/Mybatis-%E5%8A%A8%E6%80%81SQL%E6%98%A0%E5%B0%84/"/>
    <id>https://soyanga.github.io/2019/04/21/Mybatis-动态SQL映射/</id>
    <published>2019-04-21T12:13:20.000Z</published>
    <updated>2019-04-21T12:17:37.971Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis动态SQL映射"><a href="#Mybatis动态SQL映射" class="headerlink" title="Mybatis动态SQL映射"></a>Mybatis动态SQL映射</h1><blockquote><p>重点：</p><ul><li>理解Mybatis的动态SQL映射原理</li><li>掌握Mybatis的动态SQL映射编写</li></ul></blockquote><a id="more"></a><h2 id="1-动态SQL简介"><a href="#1-动态SQL简介" class="headerlink" title="1.动态SQL简介"></a>1.动态SQL简介</h2><p>MyBatis的强大特性之一就是他的动态SQL。JDBC中根据不同条件拼接SQL语句繁琐。利用动态SQL就可以摆脱这种痛苦。</p><p>通常动态SQL不可能是独立的一部分，MyBatis当然使用一种强大的动态SQL语言来改进这种情形，这种语言可以被用在任意SQL映射语句中。</p><p>动态SQL元素和使用JSTL(JSP标准标签库)或其他类似基于XML的文本处理器相似。在MyBatis之前版本中，需要了解很多元素，现在MyBatis3大大提升了元素，用不到原先一半元素就可以了。MyBatis采用功能强大的基于<strong>OGNL</strong>（Object Graphic Navigation Language 对象图导航语言） 的表达式来消除其他元素。</p><p>动态SQL映射使用标记：</p><ul><li>if</li><li>choose(when,otherwise)</li><li>trim(where,set)</li><li>foreach</li></ul><h2 id="2-动态SQl标记"><a href="#2-动态SQl标记" class="headerlink" title="2.动态SQl标记"></a>2.动态SQl标记</h2><h3 id="2-1if"><a href="#2-1if" class="headerlink" title="2.1if"></a>2.1if</h3><p>动态SQL通常要做的事情是有条件地包含where子句地一部分。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndJob"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    where deptno=20</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and jon != '' "</span> &gt;</span></span><br><span class="line">         and job like #&#123;job&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多重if判断  and</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">     select</span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">     from emp</span><br><span class="line">     where deptno=20</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">         and job like #&#123;job&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">         and ename like #&#123;ename&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2where"><a href="#2-2where" class="headerlink" title="2.2where"></a>2.2where</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">      select</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">      from emp</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">                deptno = #&#123;deptno&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">             and ename like #&#123;ename&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3choose-when-otherwise"><a href="#2-3choose-when-otherwise" class="headerlink" title="2.3choose,when,otherwise"></a>2.3choose,when,otherwise</h3><p>有些时候，我们不想用条件语句，而只是想从中择出一点。针对这种情况，MyBatis提供了choose元素，它有点像Java中的switch语句</p><p>还是如上的例子，但是这次变为提供了“job”就按“job”查找，提供了”ename”就按“ename”查找，若两者都没有，就按业务情况返回所有deptno = 20的且ename是</p><p><code>JACK</code>的职务表信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--choose when otherwise 相当于SwitchCase case default--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithDeptnoAndLikeJobOrEname"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        deptno=20</span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"job!=null"</span>&gt;</span></span><br><span class="line">                and job = #&#123;job&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                and ename = #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3trim-where-set"><a href="#2-3trim-where-set" class="headerlink" title="2.3trim,where,set"></a>2.3trim,where,set</h3><p>前面几个例子已经合宜的解决了经典的动态SQL问题，现在考虑回到if示例，这次我们将<code>deptno= 20</code>也设置为动态的条件或者去掉看看会发生什么。</p><p>会在解析SQL语句时出现SQL语句异常，所以我们此时需要<code>where</code>来解决此问题，它会将where中包括的语句适当的增加删除某些多余的SQL命令，使得达到开发者预期的情况，比如去掉多余的 and，当没有符合条件时，where语句不执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">            deptno = #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            and ename like #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>where元素直到只有在一个以上if条件有值时才会添加where子句，而且，若最后内容是“AND”或者“OR”开头的，where元素也知道如何将他们去除。</p><p>如果where元素不正常处理，我们还可以通过trim元素来定制我们想要的功能。比如，和where元素等价的自定义trim元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。其功能就是在所有prefixOverrides 属性指定的内容将被移除，并且插入prefix属性中指定的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottEmpWhithdeptnoAndLikeJobAndLikeEname2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">    from emp</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;where&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="deptno!=null"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--deptno = #&#123;deptno&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="job!=null and job!= '' "&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--and job like #&#123;job&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;if test="ename!=null"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--and ename like #&#123;ename&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/where&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将where后的语句中所偶有以and 或者 or结尾或开头的标签都去掉--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and | or"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptno!=null"</span>&gt;</span></span><br><span class="line">            deptno = #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"job!=null and job!= '' "</span>&gt;</span></span><br><span class="line">            and job like #&#123;job&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            and ename like #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似用于动态更新的解决方案叫做set，set元素可以被用于动态包含需要<strong>更新</strong>的列，而且舍去其他的。比如：舍去以，结尾的，并且当set元素不为空的元素中个数大于1时，在开头添加set </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateScottEmpByObjectWithSet"</span> <span class="attr">parameterType</span>=<span class="string">"com.soyanga.mybatis.entity.ScottEmp"</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        <span class="comment">&lt;!--&lt;trim prefix="set" suffixOverrides=","&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;if test="hiredate!=null"&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--hiredate = #&#123;hiredate&#125;,--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;if test="ename!=null"&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--ename = #&#123;ename&#125;,--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;/if&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/trim&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"hiredate!=null"</span>&gt;</span></span><br><span class="line">                hiredate = #&#123;hiredate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                ename = #&#123;ename&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4foreach"><a href="#2-4foreach" class="headerlink" title="2.4foreach"></a>2.4foreach</h3><p>动态SQL的另外一个常用的必要操作是需要对一个集合进行遍历，通常子构建 IN 条件语句的时候。比如：</p><p>参数类型为：list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByList(List deptnos);</span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByList"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            deptno in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByList() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> deptnolist = new ArrayList<span class="tag">&lt;<span class="name">Integer</span>&gt;</span>();</span><br><span class="line">        deptnolist.add(10);</span><br><span class="line">//        deptnolist.add(20);</span><br><span class="line">//        deptnolist.add(30);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByList(deptnolist);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数类型为 ：array</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByArray(Integer[] deptnos);</span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByArray"</span> <span class="attr">parameterType</span>=<span class="string">"integer[]"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            deptno in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                #&#123;item&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByArray() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByArray(new Integer[]&#123;10&#125;);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数类型为Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--映射接口--&gt;</span></span><br><span class="line">    List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> queryScottempByMap(Map deptnoMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--命令配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScottempByMap"</span> <span class="attr">resultMap</span>=<span class="string">"scottEmpMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"emp_column"</span>/&gt;</span></span><br><span class="line">        from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                ename like #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptnos!=null"</span>&gt;</span></span><br><span class="line">                and deptno in</span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"deptnos"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                    #&#123;item&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试代码--&gt;</span></span><br><span class="line">    //TDD 测试驱动开发</span><br><span class="line">    @Test</span><br><span class="line">    public void test_queryScottempByMap() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span><br><span class="line">        ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">        Map map = new HashMap();</span><br><span class="line">        map.put("ename", "%J%");</span><br><span class="line">        map.put("deptnos", new Integer[]&#123;10,20,30&#125;);</span><br><span class="line">        List<span class="tag">&lt;<span class="name">ScottEmp</span>&gt;</span> scottEmpList = scottEmpMapper.queryScottempByMap(map);</span><br><span class="line">        logger.info("queryScottEmpWhithDeptnoAndLikeJobOrEname  Result &#123;&#125;", scottEmpList);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>foreach元素的功能非常强大，它允许你指定一个集合，声明可以用在元素体内的集合项和索引变量。它也允许你指定开辟匹配的字符串以及在迭代中间放置分隔符。这个元素是很智能的，因此他不会偶然地附加多余地分隔符。</p><blockquote><p>注意：你可以将任何可迭代对象（如列表，集合等)和任何的字典或者数组对象传递给foreach作为集合参数。当使用可迭代对象或者数组时，index是当前迭代的次数。item的值便是本次迭代获取的元素。当使用字典（或者Map.Entry对象的集合时），index是键，item是值。</p><p>collection 迭代输出 List时为list ,迭代输出数组时为array,迭代输出当使用字典（或者Map.Entry),为其中的存储的集合名称</p><p>open 拼接SQL左边   item    close 拼接SQL右边  separator=“,” ：分隔符为”，“</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"deptnos"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                    #&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h2><h3 id="3-1分页插件"><a href="#3-1分页插件" class="headerlink" title="3.1分页插件"></a>3.1分页插件</h3><p>在进行数据库应用程序开发的时候，经常会使用到各种各样的分页，这里又开源社区提供了一个分页插件([PageHelper][<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md]),能够制成任何复杂的表单，多表查询。" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md]),能够制成任何复杂的表单，多表查询。</a></p><p>[使用方法][<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md]" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md]</a> ：中文的插件</p><ul><li><p>添加分页插件依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Mybatis分页插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器插件</p><p>在MyBatis的配置文件中添加拦截器插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置PageHelper分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种，RowBounds方式的调用</span></span><br><span class="line">List&lt;Country&gt; list = sqlSession.selectList(<span class="string">"x.y.selectIf"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种，Mapper接口方式的调用，推荐这种使用方式。</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种，Mapper接口方式的调用，推荐这种使用方式。</span></span><br><span class="line">PageHelper.offsetPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectIf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种，参数方法调用</span></span><br><span class="line"><span class="comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Country&gt; <span class="title">selectByPageNumSize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Param(<span class="string">"user"</span>)</span> User user,</span></span><br><span class="line"><span class="function">            @<span class="title">Param</span><span class="params">(<span class="string">"pageNum"</span>)</span> <span class="keyword">int</span> pageNum, </span></span><br><span class="line"><span class="function">            @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> <span class="keyword">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置supportMethodsArguments=true</span></span><br><span class="line"><span class="comment">//在代码中直接调用：</span></span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectByPageNumSize(user, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五种，参数对象</span></span><br><span class="line"><span class="comment">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span></span><br><span class="line"><span class="comment">//有如下 User 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//其他fields</span></span><br><span class="line">    <span class="comment">//下面两个参数名和 params 配置的名字一致</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Country&gt; <span class="title">selectByPageNumSize</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span></span><br><span class="line">List&lt;Country&gt; list = countryMapper.selectByPageNumSize(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第六种，ISelect 接口方式</span></span><br><span class="line"><span class="comment">//jdk6,7用法，创建接口</span></span><br><span class="line">Page&lt;Country&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPage(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectGroupBy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//jdk8 lambda用法</span></span><br><span class="line">Page&lt;Country&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPage(()-&gt; countryMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接返回PageInfo，注意doSelectPageInfo方法和doSelectPage</span></span><br><span class="line">pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPageInfo(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectGroupBy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对应的lambda用法</span></span><br><span class="line">pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPageInfo(() -&gt; countryMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="comment">//count查询，返回一个查询语句的count数</span></span><br><span class="line"><span class="keyword">long</span> total = PageHelper.count(<span class="keyword">new</span> ISelect() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        countryMapper.selectLike(country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">total = PageHelper.count(()-&gt;countryMapper.selectLike(country));</span><br></pre></td></tr></table></figure></li></ul><p>XML中的一些特殊字符的转译符</p><p><img src="/2019/04/21/Mybatis-动态SQL映射/Users\32183\AppData\Roaming\Typora\typora-user-images\1554724202872.png" alt="1554724202872"></p><p>练习：</p><blockquote><p><img src="/2019/04/21/Mybatis-动态SQL映射/Users\32183\AppData\Roaming\Typora\typora-user-images\1554725010278.png" alt="1554725010278"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;Mybatis动态SQL映射&quot;&gt;&lt;a href=&quot;#Mybatis动态SQL映射&quot; class=&quot;headerlink&quot; title=&quot;Mybatis动态SQL映射&quot;&gt;&lt;/a&gt;Mybatis动态SQL映射&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;重点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解Mybatis的动态SQL映射原理&lt;/li&gt;
&lt;li&gt;掌握Mybatis的动态SQL映射编写&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaEE" scheme="https://soyanga.github.io/categories/JavaEE/"/>
    
    
      <category term="Mybatis" scheme="https://soyanga.github.io/tags/Mybatis/"/>
    
      <category term="JavaEE" scheme="https://soyanga.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Mapper映射</title>
    <link href="https://soyanga.github.io/2019/04/15/Mybatis-Mapper%E6%98%A0%E5%B0%84/"/>
    <id>https://soyanga.github.io/2019/04/15/Mybatis-Mapper映射/</id>
    <published>2019-04-15T15:41:11.000Z</published>
    <updated>2019-04-15T15:41:59.624Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Mybatis的Mapper映射"><a href="#Mybatis的Mapper映射" class="headerlink" title="Mybatis的Mapper映射"></a>Mybatis的Mapper映射</h1><blockquote><p>重点</p><ol><li>掌握Mybatis的基本SQL映射</li><li>掌握Mybatis中CRUD的SQL编写</li></ol></blockquote><h2 id="1-Mapper映射概念"><a href="#1-Mapper映射概念" class="headerlink" title="1 Mapper映射概念"></a>1 Mapper映射概念</h2><p>Mapper XML文件MyBatis的真正强大在于它的映射语句，也是解决<strong>JDBC</strong>大量重复代码</p><a id="more"></a><h2 id="2-Mapper文件结构"><a href="#2-Mapper文件结构" class="headerlink" title="2 Mapper文件结构"></a>2 Mapper文件结构</h2><p>SQL映射文件有很少得到几个顶级元素（按照他们应该被定义的顺序）：</p><ul><li><p>cache-给定命名空间的缓存配置</p></li><li><p>cache-ref-其他命名空间缓存配置的引用</p></li><li><p>resultMap-最复杂也是最强的元素，用来描述如何从数据库结果集中映射</p><ul><li>java对象中的属性名   数据库列名称 跟 jdbcType属性类型 javaType类型 一一对应起来</li><li>id对应数据库的主键 </li></ul></li><li><p>sql-可以被其他语句引用的可重用语句块</p><ul><li>简化查询 可重用的语句块 </li></ul></li><li><p>insert-映射插入语句</p></li><li><p>update-映射更新语句</p></li><li><p>delete-映射删除语句</p></li><li><p>select-映射查询语句</p><p>增删改查中的id对象Mapper接口中的方法名</p></li></ul><p>参考一个完整的Mapper示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.soyanga.mybatis.mapper.ScottGroupMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ScottGroup"</span> <span class="attr">type</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"deptno"</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"dname"</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"loc"</span> <span class="attr">column</span>=<span class="string">"loc"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;select deptno="selectScottGroup" resultMap="scottGroup"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select deptno,dname,loc from scott--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--where deptno = #&#123;deptno&#125;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/select&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--SQL片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"basic_column"</span>&gt;</span></span><br><span class="line">        id,dname,loc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertScottGroup"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"deptno"</span> <span class="attr">keyColumn</span>=<span class="string">"deptno"</span>&gt;</span></span><br><span class="line">        insert into dept (deptno,loc)</span><br><span class="line">                values (#&#123;deptno&#125;,#&#123;loc&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--修改更新信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateScottInfo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteScottInfoById"</span>&gt;</span></span><br><span class="line">        delete from dept</span><br><span class="line">        where  id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultMap</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"basic_column"</span>/&gt;</span> </span><br><span class="line">        from dept where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>插入操作中的Tips:</p><p>插入信息中 useGeneratedKeys = “true”主键自增长 </p><p>keyProperty=”deptno” ：对应映射对象的属性名</p><p>keyColumn=”deptno”     对应表中主键名称</p><p>查询操作中的Tips：</p><p>id = mapper接口中得对应的查询方法，resultMap 对应的查询后的结果的类型 一般返回的都是java对应得数据库的对象的List集合</p></blockquote><h2 id="3-select命令"><a href="#3-select命令" class="headerlink" title="3 select命令"></a>3 select命令</h2><p>查询语句是MyBatis最常用的元素章之一。通常查询比修改频繁。查询方式多种</p><p>简单查询如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">paramterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">select* form person where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个语句被称作selectPerson,接收一个int(或者Integer)类型的参数，并通过HashMap类型的对象，其中键是列名，值便是结果型中的对应值。参数符#{id}MyBatis创建一个预处理的语句参数，通过JDBC这样的一个参数在SQL中会由，并被传递到一个新的预处理语句中，这跟JBC中的SQL语句中的？类作业类似。</p><h2 id="4-Insert-Update-Delete"><a href="#4-Insert-Update-Delete" class="headerlink" title="4.Insert Update Delete"></a>4.Insert Update Delete</h2><p>Insert Update Delete都属于数据变更语句，他们的基本实现类似</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag"><span class="attr">parametrType</span>=<span class="string">"domain.bolg.Author"</span></span></span><br><span class="line"><span class="tag"><span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">parametrType</span>=<span class="string">"domain.bolg.Author"</span></span></span><br><span class="line"><span class="tag"><span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br></pre></td></tr></table></figure><p>MyBatis插入时自动生成主键有两种方式</p><ul><li>数据库自动生成主键</li><li>通过SQL语句生成主键，然后使用到主键字段</li></ul><p><strong>在实际开发的项目中，主键字段通常会有一定的规则，所以该两种方式实际上，仅仅体现MyBatis的扩展能力。</strong></p><h2 id="5-sql（复用SQL语句）"><a href="#5-sql（复用SQL语句）" class="headerlink" title="5 sql（复用SQL语句）"></a>5 sql（复用SQL语句）</h2><p>sql标签可以被用来定义可重用SQL代码片段，可以包含在其他语句中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span>$&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.pssword&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"basic_column"</span>&gt;</span>        id,group_id,title,content,is_prptected,background,remind_time,create_time,modify_time</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL片段可以被包含在SQL语句中，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from som_table t1 cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span> <span class="attr">resultMap</span>=<span class="string">"ScottGroup"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"basic_column"</span>/&gt;</span> </span><br><span class="line">        from dept where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-parameter-参数"><a href="#6-parameter-参数" class="headerlink" title="6 parameter(参数)"></a>6 parameter(参数)</h2><p>Mybatis的参数类型通常有两种类型：一种时基本类型，一种是引用类型。</p><h3 id="6-1基本类型"><a href="#6-1基本类型" class="headerlink" title="6.1基本类型"></a>6.1基本类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span>&gt;</span></span><br><span class="line">    select id,username,password</span><br><span class="line">    form users</span><br><span class="line">    where id = #&#123;id&#125;   参数类型为基本类型</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2引用类型"><a href="#6-2引用类型" class="headerlink" title="6.2引用类型"></a>6.2引用类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">insert into users (id,username,password) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)  </span><br><span class="line">    写的是这个对象的属性名（id,username,password）</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面User类型的参数对象传递到语句中，id,username 和password属性中然后将他们的值传入预处理语句的参数中，这点相对于语句中传参是比较好的</p><p>且User的这些属性必须要有geter setter方法。</p><h3 id="6-3字符串"><a href="#6-3字符串" class="headerlink" title="6.3字符串"></a>6.3字符串</h3><p>默认情况下，使用#{}格式的语法会导致Mybatis创建PerparedStatement参数设置参数（就像使用？）。这样做更安全，更迅速，通常也是首选做法，不会</p><p>出一些错误，想在直接在SQL语句中插入一个不转义的字符串。比如，想ORDER BY,你可以直接用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><p>这里MyBatis会修改或转义字符串。需要额外注意的是:用这种方式接受用的将其用于语句中的参数是不安全的，会导致潜在SQL注入攻击，因此不要使用这些字段，要么自行转译并检验。</p><h2 id="7-resultMap-查询结果映射"><a href="#7-resultMap-查询结果映射" class="headerlink" title="7.resultMap(查询结果映射)"></a>7.resultMap(查询结果映射)</h2><p>resultMap元素是MyBatis种最强大的元素，可以节省%90的JDBC代码量，并在一情形下允许你做一些JDBC不支持的事情。对复杂语句进行联合映射的时候，它很可能代替数千行的同等功能的代码，简化代码量的设计思想是，简单的原句不需要明确的结果映射，而复杂的语句只需要建立联系即可。</p><p>简单的映射，未指定明确的resultmap比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">select id,username,hashedPassword</span><br><span class="line">    form some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述语句只是简单的将所有的列映射到HashMap的建上，这由resultType的参数指定，然而在大部分情况下都够用，但是HashMap不是一个很好的领域模型。你的使用JavaBean或POJO(Plain Old Java Objects,普通Java对象)作为领域模型对两者都支持。</p><p>Bean映射，指定resultmap比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定user Bean</span></span><br><span class="line"><span class="keyword">package</span> com.soyanga.mode1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String hashedPassword;</span><br><span class="line">    <span class="comment">//省略getter setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于JavaBean的规范，上面这个类有3个属性：id,username和hashedPassword属性会对应到select语句中列名。这个的一个JavaBean可以被映射到Result映射到HashMap一样简单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.soyanga.mode1.User"</span>&gt;</span></span><br><span class="line">select id,username,hashedPassword</span><br><span class="line">    form som_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样情况下，MyaBatis会在幕后自动创建一个ResultMap,再基于属性名称映射在javaBean的属性上。如果，列名和属性名没有精确匹配<strong>，可以再select语句中的sql的as来起一个别名（sql中起别名–-SQL特性）来匹配标签</strong>。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.soyanga.mode1.User"</span>&gt;</span></span><br><span class="line">select </span><br><span class="line">    user_id  as"id"</span><br><span class="line">    user_name as "userName",</span><br><span class="line">    hashed_password as"hashedPassword"</span><br><span class="line">    form some_table</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ResultMap方式 极大的简化繁琐的配置，resultMap和resultType只能二选一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserResultMap"</span> <span class="attr">type</span>=<span class="string">"com.soynga.model.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"hashedPassword"</span> <span class="attr">column</span>=<span class="string">"hashed_password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-cache-缓存"><a href="#8-cache-缓存" class="headerlink" title="8.cache(缓存)"></a>8.cache(缓存)</h2><h3 id="8-1一级缓存"><a href="#8-1一级缓存" class="headerlink" title="8.1一级缓存"></a>8.1一级缓存</h3><p>MyBatis默认开启了一级缓存，一级缓存是SqlSession层面进行缓存的。即同一个SqlSession，多次调用同一个Mapper和同一个方法的同一参数，只会进行一次数据库查询，然后把数据缓存到缓冲中，以后直接先从缓存中取出数据，不会直接去查数据库</p><p>默认<strong>开启一级缓存</strong>是在Mybatis的配置文件的settings元素中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapper映射的二级缓存默认开启，需要mapper文件设置，以及实体类的支持序列化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span> = <span class="string">"cachaeEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--session级别的一级缓存默认开启--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2二级缓存"><a href="#8-2二级缓存" class="headerlink" title="8.2二级缓存"></a>8.2二级缓存</h3><p>默认情况下Mapper中是没有开启缓存的，除了局部的session缓存，可以增强变现而且处理循环依赖也是必须的，要开启二级缓存，需要在你SQL映射文件中添加一行： 实体类需要实现<strong>Serializable接口支持序列化</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>从cache字面上看就是这样。这个简单语句的效果如下：</p><ul><li><p>映射语句文件中的所有<strong>select语句</strong>将会被缓存</p></li><li><p>映射语句文件中的所有<strong>insert,update和delete语句</strong>会刷新缓存</p></li><li><p>缓存会使用<strong>Least Recently Used</strong>（<strong>LRU,最近最少使用的</strong>）算法来收回</p></li><li><p>根据时间表(比如 <strong>NO Flush interval,没有刷新间隔</strong>)，缓存不会以任何时间顺序来刷新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span>&gt;</span>  //单位是ms</span><br></pre></td></tr></table></figure></li><li><p>缓存会存储<strong>列表集合或对象</strong>(无论查询方式返回什么)的<strong>1024个引用</strong></p></li><li><p>缓存会被视为是<strong>read/write(可读/可写)的缓存</strong>，意味着对象检索不是共享的，而且可以安全地被调用者修改，而不是干扰其他调用者或线程所做的潜在修改。（<strong>两个策略</strong>）</p></li></ul><p><strong>缓存命中率：</strong>Cache Hit Ratio(缓存命中)  关心缓存命中率</p><h3 id="8-3缓存属性"><a href="#8-3缓存属性" class="headerlink" title="8.3缓存属性"></a>8.3缓存属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">redOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>配置了一个FIFO回收策略的缓存。每隔60秒刷新，存储结果对象或列表的512隔引用，而且返回的对象被认为是只读的，因此在不同线程中的调用者之间修改他们会导致冲突。</p><p>eviction（回收策略）：</p><ul><li>LRU  -（默认值）最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO - （先进先出） ：按对象进入缓存的顺序来移除它们。</li><li>SOFT -（软引用）：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK - （弱引用）：更积极地移除基于垃圾回收器状态和弱引用规则地对象。</li></ul><p>flushInerval(刷新间隔)：</p><ul><li>可以被设置为任意正整数，而且他们代表一个合理的毫秒形式的时间段</li><li>默认情况是不设置，也就是没有刷新间隔的，缓存仅仅调用语句时刷新</li></ul><p>size（引用数目）</p><ul><li>可以被设置为任意正整数，要记住你缓存的对象数目和运行环境的可用内存资源数目。</li><li>默认值是1024。</li></ul><p>readOnly（只读）</p><ul><li>可以设置为 true 或 false</li><li>只读缓存会给调用者返回缓存对象的相同实例，<strong>因此这些对象不能被修改，者提供了很重要的性能优势。</strong></li><li>可读写的<strong>缓存会返回缓存对象的拷贝</strong>(<strong>通过序列化)</strong>，这样会慢一点，的但是安全，因此默认是false.</li></ul><h3 id="8-4自定义缓存"><a href="#8-4自定义缓存" class="headerlink" title="8.4自定义缓存"></a>8.4自定义缓存</h3><p>除了使用自定义缓存的方式，还可以通过实现自己的缓存或者为其他第三方方案创建适配器来完全覆盖缓存行为。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"com.soyanga.mybaits.plugin.MyCache"</span></span></span><br></pre></td></tr></table></figure><p>这个实例展示了如何使用一个自定义的缓存实现。type属性指定的类必须实现<code>org.mybatis.cache.Cache</code>接口。这个接口是MyBatis框架中很多复杂接口之一，但是简单实现即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key,Object value)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">haskey</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义实现一个简单的Cache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soyanga.mybatis.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: mybatis-case</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: MyCache 自定义缓存利用MyBatis的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: SOYANGA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2019-04-05 11:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> MyBatis会为，每一个nameSpace配置一个Cache实例 将其中的id属性(nameSpace字符串)作为为cache的一个唯一标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nameSpace中的id 作为cache的标识符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开辟容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer capacity = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置最大缓存数目用户缓存回收策略--（即满即清空）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxSize = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将key和value一一对应起来 内部存储数据结构（线程安全的Map）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Object, Object&gt; cacaheData = <span class="keyword">new</span> ConcurrentHashMap&lt;Object, Object&gt;(capacity);  <span class="comment">//默认开辟1024个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Cache的标识id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The identifier of this cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将key和value一一对应起来  (HashMap/数据库)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Can be any object but usually it is a &#123;<span class="doctag">@link</span> CacheKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The result of a select.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//即满即清空 回收策略</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cacaheData.size() &gt;= <span class="keyword">this</span>.getMaxSize()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">"putObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">this</span>.cacaheData.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存中的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The object stored in the cache.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object value = cacaheData.get(key);</span><br><span class="line">        logger.debug(<span class="string">"getObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    As of 3.3.0 this method is only called during a rollback for any previous value that was missing in the cache.</span></span><br><span class="line"><span class="comment">//    This lets any blocking cache to release the lock that may have previously put on the key.</span></span><br><span class="line"><span class="comment">//    A blocking cache puts a lock when a value is null and releases it when the value is back again.</span></span><br><span class="line"><span class="comment">//    This way other threads will wait for the value to be available instead of hitting the database.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存中的某个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Not used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object value = cacaheData.remove(key);</span><br><span class="line">        logger.debug(<span class="string">"removeObject key=&#123;&#125; value=&#123;&#125;"</span>, key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears this cache instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"clear cache"</span>);</span><br><span class="line">        cacaheData.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并不是核心方法，可以不要去实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并不是核心类，可以不去实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMaxSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSize</span><span class="params">(Integer maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存配置和缓存实例绑定在SQL映射文件（mapper文件）的命名空间（nameSpace）很重要的。因此，所有在相同命名空间的语句,正如绑定的缓存一样。<strong>语句可以修改和缓存交互方式</strong>，<strong>或在语句的基础上使用两种简单的属性来完全排除它们</strong>。默认情况下，语句可以这样来配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"false"</span> <span class="attr">usedCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">...</span> <span class="attr">flushCache</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果想改变默认的缓存行为，可以通过flushCache和useCache属性。比如在一情况下需要通过一个查询语句来刷新新缓存。</p><h3 id="8-5-第三方缓存"><a href="#8-5-第三方缓存" class="headerlink" title="8.5 第三方缓存"></a>8.5 第三方缓存</h3><p>Mybatis的Cache实现比较简单，真正使用二级缓存的时候，都会选择专业的缓存框架。EHcache是在Java领域广泛使用的分布式缓存解决方案框架。通过Mybatis集成EHcache来实现二级缓存。</p><p>memcache k - v 内存缓存</p><p><strong>redis</strong>         k - v  list map set skipList  缓存系统</p><ul><li><p>添加Mybatis集成Ehcache依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybstis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加缓存配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToIdleSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--hour--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeToLiveSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span>/&gt;</span><span class="comment">&lt;!--hour--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalHeap"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxEntriesLocalDisk"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryStoreEvictionPolicy"</span> <span class="attr">value</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加Ehcache的配置文件（<code>classPath:src/main/resources/ehcache.xml</code>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">java.io.tmpdir  ：默认的temp文件目录</span></span><br><span class="line"><span class="comment">maxElementsInMemory :内存中最大缓存对象数</span></span><br><span class="line"><span class="comment">maxElementsOnDisk :磁盘中最大缓存对象数，若是0表示无穷大</span></span><br><span class="line"><span class="comment">eternal :Element是否永久有效，一但设置了，timeout将不起作用</span></span><br><span class="line"><span class="comment">overflowToDisk ;配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcahche将会Element写到磁盘中</span></span><br><span class="line"><span class="comment">timeToIdleSeconds :设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认属性值是0，也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">timeToLiveSeconds ：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0，也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment">diskExpiryThreadTntervalSeconds :磁盘失效线程运行时间间隔，默认是120秒--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--diskStore path="java.io.tmpdir/mybatis-cache"/存储临时目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/mybatis-cache"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">name</span>=<span class="string">"default"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码实验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_queryScottEmpAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一次打开SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    ScottEmpMapper scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll  FirstResult: &#123;&#125;"</span>, scottEmpList);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//第二次打开SqlSession</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList2 = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll SecondResult: &#123;&#125;"</span>, scottEmpList2);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//第二次打开SqlSession</span></span><br><span class="line">    sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    scottEmpMapper = sqlSession.getMapper(ScottEmpMapper.class);</span><br><span class="line">    List&lt;ScottEmp&gt; scottEmpList3 = scottEmpMapper.queryScottEmpAll();</span><br><span class="line">    logger.info(<span class="string">"test_queryScottEmpAll ThirResult: &#123;&#125;"</span>, scottEmpList3);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​    返回结果日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.385</span> [main] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using <span class="string">'class org.apache.ibatis.logging.slf4j.Slf4jImpl'</span> adapter.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.723</span> [main] DEBUG org.apache.ibatis.logging.LogFactory - Logging initialized using <span class="string">'class org.apache.ibatis.logging.slf4j.Slf4jImpl'</span> adapter.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">00.778</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.058</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from ehcache.xml found in the classpath: file:/D:/IDEA%<span class="number">20</span>project/mybatis-<span class="keyword">case</span>/target/classes/ehcache.xml</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.058</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from URL: file:/D:/IDEA%<span class="number">20</span>project/mybatis-<span class="keyword">case</span>/target/classes/ehcache.xml</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.061</span> [main] DEBUG net.sf.ehcache.config.ConfigurationFactory - Configuring ehcache from InputStream</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.090</span> [main] DEBUG net.sf.ehcache.config.BeanHandler - Ignoring ehcache attribute xmlns:xsi</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.090</span> [main] DEBUG net.sf.ehcache.config.BeanHandler - Ignoring ehcache attribute xsi:noNamespaceSchemaLocation</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.092</span> [main] DEBUG net.sf.ehcache.config.DiskStoreConfiguration - Disk Store Path: C:\Users\<span class="number">32183</span>\AppData\Local\Temp\/mybatis-cache</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.114</span> [main] DEBUG net.sf.ehcache.CacheManager - Creating <span class="keyword">new</span> CacheManager with <span class="keyword">default</span> config</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.119</span> [main] DEBUG net.sf.ehcache.util.PropertyUtil - propertiesString is <span class="keyword">null</span>.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.132</span> [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - No CacheManagerEventListenerFactory <span class="class"><span class="keyword">class</span> <span class="title">specified</span>. <span class="title">Skipping</span>...</span></span><br><span class="line">16:33:01.900 [main] DEBUG net.sf.ehcache.Cache - No BootstrapCacheLoaderFactory class specified. Skipping...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.901</span> [main] DEBUG net.sf.ehcache.Cache - CacheWriter factory not configured. Skipping...</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.903</span> [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - No CacheExceptionHandlerFactory <span class="class"><span class="keyword">class</span> <span class="title">specified</span>. <span class="title">Skipping</span>...</span></span><br><span class="line">16:33:01.938 [main] DEBUG net.sf.ehcache.store.MemoryStore - Initialized net.sf.ehcache.store.MemoryStore for com.soyanga.mybatis.mapper.ScottEmpMapper</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.951</span> [main] DEBUG net.sf.ehcache.DiskStorePathManager - Using diskstore path C:\Users\<span class="number">32183</span>\AppData\Local\Temp\mybatis-cache</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.951</span> [main] DEBUG net.sf.ehcache.DiskStorePathManager - Holding exclusive lock on C:\Users\<span class="number">32183</span>\AppData\Local\Temp\mybatis-cache\.ehcache-diskstore.lock</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.955</span> [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - Failed to delete file com%<span class="number">002</span>esoyanga%<span class="number">002</span>emybatis%<span class="number">002</span>emapper%<span class="number">002</span>e%<span class="number">0053</span>cott%<span class="number">0045</span>mp%<span class="number">004</span>dapper.index</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">01.967</span> [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - <span class="function">Matching data file <span class="title">missing</span> <span class="params">(or empty)</span> <span class="keyword">for</span> index file. Deleting index file C:\Users\32183\AppData\Local\Temp\mybatis-cache\com%002esoyanga%002emybatis%002emapper%002e%0053cott%0045mp%004dapper.index</span></span><br><span class="line"><span class="function">16:33:01.968 [main] DEBUG net.sf.ehcache.store.disk.DiskStorageFactory - Failed to delete file com%002esoyanga%002emybatis%002emapper%002e%0053cott%0045mp%004dapper.index</span></span><br><span class="line"><span class="function">16:33:01.977 [main] DEBUG net.sf.ehcache.Cache - Initialised cache: com.soyanga.mybatis.mapper.ScottEmpMapper</span></span><br><span class="line"><span class="function">16:33:01.977 [main] DEBUG net.sf.ehcache.config.ConfigurationHelper - CacheDecoratorFactory not configured <span class="keyword">for</span> defaultCache. Skipping <span class="keyword">for</span> 'com.soyanga.mybatis.mapper.ScottEmpMapper'.</span></span><br><span class="line"><span class="function">16:33:02.017 [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: 0.0</span></span><br><span class="line"><span class="function">16:33:02.023 [main] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Opening JDBC Connection</span></span><br><span class="line"><span class="function">Fri Apr 05 16:33:02 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by <span class="keyword">default</span> <span class="keyword">if</span> explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to '<span class="keyword">false</span>'. You need either to explicitly disable SSL by setting useSSL</span>=<span class="keyword">false</span>, or set useSSL=<span class="keyword">true</span> and provide truststore <span class="keyword">for</span> server certificate verification.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.342</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Created connection <span class="number">98394724</span>.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.344</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - ==&gt;  Preparing: select empno as <span class="string">'empno'</span>, ename as <span class="string">'ename'</span>, job as <span class="string">'job'</span>, mgr as <span class="string">'mgr'</span> , sal as <span class="string">'sal'</span>, comm as <span class="string">'common'</span>, deptno as <span class="string">'deptno'</span>, hiredate as <span class="string">'hiredate'</span> from emp </span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.376</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - ==&gt; Parameters: </span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.413</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper.queryScottEmpAll - &lt;==      Total: <span class="number">15</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.414</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll  FirstResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.415</span> [main] DEBUG net.sf.ehcache.store.disk.Segment - put added <span class="number">0</span> on heap</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.418</span> [main] DEBUG org.apache.ibatis.transaction.jdbc.JdbcTransaction - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5</span>dd6264]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] DEBUG org.apache.ibatis.datasource.pooled.PooledDataSource - Returned connection <span class="number">98394724</span> to pool.</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: <span class="number">0.5</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.419</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll SecondResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.420</span> [main] DEBUG com.soyanga.mybatis.mapper.ScottEmpMapper - Cache Hit Ratio [com.soyanga.mybatis.mapper.ScottEmpMapper]: <span class="number">0.6666666666666666</span></span><br><span class="line"><span class="number">16</span>:<span class="number">33</span>:<span class="number">02.420</span> [main] INFO com.soyanga.mybatis.mapper.ScottEmpMapperTest - test_queryScottEmpAll ThirResult: [ScottEmp&#123;empno=<span class="string">'7369'</span>, ename=<span class="string">'SMITH'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7902</span>, hiredate=Wed Dec <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1980</span>, sal=<span class="number">800.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7499'</span>, ename=<span class="string">'ALLEN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Fri Feb <span class="number">20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1600.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7521'</span>, ename=<span class="string">'WARD'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Sun Feb <span class="number">22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7566'</span>, ename=<span class="string">'JONES'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Thu Apr <span class="number">02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2975.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7654'</span>, ename=<span class="string">'MARTIN'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Mon Sep <span class="number">28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1250.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7698'</span>, ename=<span class="string">'BLAKE'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Fri May <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2850.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7782'</span>, ename=<span class="string">'CLARK'</span>, job=<span class="string">'MANAGER'</span>, mgr=<span class="number">7839</span>, hiredate=Tue Jun <span class="number">09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">2450.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7788'</span>, ename=<span class="string">'SCOTT'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Sun Apr <span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7839'</span>, ename=<span class="string">'KING'</span>, job=<span class="string">'PRESIDENT'</span>, mgr=<span class="keyword">null</span>, hiredate=Tue Nov <span class="number">17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">5000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'7844'</span>, ename=<span class="string">'TURNER'</span>, job=<span class="string">'SALESMAN'</span>, mgr=<span class="number">7698</span>, hiredate=Tue Sep <span class="number">08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">1500.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">30</span>&#125;, ScottEmp&#123;empno=<span class="string">'7876'</span>, ename=<span class="string">'ADAMS'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7788</span>, hiredate=Sat May <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CDT <span class="number">1987</span>, sal=<span class="number">1100.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7900'</span>, ename=<span class="string">'JAMES'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7698</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">950.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7902'</span>, ename=<span class="string">'FORD'</span>, job=<span class="string">'ANALYST'</span>, mgr=<span class="number">7566</span>, hiredate=Thu Dec <span class="number">03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1981</span>, sal=<span class="number">3000.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">20</span>&#125;, ScottEmp&#123;empno=<span class="string">'7934'</span>, ename=<span class="string">'MILLER'</span>, job=<span class="string">'CLERK'</span>, mgr=<span class="number">7782</span>, hiredate=Sat Jan <span class="number">23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1982</span>, sal=<span class="number">1300.00</span>, comm=<span class="keyword">null</span>, deptno=<span class="number">10</span>&#125;, ScottEmp&#123;empno=<span class="string">'1314'</span>, ename=<span class="string">'SOYANGA'</span>, job=<span class="string">'BOSS'</span>, mgr=<span class="number">10000</span>, hiredate=Wed Apr <span class="number">03</span> <span class="number">22</span>:<span class="number">12</span>:<span class="number">39</span> CST <span class="number">2019</span>, sal=<span class="number">8888.88</span>, comm=<span class="keyword">null</span>, deptno=<span class="keyword">null</span>&#125;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>结论：缓存命中率提高 0 -&gt;0.5–&gt;0.666666所有配置缓存是生效的，且除了第一次以外的其他两次查询没有生成SQL语句是直接在缓存中进行查询的</p></blockquote><p>小Tips：</p><blockquote><p>Ehcache本身不支持Mybatis的Cache接口，MyBatis创建了一个新的接口（org\mybatis\caches\ehcache）来将Ehcache和Mybatis的Cache适配起来   –——<strong>适配器设计模式</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;Mybatis的Mapper映射&quot;&gt;&lt;a href=&quot;#Mybatis的Mapper映射&quot; class=&quot;headerlink&quot; title=&quot;Mybatis的Mapper映射&quot;&gt;&lt;/a&gt;Mybatis的Mapper映射&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;重点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握Mybatis的基本SQL映射&lt;/li&gt;
&lt;li&gt;掌握Mybatis中CRUD的SQL编写&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Mapper映射概念&quot;&gt;&lt;a href=&quot;#1-Mapper映射概念&quot; class=&quot;headerlink&quot; title=&quot;1 Mapper映射概念&quot;&gt;&lt;/a&gt;1 Mapper映射概念&lt;/h2&gt;&lt;p&gt;Mapper XML文件MyBatis的真正强大在于它的映射语句，也是解决&lt;strong&gt;JDBC&lt;/strong&gt;大量重复代码&lt;/p&gt;
    
    </summary>
    
      <category term="JavaEE" scheme="https://soyanga.github.io/categories/JavaEE/"/>
    
    
      <category term="Mybatis" scheme="https://soyanga.github.io/tags/Mybatis/"/>
    
      <category term="JavaEE" scheme="https://soyanga.github.io/tags/JavaEE/"/>
    
  </entry>
  
</feed>

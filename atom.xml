<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SOYANGA</title>
  
  <subtitle>Hello World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://soyanga.github.io/"/>
  <updated>2019-02-05T14:53:11.288Z</updated>
  <id>https://soyanga.github.io/</id>
  
  <author>
    <name>SOYANGA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构复习专用</title>
    <link href="https://soyanga.github.io/2019/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0%E4%B8%93%E7%94%A8/"/>
    <id>https://soyanga.github.io/2019/01/31/数据结构复习专用/</id>
    <published>2019-01-31T15:33:16.000Z</published>
    <updated>2019-02-05T14:53:11.288Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>[TOC]</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><a id="more"></a><h3 id="反转单链表-LeetCode206"><a href="#反转单链表-LeetCode206" class="headerlink" title="反转单链表 [LeetCode206]"></a>反转单链表 [LeetCode206]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode per = <span class="keyword">null</span>;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = per;</span><br><span class="line">            per = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> per;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p>其实就只一直在将<code>cur.next=pre</code>，然后pre变为cur,cur变为next。</p><p><img src="/2019/01/31/数据结构复习专用/反转单链表图解.png" alt="反转单链表图解"></p><h3 id="环形链表（链表是否带环）-LeetCode141"><a href="#环形链表（链表是否带环）-LeetCode141" class="headerlink" title="环形链表（链表是否带环）[LeetCode141]"></a>环形链表（链表是否带环）[LeetCode141]</h3><p><strong>示例1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><p><strong>解答：</strong></p><ol><li><p><strong>利用哈希表Set（无重复值）存储链表节点，头节点向后遍历，只要走到相同的节点，就带环</strong></p><p><strong>反之只要头节点向后遍历到null，则链表无环。</strong></p><p><strong>时间复杂度O(n) 空间复杂度O(n)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(head);</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>利用快慢指针，相差一步的快慢指针，</strong></p><p><strong>时间复杂度O(n) 空间复杂度O(n)</strong></p><p><strong>关于为什么是一个走两步，一个走一步的原因：既然是要相遇，如果快指针走三步，它每次会跳过两个节点，慢指针一次只能走一步，这就可能会错过。快指针每次走两步的话，只会跳过一个节点，无论如何后都会和慢指针相遇。</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">while</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序链表-LeetCode21"><a href="#合并两个有序链表-LeetCode21" class="headerlink" title="合并两个有序链表[LeetCode21]"></a>合并两个有序链表[LeetCode21]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>); <span class="comment">//带头结点的新链表</span></span><br><span class="line">        ListNode cur = newNode;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&amp;&amp;l2!=<span class="keyword">null</span>)&#123;<span class="comment">//谁小，新链表接谁</span></span><br><span class="line">            <span class="keyword">if</span>(l1.val&gt;l2.val)&#123;</span><br><span class="line">                 cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;     <span class="comment">//一个链表完了直接接另一个有序列表</span></span><br><span class="line">            cur.next=l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表的倒数第N个节点-LeetCode19"><a href="#删除链表的倒数第N个节点-LeetCode19" class="headerlink" title="删除链表的倒数第N个节点[LeetCode19]"></a>删除链表的倒数第N个节点[LeetCode19]</h3><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p><strong>解答：</strong> </p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode newhead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//带头节点</span></span><br><span class="line">        newhead.next = head;</span><br><span class="line">        ListNode fast = newhead;</span><br><span class="line">        ListNode slow = newhead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123; <span class="comment">//快指针先走n+1步</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;  <span class="comment">//同时走</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;  倒数第n个节点的前一个节点</span><br><span class="line">        <span class="keyword">return</span> newhead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求链表的中间结点-LeetCode876"><a href="#求链表的中间结点-LeetCode876" class="headerlink" title="求链表的中间结点[LeetCode876]"></a>求链表的中间结点[LeetCode876]</h3><p><strong>示例：</strong></p><p>给定一个带有头结点 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5]</span><br><span class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</span><br><span class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br><span class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><p><strong>快慢指针法</strong></p><ul><li>时间复杂度：O(N)<em>O</em>(<em>N</em>)，其中 N<em>N</em> 是给定列表的结点数目</li><li>空间复杂度：O(1)<em>O</em>(1)，<code>slow</code> 和 <code>fast</code> 用去的空间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast =fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="有效括号-LeetCode20"><a href="#有效括号-LeetCode20" class="headerlink" title="有效括号[LeetCode20]"></a>有效括号[LeetCode20]</h3><p><strong>示例：</strong> </p><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>解答：利用哈希表以Key-Value模型 存储要匹配的两个字符</strong> </p><p>例如： <code>map.put(&#39;)&#39;,&#39;(&#39;);</code>假如出现’)’则在此相邻的必定出现了’(‘与之相对，所以将出现的未匹配成功的字符（匹配字符的左括号）压入栈中，等待右括号出现，立马进行出栈确认，在栈为字符串中率先出现一个右括号则在栈中压入一个“#“。则获取匹配已经失败。</p><p>反之当字符串都经历了这个流程后栈为空时，此时字符串括号匹配。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character,Character&gt; mappings; <span class="comment">//存储括号的对应值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap&lt;Character,Character&gt;();</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;(); <span class="comment">//括号匹配栈</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123; <span class="comment">//按照字符拆分字符串</span></span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="comment">//如果字符串中的字符是一个右半括号</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.mappings.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">char</span> toElement = stack.empty()? <span class="string">'#'</span> :stack.pop();</span><br><span class="line">                <span class="comment">//按照key查找对应的value值即可</span></span><br><span class="line">                <span class="keyword">if</span>(toElement != <span class="keyword">this</span>.mappings.get(c))&#123; <span class="comment">//括号匹配则继续进行，不匹配则返回不匹配</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果字符串中是一个左半括号</span></span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小栈-LeetCode155"><a href="#最小栈-LeetCode155" class="headerlink" title="最小栈[LeetCode155]"></a>最小栈[LeetCode155]</h3><p><strong>示例：</strong></p><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><p><strong>解答：双栈（主栈+最小栈）/（单栈模拟双栈）</strong></p><p><strong>双栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Stack &lt;Integer&gt;stack;</span><br><span class="line">    Stack &lt;Integer&gt;minStack;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.minStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  <span class="comment">//无论如何双栈中压入元素个数相同</span></span><br><span class="line">        <span class="keyword">if</span>(minStack.isEmpty()||x&lt;minStack.peek())</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        minStack.push(minStack.peek());</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;  <span class="comment">//无论如何双栈中抛出元素个数相同</span></span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>单栈模拟双栈：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Stack &lt;Integer&gt;stack;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">            stack.push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.peek();</span><br><span class="line">            stack.push(x);</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;x)&#123;</span><br><span class="line">                stack.push(temp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.get(stack.size()-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="用栈实现队列-LeetCode232"><a href="#用栈实现队列-LeetCode232" class="headerlink" title="用栈实现队列[LeetCode232]"></a>用栈实现队列[LeetCode232]</h3><p><strong>示例：</strong></p><p>使用栈实现队列的下列操作：</p><ul><li>push(x) – 将一个元素放入队列的尾部。</li><li>pop() – 从队列首部移除元素。</li><li>peek() – 返回队列首部的元素。</li><li>empty() – 返回队列是否为空。</li></ul><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);  </span><br><span class="line">queue.peek();  <span class="comment">// 返回 1</span></span><br><span class="line">queue.pop();   <span class="comment">// 返回 1</span></span><br><span class="line">queue.empty(); <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>你只能使用标准的栈操作 – 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><p><strong>解答：</strong> </p><p>利用两个栈，一个栈默认用来存放数据，另一个栈用来实现数据的反转，使用原本栈的操作，来模拟实现队列的出入，查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s1;  <span class="comment">//来回倒数据数据实现出队列入队列的栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; sQueue; <span class="comment">//固定一个栈为存储数据的栈</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1 = <span class="keyword">new</span> Stack();</span><br><span class="line">        sQueue = <span class="keyword">new</span> Stack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//入队列的时候就将数据倒好</span></span><br><span class="line">        <span class="keyword">while</span>(!sQueue.isEmpty())&#123;</span><br><span class="line">            s1.push(sQueue.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        sQueue.push(x);</span><br><span class="line">        <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">            sQueue.push(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sQueue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sQueue.pop();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sQueue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sQueue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sQueue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>另一种解法：异曲同工之妙</strong> </p><p><strong>第一种解法，在入队列的时候倒数据。这种解法，只有在出队列的时候或者查看队列头的时候倒数据。每次出队列就在出队列的栈中出，而入队列的时候只需要将数据入到入队列的栈中。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; inStack;</span><br><span class="line">    Stack&lt;Integer&gt; outStack;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inStack = <span class="keyword">new</span> Stack();</span><br><span class="line">        outStack = <span class="keyword">new</span> Stack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        inStack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!inStack.isEmpty())&#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!inStack.isEmpty())&#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inStack.isEmpty()&amp;&amp;outStack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="比较含退格的字符串-LeetCode844"><a href="#比较含退格的字符串-LeetCode844" class="headerlink" title="比较含退格的字符串[LeetCode844]"></a>比较含退格的字符串[LeetCode844]</h3><p>示例：</p><p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;ab#c&quot;, T = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;ab##&quot;, T = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “”。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;a##c&quot;, T = &quot;#a#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “c”。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = &quot;a#c&quot;, T = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：S 会变成 “c”，但 T 仍然是 “b”。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code>。</li></ol><p><strong>解题：</strong></p><blockquote><ul><li><p>第一感觉是需要使用一个可以执行插入，删除的数据结构用于存储字符串。数组，链表，栈，队列，可变字符串</p></li><li><p>又因为‘#’这个操作是回退，即删除该字符前的一个字符，就类似于键盘上的Backspace按键。“后进先出”-栈</p></li><li><p>两个字符串-双栈</p></li><li>删除，写入就如同入栈出栈，最后比较栈中元素即可。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//双栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; s1 = <span class="keyword">new</span> Stack(); <span class="comment">//字符串1的栈</span></span><br><span class="line">        Stack&lt;Character&gt; s2 = <span class="keyword">new</span> Stack(); <span class="comment">//字符串2的栈</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S.charAt(i)!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                s1.push(S.charAt(i));<span class="comment">//入栈</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!s1.isEmpty())&#123;<span class="comment">//出栈</span></span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(T.charAt(i)!=<span class="string">'#'</span>)&#123;</span><br><span class="line">                s2.push(T.charAt(i));<span class="comment">//入栈</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!s2.isEmpty())&#123;<span class="comment">//出栈</span></span><br><span class="line">                s2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.equals(s2); <span class="comment">//比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本计算器（逆波兰表达式）-LeetCode224"><a href="#基本计算器（逆波兰表达式）-LeetCode224" class="headerlink" title="基本计算器（逆波兰表达式）[LeetCode224]"></a>基本计算器（逆波兰表达式）[LeetCode224]</h3><h3 id="棒球比赛-LeetCode682"><a href="#棒球比赛-LeetCode682" class="headerlink" title="棒球比赛[LeetCode682]"></a>棒球比赛[LeetCode682]</h3><h3 id="下一个更大元素-I-LeetCode496"><a href="#下一个更大元素-I-LeetCode496" class="headerlink" title="下一个更大元素 I[LeetCode496]"></a>下一个更大元素 I[LeetCode496]</h3>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://soyanga.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://soyanga.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://soyanga.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>volatile-双重检验锁模式</title>
    <link href="https://soyanga.github.io/2019/01/31/volatile-%E5%8F%8C%E9%87%8D%E6%A3%80%E9%AA%8C%E9%94%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://soyanga.github.io/2019/01/31/volatile-双重检验锁模式/</id>
    <published>2019-01-31T10:10:53.000Z</published>
    <updated>2019-01-31T15:37:43.200Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="1-volatile型变量的特殊规则"><a href="#1-volatile型变量的特殊规则" class="headerlink" title="1.volatile型变量的特殊规则"></a>1.volatile型变量的特殊规则</h2><p>关键字volatile可以说是JVM提供的最轻量级的同步机制，JVM内存模型对volatile专门定义了一些特殊访问规则。</p><p>当一个变量被定义为volatile之后，它具备两种特性。可见性和有序性</p><h2 id="两层语义："><a href="#两层语义：" class="headerlink" title="两层语义："></a>两层语义：</h2><ul><li><strong>第一层语义：</strong>内存可见–可见性</li><li><strong>第二层语义：</strong>禁止指令重排–有序性</li></ul><a id="more"></a><p><strong>可见性：</strong>当一个线程修改了这个变量的值，新值能被其他线程可以立刻得到，而普通变量做不到这一点，普通变量的值在线程之间传递需要通过主内存来完成。</p><p>具体来说，volatile的作用是：<strong>在本CPU对变量的修改直写入主内存中，同时这个写操作使得其他CPU中对应的变量的缓存行无效</strong>，<strong>这样其他线程在读取这个变量时候必须从主内存中读取，所以读取得到的是最新的</strong>，这就是上面说的能被立即“看到”。</p><p>volatile修饰的变量仅仅只拥有这两个性质，<strong>并不拥有原子性，volatile变量的运算在并发下是不安全的，原因java里面的运算并非原子操作。</strong></p><h2 id="volatile修饰的变量如何确保原子性"><a href="#volatile修饰的变量如何确保原子性" class="headerlink" title="volatile修饰的变量如何确保原子性"></a>volatile修饰的变量如何确保原子性</h2><p>由于volatile只保证了可见习性和，有序性。子在不符合以下两条规则的运算场景中，我们仍然需要<strong>通过加锁(synchronized或lock)来保证原子性</strong></p><ol><li>运算结果并不依赖变量的当前值，或者能够确保只有单一线程修改变量的值</li><li>变量不需要与其他的状态变量共同参与不变约束</li></ol><p><strong>并发场景下对于类似++操作如何保证原子性</strong></p><ul><li><strong>加锁，结合synchronized或者lock体系</strong></li><li><strong>使用原子类（java.util.current.atomic包下的所有类-内部使用CAS保证原子性）</strong></li></ul><p><strong>有序性：volatile可以禁止指令重排</strong> 。volatile在其汇编代码中有一个lock操作，这个操作相当一个<strong>内存屏障</strong>，<strong>指令重排不能越过内存屏障</strong>，具体来</p><ul><li><strong>说在执行volatile变量时，内存屏障之前的语句一定被执行过了且结果对后面执行的语句时已知的，而内存屏障后面的语句一定还没有执行到</strong>；</li><li>在进行指令优化时，<strong>在volatile变量之前的语句不能能被重排其之后，相反的其后的语句也必能被重排到之前。</strong></li></ul><h1 id="2-双重检验锁模式（懒汉单例模式）"><a href="#2-双重检验锁模式（懒汉单例模式）" class="headerlink" title="2.双重检验锁模式（懒汉单例模式）"></a>2.双重检验锁模式（懒汉单例模式）</h1><p>双重检验锁模式(double checked locking pattern),是一种使用同步块加锁的方式。程序员称其为双重检查</p><p>锁，因为会有两次检查，一次是在同步块外，一次是在同步块内。</p><h2 id="为什么在同步块内还要再检验一次？"><a href="#为什么在同步块内还要再检验一次？" class="headerlink" title="为什么在同步块内还要再检验一次？"></a>为什么在同步块内还要再检验一次？</h2><p>因为可能会有多个线程一起进入到同步块外的if，如果在同步块内不进行二次检验就会生成多个实例。</p><h2 id="volatile在单例模式中起了什么作用？"><a href="#volatile在单例模式中起了什么作用？" class="headerlink" title="volatile在单例模式中起了什么作用？"></a>volatile在单例模式中起了什么作用？</h2><p>主要是因为懒汉模式，用时再new，但是instance = new Singleto()这句，并非是一个原子操作，事实上再JVM中这句话大概做了以下3件事</p><ol><li><p>给instance分配内存，</p></li><li><p>调用Singleton的构造函数来初始化成员变量</p></li><li><p>将instance对象指向分配的内存空间（执行完这步instance就为非null了）</p><p>但是在JVM的即时编译器中存在指令重排优化。也就事说上面第二步和第三步的顺序是不能保证的，</p><p>最终的执行顺序可能是1-2-3也可能是1-3-2</p><p>如果是后者(1-3-2)，则3执行完毕，2未执行之前，被线程二抢占了，这时instance已经是非null了(但是却没有初始化)，所以哦线程二直接返回instance，然后使用，就会报错。我们只需要将instance变量声明成volatile就可以了。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JVMReview;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: java-SE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: SOYANGA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2019-01-31 19:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;   <span class="comment">//Single Checked</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  <span class="comment">//Double Checked</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hahah"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        singleton.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;1-volatile型变量的特殊规则&quot;&gt;&lt;a href=&quot;#1-volatile型变量的特殊规则&quot; class=&quot;headerlink&quot; title=&quot;1.volatile型变量的特殊规则&quot;&gt;&lt;/a&gt;1.volatile型变量的特殊规则&lt;/h2&gt;&lt;p&gt;关键字volatile可以说是JVM提供的最轻量级的同步机制，JVM内存模型对volatile专门定义了一些特殊访问规则。&lt;/p&gt;
&lt;p&gt;当一个变量被定义为volatile之后，它具备两种特性。可见性和有序性&lt;/p&gt;
&lt;h2 id=&quot;两层语义：&quot;&gt;&lt;a href=&quot;#两层语义：&quot; class=&quot;headerlink&quot; title=&quot;两层语义：&quot;&gt;&lt;/a&gt;两层语义：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一层语义：&lt;/strong&gt;内存可见–可见性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二层语义：&lt;/strong&gt;禁止指令重排–有序性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVASE" scheme="https://soyanga.github.io/categories/JAVASE/"/>
    
    
      <category term="JavaSE基础" scheme="https://soyanga.github.io/tags/JavaSE%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java学习笔记" scheme="https://soyanga.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JVM" scheme="https://soyanga.github.io/tags/JVM/"/>
    
      <category term="重点" scheme="https://soyanga.github.io/tags/%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>再识Java-JVM</title>
    <link href="https://soyanga.github.io/2019/01/28/%E5%86%8D%E8%AF%86Java-JVM/"/>
    <id>https://soyanga.github.io/2019/01/28/再识Java-JVM/</id>
    <published>2019-01-28T05:14:59.000Z</published>
    <updated>2019-01-31T11:34:21.257Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略"><a href="#区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略" class="headerlink" title="区域划分-&gt;判断对象是否存活-&gt;垃圾回收器-&gt;对象分配回收策略"></a>区域划分-&gt;判断对象是否存活-&gt;垃圾回收器-&gt;对象分配回收策略</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li>JVM简介</li><li>Java内存区域与内存溢出异常 </li><li>垃圾回收器与内存分配策略 </li><li>常用JVM性能监控与故障处理工具 </li><li>Java内存模型</li></ol><h1 id="一、JVM简介"><a href="#一、JVM简介" class="headerlink" title="一、JVM简介"></a>一、JVM简介</h1><p>1）<strong>虚拟机简介：</strong></p><p>JVM(java Virtual Machine简称。意味java虚拟机){</p><p>虚拟机：指通过软件模拟的具有完整的硬件功能的、运行再一个完全隔离的环境中的完整计算机系统。</p><p>常见虚拟机：JVM，VMware,Vitual BOX</p><p>2）:JVM和其他两个虚拟机的区别：a.VMware与virtualBox【是通过软件模拟物理CPU的指令集物理系统中会有很多的寄存器</p><p>2）：<strong>JVM是通过软件模拟java字节码的指令集，JVM中只保留了PC寄存器，其他寄存器都进行了剪裁，JVM是一台被定制过的现实当中不存在的计算机</strong></p><a id="more"></a><h1 id="二、Java内存区域与内存溢出的异常"><a href="#二、Java内存区域与内存溢出的异常" class="headerlink" title="二、Java内存区域与内存溢出的异常"></a>二、Java内存区域与内存溢出的异常</h1><p>java内存区域的划分-<strong>共6块内存（bulingbuling）</strong></p><p><strong>线程私有区域：</strong>程序计数器，java虚拟机栈，本地方法栈</p><p><strong>线程共享区域：</strong>Java堆，Java方法区，运行时常量池</p><h2 id="2-1线程私有内存："><a href="#2-1线程私有内存：" class="headerlink" title="2.1线程私有内存："></a>2.1线程私有内存：</h2><p>每个线程都具有，且彼此之间相互隔离</p><h3 id="2-1-1程序计数器"><a href="#2-1-1程序计数器" class="headerlink" title="2.1.1程序计数器"></a>2.1.1程序计数器</h3><p>程序计数器是一个<strong>比较小的内存空间</strong>，<strong>当前线程所执行的字节码的行号指令器。</strong></p><blockquote><p>若当前线程执行的是java方法，计数器记录的是正在执行的JVM字节指令地址；</p><p>若当前线程执行的是native方法，计数器数值为空。</p></blockquote><p><em>程序计数器是唯一一块不会产生</em>OOM异常的区域。</p><h3 id="线程私有概念："><a href="#线程私有概念：" class="headerlink" title="线程私有概念："></a>线程私有概念：</h3><p>由于JVM的多线程是通过<strong>线程轮流切</strong>换并<strong>分配处理器执行时间</strong>的方式来实现的，因此在任何一个确定的时刻，一个多处理器（多核处理器则指的是一个内核）都会执<strong>行一个线程中的指</strong>令。因此为了<strong>切换线程</strong>后能<strong>恢复到正确的执行位置</strong>，每个线程都需要有<strong>独立的程序计数器</strong>，<strong>各条线程之间计数器互不影响</strong>，<strong>独立存储</strong>。我们就把类似这类区域成为”线程私有“内存。</p><h3 id="2-1-2Java虚拟机栈（线程私有）"><a href="#2-1-2Java虚拟机栈（线程私有）" class="headerlink" title="2.1.2Java虚拟机栈（线程私有）"></a>2.1.2Java虚拟机栈（线程私有）</h3><p>虚拟机栈描述的是<strong>java方法执行的内存模型</strong>：每个方法执行的同时都会创建一个<strong>栈帧</strong>用于<strong>存储局部变量表，操作数栈，动态链接，方法出口</strong>等。每个方法从调用直至执行完成的过程，就对用一个栈帧在虚拟机栈中入栈和出栈的过程。声明周期与线程相同。</p><p><strong>局部变量表：</strong>存放编译器可知的各种<strong>基本数据类型</strong>（8大数据类型），<strong>对象引用</strong>。局部变量表所需的内存空间在编译期完成分配，当进入一个方法使，这个方法需要在栈帧中分配多大局部变量空间完全是确定的，在执行期间不会改变局部变量表的大小。</p><p>此区域会产生两个异常：</p><ol><li><strong>SOFE:</strong>如果线程请求的栈深度大于虚拟机所允许的深度（<strong>-Xss设置栈容量</strong>），将会抛出StackOverFlowError异常。</li><li><strong>OOM:</strong>虚拟机在动态扩展时无法申请到足够的内存，会抛出OOM(OutOfMermoryError异常)</li></ol><h3 id="2-1-3本地方法栈（线程私有）"><a href="#2-1-3本地方法栈（线程私有）" class="headerlink" title="2.1.3本地方法栈（线程私有）"></a>2.1.3本地方法栈（线程私有）</h3><p>本地方法栈与虚拟机栈的作用完全一致，区别无非就是本地方法栈为虚拟机使用的Native方法服务，而虚拟机栈为JVM执行的Java方法服务。</p><p>在HotSpot虚拟机中，本地方法栈与虚拟机栈是同一块内存区域。</p><h2 id="2-2线程共享内存"><a href="#2-2线程共享内存" class="headerlink" title="2.2线程共享内存"></a>2.2线程共享内存</h2><h3 id="2-2-1Java堆（GC堆）-线程共享"><a href="#2-2-1Java堆（GC堆）-线程共享" class="headerlink" title="2.2.1Java堆（GC堆）-线程共享"></a>2.2.1Java堆（GC堆）-线程共享</h3><p>Java（堆 Java Heap)是JVM管理的<strong>最大内存区域</strong>。所有线程<strong>共享此内存</strong>，在JVM启动时创建，此内存中存放都是<strong>对象实例以及数组，</strong>1.7后新加了字符串</p><p><strong>Java堆是垃圾回收器管理的最主要内存区域。java堆可以处于物理上不连续的内存空间。</strong></p><p><strong>-Xmx</strong>:设置堆最大值</p><p><strong>-Xms:</strong>设置堆的最小值</p><p>如果在堆中没有足够的内存完成对象实例分配，并且堆无法再次扩展时抛出 <strong>OOM异常</strong>。(最频繁发生！)</p><p><strong>OOM:</strong>OutOfMerroryError虚拟机的动态扩展无法申请到足够的内存，会抛出OOM</p><p><strong>内存溢出：</strong>内存中的对象确实还应该存活，但由于堆内存不够用产生的异常。</p><p><strong>内存泄漏：</strong>无用对象无法被GC，扩展内存后还是会报错OOM异常</p><p>内存泄漏与内存溢出区别就在于扩展内存上，内存溢出可以扩展内存来解决，而内存泄漏则无法通过扩展内存的方式来解决。</p><h3 id="2-2-2方法区（静态）-线程共享"><a href="#2-2-2方法区（静态）-线程共享" class="headerlink" title="2.2.2方法区（静态）-线程共享"></a>2.2.2方法区（静态）-线程共享</h3><p>用于存储已被<strong>JVM加载的类信息，常量，静态变量，编译器编译后的代码等数据</strong>，JDK8以前，方法区也叫永久代，JDK8之后称为元空间（Mate Space）之前所说的<strong>静态常量区</strong></p><p><strong>永久代并不意味着数据进入方法区就永远存在</strong>，此区域的内存回收主<strong>要针对常量池的回收</strong>以及对<strong>类型的卸载。</strong></p><ul><li><p><strong>类定义的信息在方法区放着</strong></p><p>public static…(符号引用)也在方法区放着</p></li><li><p><strong>对象产生：符号引用-&gt;类-&gt;具体引用</strong></p><p>执行Test test = new Test();的过程</p><p>首先知道时那个类（<strong>存放在方法区中</strong>）</p><p>最后的具体引用-&gt;符号引用（<strong>从方法区中取出</strong>）</p></li></ul><p>  <strong>JVM规范：</strong>方法区无法满足内存分配需求时抛出OOM</p><h3 id="2-2-3运行时常量池（方法区的一部分）"><a href="#2-2-3运行时常量池（方法区的一部分）" class="headerlink" title="2.2.3运行时常量池（方法区的一部分）"></a>2.2.3运行时常量池（方法区的一部分）</h3><p>运行时常量池是方法区的一部分，存放字面量与符号引用。</p><p><strong>字面量：</strong>字符串（JDK1.7后移动到堆中），final常量，基本数据类型的值</p><p><strong>符号引用：</strong>类和结构的完全限定名，字段名称和描述符，方法名称个描述符。</p><p><strong>完全限定名：</strong>包.类名  权限修饰符</p><p><strong>字面量</strong>：10(基本数据类型的值)</p><h1 id="三、垃圾回收器与内存分配策略"><a href="#三、垃圾回收器与内存分配策略" class="headerlink" title="三、垃圾回收器与内存分配策略"></a>三、垃圾回收器与内存分配策略</h1><p><strong>线程私有的三个内存区域</strong>：程序计数器，虚拟机栈，本地方法栈这三个区域<strong>其生命周期与线程有关</strong>，随线程而生，随线程而灭。并<strong>且这三个区域的内存分配与回收具有确定性，因为当方法结束或者线程结束时，内存就自然跟着线程回收了</strong>。但是只有当主线程，及所有线程结束时，Java堆与方法区这两个区域才会被被完全回收，其声明周期跟随这个项目，或者主线程。</p><h2 id="3-1如何判断对象已”死“"><a href="#3-1如何判断对象已”死“" class="headerlink" title="3.1如何判断对象已”死“"></a>3.1如何判断对象已”死“</h2><p>Java堆中存放几乎所有对象实例，垃圾回收器在对堆进行垃圾回收前，首先要判断这些对象是否存活，那些已经”死去“，判断对象是否已“死”有如下几种算法</p><h3 id="3-1-1引用计数法"><a href="#3-1-1引用计数法" class="headerlink" title="3.1.1引用计数法"></a>3.1.1引用计数法</h3><p>引用计数法描述的算法为：</p><ul><li><h4 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h4><p>给对象增加一个引用计数器，每当有一个地方引用它的时候，计数器就+1，当引用失效的时，计数器就-1，任何时刻计数器为0的对象就是不再被使用的对象，即对象已“死”。</p><p>Python就采用了这个方法进行内存管理。</p></li><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>无法解决循环引用的问题</strong> ：</p><p>但是，在主流的JVM中并没有使用该方法来进行管理内存，<strong>主要原因是因为引用计数无法解决循环引用的问题</strong></p></li></ul><h3 id="3-1-2可达性分析算法-JVM采用"><a href="#3-1-2可达性分析算法-JVM采用" class="headerlink" title="3.1.2可达性分析算法-JVM采用"></a>3.1.2可达性分析算法-JVM采用</h3><p>JVM中采用“可达性分析算法”来判断对象是否存活（同样采用此方法的还有C#,Lisp-最早一门采用动态内存分配的语言）。</p><ul><li><h4 id="算法核心-1"><a href="#算法核心-1" class="headerlink" title="算法核心"></a>算法核心</h4></li></ul><p>通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索走过的路径称为“引用链”，当一个对象到GC Roots 没有任何引用链连接时（从GC Roots到这个对象不可达）时,证明此对象是不可用的，以下图为例</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\GC Root可达性分析.png" alt="GC Root可达性分析"></p><p><strong>其中可达性分析在JVM中的使用时，判定以下对象可以作为一个根节点</strong>(GC Roots)</p><blockquote><ol><li>虚拟机栈（帧栈中的本地变量）<em>中引用对象（方法中的对象）</em> </li><li>方法区中类静态属性引用对象（<em>静态变量）-[局部变量（类的普通对象）除外]</em></li><li>方法区中常量引用对象（常量）</li><li>本地方法栈中JNI(Native)<em>引用的对象</em></li></ol></blockquote><p>JDK1.2以前，Java中引用的定义很传统，如果引用类型的数据中存储的数值代表的是另一块地址的起始地址，就称这块内存代表着一个引用，这种定义有些狭隘，一个对象在这种定义下只有被引用或者没有被引用这两种状态。</p><p>但是我们希望能描述这一类对象：当内存空间还足够时，能够保存在内存中；如果内存空间进行垃圾回收后还是非常紧张，则可以抛弃这一类对象。很多系统中的缓存对象都符合这个场景。</p><h4 id="引用扩充："><a href="#引用扩充：" class="headerlink" title="引用扩充："></a>引用扩充：</h4><p>在JDK1.2之后，java对引用的概念做了扩充。将引用分为</p><p>强引用（Strong Referrnce)</p><p>软引用（Soft Reference）</p><p>弱引用（Weak Reference）</p><p>虚引用（Phantom Reference)四种，这四种引用强度依次递减。</p><ul><li><p>强引用：</p><p>代码中普遍存在的，类似<strong>Object obj = new Object()</strong>;直接new出来的在JVM中只要强引用还存在，垃圾回收器就永远不会回收此类对象实例</p></li><li><p>软引用：</p><p>着力描述一些有用但是不必须的对象，对于仅被软引用指向的对象，<strong>在系统要发生内存溢出之前会将软引用对象进行垃圾回收，若内存够用，这些对象仍然被保留。</strong>在JDK1.2之后提供<strong>SoftReference类</strong>来实现软引用。</p></li><li><p>弱引用：弱引用也时用来描述非必须对象的。但是它的强度要比软引用更弱一点。<strong>被弱引用关联的对象只能生存到下一次垃圾回收发生之前</strong>。当垃圾回收器开始工作时，无论当前内容是否够用，都会回收掉只被弱引用关联的对象。在JDK1.2之后提供了<strong>WeakReference类</strong>来实现弱引用</p></li><li><p>虚引用：虚引用也被称为幽灵引用或者幻影引用，他是<strong>最弱的一种引用关系</strong>，<strong>一个对象是否有虚引用的存在，完全不会对其生命周期时间构成影响</strong>。也无法通过虚引用来取得一个对象的实例，为了一个对象设置虚引用的<strong>唯一目的就是能在这个对象被回收器收到一个系统通知</strong>。在JDK1.2以后，提供了PhantomReference类来实现虚引用。（仅仅是一个通知 GC)</p></li></ul><h2 id="3-2对象自我拯救（已经过期了）"><a href="#3-2对象自我拯救（已经过期了）" class="headerlink" title="3.2对象自我拯救（已经过期了）"></a>3.2对象自我拯救（已经过期了）</h2><p>即便是可达性分析算法中不可达的对象，也并非“非死不可”，这时候他们暂处在“缓刑阶段”要宣告一个对象的真正死亡，至少需要经历两次标记的过程，如果对象在进行可达性分析之后发现没有与GC Roots相连接的引用链，那它将会被<strong>第一时间标记该对象</strong>，<strong>然后进行筛选</strong>，筛选的条件就是此对象是否有必要执行<strong>finalize()方法</strong>。当对象<strong>没有覆盖fianlize()方法</strong>或<strong>者finalize()方法已经被JVM调用过</strong>，虚拟机会将这两种情况视为“没有必要执行”，此时的对象才是真正“死”的对象。</p><p>如果对象被判定为有<strong>必要执行finalize()方法</strong>，那么这个对象会被放置在叫做<strong>F-Queue的队列当</strong>中，并在稍后由一个虚拟机自动建立的，低优先级的<strong>Finalizer线程</strong>去执行（这里所说的执行指的<strong>虚拟机会触发finalize()方法</strong>。<strong>finalize()方法时对象逃脱死亡的最后一次机会</strong>。稍后<strong>GC将对F-Queue中的对象</strong>进行<strong>第二次规模标记</strong>，如果<strong>对象finalize()中成功拯救自己</strong>(<em>只需要重新与引用链上的任何一个对象建立起关联关系即可)</em>，那在<strong>第二次标记时他将会被移除出“即将回收”的集合</strong>；如果对象这时候还是<strong>没有逃脱</strong>，<strong>那基本上它就是真的被回事收了</strong>。</p><p>总结宣告一个对象死亡要经历两次标记</p><ol><li><strong>第一次标记</strong> ：若对象在进行<strong>可达性分析</strong>之后发现到<strong>GC Roots不可达</strong>。此对象会进行一次<strong>finalize()</strong>。筛选的条件是此对象是否有必要执行finalize()方法，当对象没有被<strong>覆盖finalize()</strong>方法或者<strong>finalize()方法已经被JVM调用过</strong>（并不是人为的进行调用），那么<strong>JVM彻底宣告此对象死亡</strong>。</li><li>筛选成功（<strong>对象覆写了Object类的fianlize()方法，并且未被执行过</strong>），会将此对象<strong>放到F-Queue(唤醒队列)</strong> ，如果<strong>对象在finalize()中成功自救(此对象与GC Roots建立联系)</strong>，则对象在<strong>第二次标记时被移除回收集合，成功存活；</strong>若对象在finalize()中仍然与GC Roots不可达 ，宣告死亡。</li></ol><h2 id="3-3回收方法区"><a href="#3-3回收方法区" class="headerlink" title="3.3回收方法区"></a>3.3回收方法区</h2><p><strong>方法区（永久代）的垃圾回收</strong>主要回收的是两部分</p><ol><li>废弃的常量</li><li>无用的类</li></ol><h3 id="3-3-1回收废弃的常量"><a href="#3-3-1回收废弃的常量" class="headerlink" title="3.3.1回收废弃的常量"></a>3.3.1回收废弃的常量</h3><p>回收废弃的常量和回收Java堆中的对象十分类似。以常量池中字面量(直接量)的回收为例，假如一个字符串“abc”已经进入常量池，但是当前系统没<strong>有任何一个String对象引用常量池的”abc“常量</strong>，也没有再其他地方引用这个字面量。<strong>如果发生GC且有必要的化（方法区不够用才会执行）</strong>，这个”abc“常量会被系统清理出常量池。<strong>常量池中的其他类(接口)，方法，字段的符号引用也于此类似。</strong></p><h3 id="3-3-2判断一个类是否是无用类"><a href="#3-3-2判断一个类是否是无用类" class="headerlink" title="3.3.2判断一个类是否是无用类"></a>3.3.2判断一个类是否是无用类</h3><ol><li>该类的<strong>所有实例都已经被回收了</strong>    <em>(Java堆中不存在该类的任何实现)</em></li><li>加载该类的<strong>类加载器已经被回收</strong> </li><li>该类的<strong>class对象没有任何其他地方被引用，也无法通过反射访问该类的所有内容。</strong></li></ol><p>JVM可以对同时满足上述3个条件的无用类进行回收，也仅仅是可以而不是必然会回收，大量使用反射，动态代理等场景都需要对JVM具备类型卸载的功能来防止永久代溢出。</p><h1 id="四、垃圾回收算法"><a href="#四、垃圾回收算法" class="headerlink" title="四、垃圾回收算法"></a>四、垃圾回收算法</h1><h2 id="4-1标记-清除算法"><a href="#4-1标记-清除算法" class="headerlink" title="4.1标记-清除算法"></a>4.1标记-清除算法</h2><ul><li><p><strong>算法核心：</strong></p><p>整个算法分为标记-清除两个阶段</p><p><em>标记阶段</em>：标记出垃圾回收需要的回收对象</p><p><em>清除阶段</em>：一次性清除所有带标记的对象</p></li><li><p><strong>导致的问题</strong>：java不采用标记清除算法</p><ol><li><p>效率问题：</p><p>标记与清除两个阶段<strong>效率都不高</strong></p></li><li><p>空间问题：</p><p>标记清除算法<strong>会产生大量的不连续空间</strong>，导致的主要问题是，若程序中<strong>需要分配较大的连续对象时，由于空间碎片较多时因此无法找到连续的内存空间而不得已再次触发GC。</strong> </p></li></ol></li></ul><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\标记清除算法图解.png" alt=""></p><h2 id="4-2复制算法（新生代垃圾回收算法）"><a href="#4-2复制算法（新生代垃圾回收算法）" class="headerlink" title="4.2复制算法（新生代垃圾回收算法）"></a>4.2复制算法（新生代垃圾回收算法）</h2><p>复制算法是为了解决：标记-清除算法的效率问题。</p><ul><li><p><strong>核心思想：</strong></p><p>将内存<strong>按照容量划分成大小相等的两块</strong>，每次只<strong>使用其中一块内存</strong>，当使用的内存需要进行垃圾回收时，会将此区域的所有<strong>存活对象一次性复制到保留区域</strong>。然后<strong>将使用的内存块一次清理掉</strong>。</p><p>这样的做的好处是每次都对整个半区进行内存回收，内存分配时，就不需要考虑内存碎片等复杂情况，只需要移动堆定指针，按顺序分配即可，此算法实现简单，运行高效。算法的执行流程如下图：</p></li></ul><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\复制算法图解.png" alt="复制算法图解"></p><p>商用虚拟机（包括HotSpot都是采用这种收集算法来回收新生代）</p><ul><li><p><strong>导致问题：</strong> </p><p>复制算法最大的问题在于内存利用率太低，所有商用JVM都对复制算法进行了改进</p></li></ul><p><strong>JVM改进后的复制算法：</strong> </p><p>新生代中98%的对象“朝生夕死”（生命周期短），所以<strong>并不需要按照1：1来划分内存空间</strong>。将内存（<strong>新生代内存）划分为一块较大的Eden（伊甸区）空间</strong></p><p>和<strong>两块较小的Survivor(幸存区)（一块称为Fron区，另一个称为To区）空间</strong>。<strong>每次只是用Eden区和其他一块Suvivor</strong>。当回收时，将Eden和Survivor中<strong>还存活的对象一次性复制到另一块Survivor空间上</strong>，最<strong>后清理掉Eden和使用过的其中一个Survivor空间。</strong></p><p>当Survivor空间不够时，需要依赖其他<strong>内存（老年代）进行分配担保</strong>。</p><p>HotSpot默认Eden与一块Survivor的大小比例是<strong>8:1</strong>，也就是说<strong>Eden:From:To = 8:1:1</strong>。所以每次新生代<strong>可用内存空间为整个新生代容量的90%</strong>,而剩下的<strong>10%用来存放回收后存活的对象</strong>。</p><h4 id="HotSpot复制算法的流程："><a href="#HotSpot复制算法的流程：" class="headerlink" title="HotSpot复制算法的流程："></a>HotSpot复制算法的流程：</h4><ol><li><p>当Eden区满的时候，会触发一次Minor GC，将所有存活对象拷贝到Survivor的From区域，然后一次性清除Eden区；</p></li><li><p>当Eden区再次触发Minor GC,会扫描Eden区和From区，将两块空间的存活对象拷贝到To区，然后一次性清空Eden区和From区</p></li><li><p>当后续Eden区再次发生Minor GC时，会对Eden和To区进行垃圾回收，存活对象移动到From区，后续流程类似，只是将From区和To区作为保留区。</p></li><li><p>部分对象会在From区和To区来回复制，如此交换15次（JVM参数-XX:Max Teburing Threshold,默认为15），最终一直在移动的对象最终会存入老年代。（父债子偿）</p></li><li><p>Survivor区域若无法放下所有存活对象，需要依赖其他内存，如老年代内存进行分配担保。</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\复制算法在JVM的应用.png" alt="复制算法在JVM的应用"></p></li></ol><h2 id="4-3标记-整理算法（老年代垃圾回收算法）"><a href="#4-3标记-整理算法（老年代垃圾回收算法）" class="headerlink" title="4.3标记-整理算法（老年代垃圾回收算法）"></a>4.3标记-整理算法（老年代垃圾回收算法）</h2><p>复制收集算法在对<strong>象存活率较高时</strong>会进行比较多的复制操作，效率会变低。因此在老年代一般不能使用复制算法。</p><ul><li><strong>算法核心</strong></li></ul><p>针对老年代的特点，提出了一种称之为“标记-整理算法”。标记过程仍与“标记-清除”过程一致，但后续步骤不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存。流程图如下：</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\标记整理算法流程图.png" alt="标记整理算法流程图"></p><h2 id="4-4分代收集算法"><a href="#4-4分代收集算法" class="headerlink" title="4.4分代收集算法"></a>4.4分代收集算法</h2><p>当前JVM垃圾收集器都采用的是“分代收集算法”，这个算法并没有新思想，只是根据<strong>对象存活周期的不同</strong>将内存划分几块。</p><p><strong>一般是把Java堆分为新生代和老年代。</strong></p><ul><li><p>在新生代中，每次垃圾回收都会有大批对象死去，只有少量存活，因此我们采用复制算法；</p></li><li><p>而老年代中对象存活率高，没有额外空间对它进行分配担保，就必须采用“标记-清除”或者“标记-整理“算法。</p></li></ul><p>面试题：请问了解Minor GC和Full GC么，这两种GC有什么不一样。</p><blockquote><ol><li>Minor GC 又称为新生代GC：指的是发生在新生代的垃圾回收，因为Java对象大多都具有朝生夕死的特性，因此Minor GC采用复制算法非常频繁，一般回收速度也比较快。</li><li>Full GC又称为老年代GC或者Major GC:指的是发生在老年代的垃圾回收，出现了Major GC，经常会伴随至少一次Minor GC（并非绝对，在Parallel Scavenge收集器中就有直接Full GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ol></blockquote><p>直接进行Full GC 大对象直接扔到老年代中，假如老年代也满了，就直接进行老年代的垃圾回收</p><h2 id="4-5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8"><a href="#4-5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8" class="headerlink" title="4.5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8"></a>4.5垃圾收集器（根据JDK版本不同具体实现不同）-JDK8</h2><h3 id="4-5-1JVM调优部分"><a href="#4-5-1JVM调优部分" class="headerlink" title="4.5.1JVM调优部分"></a>4.5.1JVM调优部分</h3><p>垃圾回收器也分为<strong>两代</strong></p><p><strong>新生代垃圾回收器：</strong>Serial(串行)，ParNew(并行)，Parallel(并行)，Scavenge(并行)</p><p><strong>老年代垃圾回收器：</strong>CMS，Serial Old,Parallel Old</p><p><strong>串行(Serial ,Serial Old):</strong>垃圾回收线程与用户线程在JVM中顺序执行（其中一个执行，都在等待）。</p><p><strong>并行(Paraller,Scavenge,Parallel old):</strong>多个垃圾回收线程一起执行，用户线程仍处于等待。</p><p><strong>并发(CMS):</strong>这才是真正意义上的垃圾回收线程与用户线程一起执行。CMS是第一款垃圾回收器</p><p><strong>全区域垃圾回收器</strong>：G1（并发）</p><p><strong>STW</strong>:当垃圾回收线程工作，用户线程处于等待状态</p><h2 id="五、对象分配策略"><a href="#五、对象分配策略" class="headerlink" title="五、对象分配策略"></a>五、对象分配策略</h2><h3 id="5-1对象有现在Eden分配"><a href="#5-1对象有现在Eden分配" class="headerlink" title="5.1对象有现在Eden分配"></a>5.1对象有现在Eden分配</h3><p>大多数情况下，对象在<strong>新生代Eden区分配</strong>。当Edem区<strong>没有足够的空间进行分配</strong>时，虚拟机将发生一次<strong>Minor GC</strong></p><p><strong>-Xss:栈大小</strong></p><p><strong>-Xms:堆最小内存</strong></p><p><strong>-Xmx:堆最大内存</strong></p><p><strong>-Xmm:新生代内存大小</strong></p><p>-<strong>XX:+survivorRatio=8:Eden区和Survivor区比例-默认是8</strong></p><h2 id="5-2大对象直接进入老年代"><a href="#5-2大对象直接进入老年代" class="headerlink" title="5.2大对象直接进入老年代"></a>5.2大对象直接进入老年代</h2><p>Java典型的大对象就是那种很长的字符串以及数组</p><p>设置大对象标准：</p><p><strong>-XX:PretenureSiveThreadhold = 字节大小（告诉JVM超过该字节大小的对象为对象，内存分配时直接进入老年代</strong></p><p><strong>这样做的目的是</strong>：在于避免Eden区以及Survivor区之间发生大量的内存复制（新生代采用复制算法收集内存）</p><h2 id="5-3长期存活对象进入老年代"><a href="#5-3长期存活对象进入老年代" class="headerlink" title="5.3长期存活对象进入老年代"></a>5.3长期存活对象进入老年代</h2><p>JVM给堆中的每个对象定义了一个堆中<strong>年龄（Age)计数器</strong></p><p><strong>若对象在Eden出生并且经历了一次Minor GC后仍存活且能被Survivor区容纳，将此对象的年龄置为1.此后对象在Survivor区内经历一次Minor GC，年龄就增加一岁，当其年龄增加到一定程度（默认为15），此对象晋升为老年代。</strong> </p><p>晋升为老年代的阈值，可以通过以下参数设置：</p><p><strong>-XX:Max Teburing Threshold</strong> </p><h2 id="5-4动态年龄对象判定"><a href="#5-4动态年龄对象判定" class="headerlink" title="5.4动态年龄对象判定"></a>5.4动态年龄对象判定</h2><p>为了更好的适应内存状态，JVM并不是永远要求对象的年龄必须达到MaxTenuringThreshold才能晋升老年代。如果在<strong>Survivor空间中相同年龄的对象大小的总和</strong>大于<strong>Survivor空间（一个Survivor空间）的一半</strong>，<strong>年龄大于或的等于该年龄的对象就可以直接进入老年代，</strong>无<strong>需等到MaxTenuringThreshold中要求的年龄。</strong></p><h2 id="5-5空间分配担保"><a href="#5-5空间分配担保" class="headerlink" title="5.5空间分配担保"></a>5.5空间分配担保</h2><p>在发生Minor GC之前，虚拟机会检查<strong>老年代最大可用的连续空间</strong>是否<strong>大于新生代所有对象的总空间。</strong> </p><ul><li><p><strong>如果大于：</strong>则此次Minor GC是安全的。</p></li><li><p><strong>如果小于：</strong>则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败</p><p>如果HandlePromotionFailure=true，那么会继续检查老年代最大可以可用连续内存是否大于此前晋升到老年代的对象的平均大小，如果大于，则尝试进行一次Minor GC，<strong>但是这次Minor GC依然是有风险的；</strong> 如果小于或者HandlePromotionFailure=false，则改为进行一次<strong>FUll GC</strong> </p></li></ul><p>上面提到了Minor GC依然会有风险，是因为新生代采用<strong>复制收集算法</strong>，假如大量对象共在Minor GC后任然存活（最极端情况为内存回收后新生代中所有对象均存活），而Survivor空间比较小的，这时就需要老年代进行分配担保，把Survivor无法容纳的对象放到老年代中。<strong>老年代要进行空间分配担保，前提是老年代得有足够的空间来容纳这些对象</strong>，但一共有多少个对象在内存回收后活下来是不可预知的。<strong>因此只好取之前每次垃圾回收后晋升到老年代的对象大小的平均值作为参考</strong>。使用这个平均值与老年代剩余空间进行比较，来决定是否进行Full GC来让老年代腾出更多空间。</p><p>取平均值仍然是一种<strong>概率事件</strong>，如果某次Minor GC后存活的对象陡然增加，远高于平均值的话，必然导致担保失败，如果出现分配担保失败，<strong>就只能在失败后发起一次Full GC</strong>。虽然存在发生这种情况的概率，但是<strong>大部分时候都能够成功分配担保</strong>的，这样就<strong>避免了过于频繁的执行Full G</strong>C。</p><h1 id="六、常用JVM性能监控与故障处理工具"><a href="#六、常用JVM性能监控与故障处理工具" class="headerlink" title="六、常用JVM性能监控与故障处理工具"></a>六、常用JVM性能监控与故障处理工具</h1><h2 id="6-1JDK命令行工具"><a href="#6-1JDK命令行工具" class="headerlink" title="6.1JDK命令行工具"></a>6.1JDK命令行工具</h2><p>“javac” ，“java”   命令实际上都是JDK/bin目录下的命令行程序，除此之外，<strong>bin目录</strong>下还包含用于监控JVM和故障处理的工具</p><p>用于<strong>处理应用程序性问题，定位故障</strong>发挥了很大的作用。</p><table><thead><tr><th>命令名称</th><th>全称</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td>jps</td><td>JVM Process Status Tool</td><td style="text-align:left">显示指定系统内所有的HotSpot虚拟机进程</td></tr><tr><td>jstat</td><td>JVM Statistics Monitoring Tool</td><td style="text-align:left">用于收集Hotspot虚拟机各方面的运行数据</td></tr><tr><td>jinfo</td><td>Conﬁguration Info for Java</td><td style="text-align:left">显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>JVM Memory Map</td><td style="text-align:left">生成虚拟机的内存转储快照，生成heapdump文件</td></tr><tr><td>jhat</td><td>JVM Heap Dump Browser</td><td style="text-align:left">用于分析heapdump文件，他会建立一个HTTP/HTML服务器，让用户在浏览器上查看分析结果</td></tr><tr><td>jstack</td><td>JVM Stack Trace</td><td style="text-align:left">显示虚拟机的线程快照</td></tr></tbody></table><h3 id="6-1-1-jps：虚拟机进程工具"><a href="#6-1-1-jps：虚拟机进程工具" class="headerlink" title="6.1.1 jps：虚拟机进程工具 ~~"></a>6.1.1 jps：虚拟机进程工具 ~~</h3><p><strong>功能：</strong></p><blockquote><p>可列出正在运行的虚拟机进程，并显示虚拟机执行主类（main函数所在的类）名称以及这些进程的<strong>本地虚拟机唯一ID</strong>（Local Virtual Machine Identiﬁer,<strong>LVMID</strong>)。其他的JDK工具大多数需要输入jps查询到LVMD来确定要监控的虚拟机进程。</p></blockquote><p>jps命令格式：<code>jps[options] [hostid]</code></p><p>hostid 可用于查询开启RMI服务的远程虚拟机状态，hostid为RMI注册的主机名</p><p>options有：</p><table><thead><tr><th>options 参数</th><th>意义</th></tr></thead><tbody><tr><td>-q</td><td>只输出LVMD，忽略主类名称</td></tr><tr><td>-m</td><td>输出虚拟机进程启动时传递给主类main()函数的参数</td></tr><tr><td>-l</td><td>输出主类全名，如果进程执行的是jar,输出jar路径</td></tr><tr><td>-v</td><td>输出虚拟机进程启动时JVM参数</td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jps指令.png" alt="jps指令"></p><h3 id="6-1-2jstat：虚拟机统计信息监视器工具"><a href="#6-1-2jstat：虚拟机统计信息监视器工具" class="headerlink" title="6.1.2jstat：虚拟机统计信息监视器工具"></a>6.1.2jstat：虚拟机统计信息监视器工具</h3><p><strong>功能：</strong></p><blockquote><p>用于监控虚拟机各种运行状态信息的命令行工具，它可以显<strong>示本地或远程虚拟机中的类的装载，内存，垃圾回收，JIT编译等运行数据</strong>。在没有GUI图形界面，只提供纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首先工具。</p></blockquote><p>jstat命令格式为：<code>jstat [option vmid[interval count]]</code> </p><p>如果是本地虚拟机进程VMID与LVMID是一致的，如果是远程虚拟机进程，那么VMID格式因该为：</p><p><code>[protocol:][//]lvmid[@hostname[:port]/severname]</code></p><p>参数<strong>interval和count代表查询间隔（单位ms/s）和 次数</strong>，如果省略这两个参数，则默认只查询一次</p><p>选项option代表<strong>用户希望查询的虚拟机信息</strong>，主要分为三类：<strong>类装载，垃圾收集，运行期编译</strong>等状况，具体选项作用如下：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>监视<strong>类装载，卸载次数，总空间以及装载类所消耗的时间</strong></td></tr><tr><td>-gc</td><td>监视<strong>java堆状况，包括Eden区，两个Survivor区，老年代，元空间等的容量，已用空间，GC时间合计等信息</strong></td></tr><tr><td>-gccapacity</td><td>监视内容与-gc基本相同，但是输出为主要关注<strong>java堆各个区域使用到的最大，最小空间</strong></td></tr><tr><td>-gcutil</td><td>监视内容与-gc基本相同，但是输出主要<strong>关注已使用空间占总空间的百分比</strong></td></tr><tr><td>-gccause</td><td>于gcutil功能一样，但是会额外输出<strong>导致上一次GC产生的原因</strong></td></tr><tr><td>-gcnew</td><td>监视<strong>新生代GC状况</strong></td></tr><tr><td>-gcnewcapacity</td><td>监视内容于-gcnew基本相同，输出主要<strong>关注新生代使用到的最大，最小空间</strong></td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jstat指令.png" alt="jstat指令"></p><h3 id="6-1-3jinfo：Java配置信息工具"><a href="#6-1-3jinfo：Java配置信息工具" class="headerlink" title="6.1.3jinfo：Java配置信息工具"></a>6.1.3jinfo：Java配置信息工具</h3><p><strong>功能：</strong> </p><blockquote><p>jinfo用于<strong>查看和调整虚拟机的配置参数</strong></p></blockquote><p>jinfo的命令格式为：</p><p><code>jinfo[option] vmid</code></p><table><thead><tr><th>option</th><th>作用</th></tr></thead><tbody><tr><td>-flag</td><td>查询线程的参数</td></tr></tbody></table><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\jinfo指令.png" alt="jinfo指令"></p><p>我们可以用info -flags来查询线程的参数，其中的Non-default VM flags为虚拟机的设置参数，Command line为用户自行设置的参数</p><h2 id="6-1-4jmap：java内存映像工具"><a href="#6-1-4jmap：java内存映像工具" class="headerlink" title="6.1.4jmap：java内存映像工具"></a>6.1.4jmap：java内存映像工具</h2><p><strong>功能：</strong> </p><blockquote><p>生成堆转储快照(一般称为heapdump或<strong>dump文件</strong>)。如果不使用jmp命令，要想获取Java堆转储快照，还有一些比较暴力的手段：譬如在之前用过的。</p></blockquote><blockquote><p>XX+:HeapDumpOnOutOfMemoryError参数，可以让虚拟机在OOM异常出现之后自动生成dump文件。                          </p><p>jmap的作用并不仅仅为了获取dump文件，它还可以查询finalize执行队列，Java堆和永久代的详细信息，如空间使用率，当前使用的是那种收集器。</p></blockquote><p>jmap的命令格式：</p><p><code>jmap[option] vmid</code></p><p>option的常用选项及作用见下表</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-heap</td><td>显示jvm heap详细信息</td></tr><tr><td>-histo</td><td>显示jvm heap中对象统计信息，包括类，实例数量，合计容量,包括对象数组和所占空间大小</td></tr><tr><td>-dump</td><td>生成java堆转储快照。格式为：-dump:[live],format=b,file=filename，其中live子参数说明是否只dump存活的对象</td></tr></tbody></table><h3 id="6-1-5jhat：虚拟机转存储快照分析工具"><a href="#6-1-5jhat：虚拟机转存储快照分析工具" class="headerlink" title="6.1.5jhat：虚拟机转存储快照分析工具"></a>6.1.5jhat：虚拟机转存储快照分析工具</h3><p>与jmap命令搭配使用，用于分析jmap生成的堆转存储快照，jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览中查看。实际工作中使用jhat的几率并不大，因为分析dump文件的工作是一个<strong>耗时且消耗硬件资源的过程</strong>，一般不会在部署机器上分析；<strong>二是jhat分析功能相对来说比较简陋，我们可以使用Visual VM或者MAT等工具实现比jhat更强大更专业的分析功能。</strong></p><p>当屏幕上显示“Sever is ready”后，用户在浏览器中输入“<a href="http://localhost:7000”就可以看到分析结果" target="_blank" rel="noopener">http://localhost:7000”就可以看到分析结果</a></p><h3 id="6-1-6jstack：Java堆栈跟踪工具"><a href="#6-1-6jstack：Java堆栈跟踪工具" class="headerlink" title="6.1.6jstack：Java堆栈跟踪工具"></a>6.1.6jstack：Java堆栈跟踪工具</h3><p>功能：</p><blockquote><p>虚拟机当前时刻的<strong>线程快照</strong>。线程快照指的是当前虚拟机内的每一条<strong>线程正在执行的方法堆栈的集合</strong>，生成线程快照的作用是，可用于定<strong>位线程出现长时间停顿的原因</strong>，如<strong>线程间死锁</strong>，<strong>死循环</strong>，<strong>请求外部资源导致的长时间等待问题</strong>，当线程出现<strong>停顿</strong>时，就可以用jstack各个线程调用的堆栈情况。</p></blockquote><p><code>jstack[option] vmid</code> </p><p><strong>option:</strong> </p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-F</td><td>当正常输出的请求不被响应时，<strong>强制输出线程堆栈</strong></td></tr><tr><td>-l</td><td>除堆栈外，显示关于<strong>锁的附加信息</strong></td></tr><tr><td>-m</td><td>如果调用到本地方法的话，可以线程C/C++的堆栈</td></tr></tbody></table><h1 id="七-Java内存模型"><a href="#七-Java内存模型" class="headerlink" title="七.Java内存模型"></a>七.Java内存模型</h1><p>JVM定义了一致java内存模型来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都达到一致的内存访问效果。</p><p>Java内存模型的主要目标是定义程序中各个变量的访问规则，即在J<strong>VM中将变量存储到内存中和从内存中取出变量的底层细节。</strong>（<strong>此处的变量包括实例字段，静态字段和构成数组对象的元素</strong>）,不包括局部变量和方法参数，因为这两个线程私有，不会被线程共享。</p><h2 id="7-1主内存与工作内存"><a href="#7-1主内存与工作内存" class="headerlink" title="7.1主内存与工作内存"></a>7.1主内存与工作内存</h2><p>工作内存：每个线程独有</p><p>主内存：所有线程共享内存。（堆（大部分），方法区，运行时常量池）</p><p>Java内存模型规定了<strong>所有变量都存储在主内存中</strong>，<strong>每条线程还有的自己的工作内存</strong> ，线程<strong>工作内</strong> 存保存了线程使用到的<strong>变量的主内存副本拷贝</strong>。线程对<strong>变量的所有操作（读取，赋</strong>值等）都必须在<strong>工作内存中进行</strong>，而<strong>不能直接读写到主内存中的变量</strong>。不同线程也<strong>无法直接访问对方工作内存中的变量</strong>，线程间变量值的传递<strong>均需要通过主内存</strong>来完成。</p><p><img src="/2019/01/28/再识Java-JVM/hexo\source\_posts\再识Java-JVM\线程主内存工作内存.png" alt="线程，主内存，工作内存关系"></p><h2 id="7-2内存间的交互操作"><a href="#7-2内存间的交互操作" class="headerlink" title="7.2内存间的交互操作"></a>7.2内存间的交互操作</h2><p><strong>主内存与工作内存之间的具体交互协议</strong>，即一个变量如何从主内存中拷贝到工作内存，如何从工作内存同步回主内存之类的实现细节，java内存模型中定义了如下8中操作来完成。JVM实现时必须保证下面提及的<strong>每种操作是的原子的，不可再分隔的。</strong></p><ul><li><strong>lock(锁定)：</strong>作用于主内存的变量，它把一个变量标识为一个线程独占的状态   <strong>指令级别的锁</strong> </li><li><strong>unlock(解锁)：</strong>作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。     </li><li><strong>read(读取)  :</strong> 作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。        </li><li><strong>load(载入) :</strong> 作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use(使用) :</strong> 作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎。 </li><li><strong>assign(赋值) :</strong> 作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量。 </li><li><strong>store(存储) :</strong> 作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便后续的write操作 使用。 </li><li><strong>write(写入) :</strong>  作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p>Java内存模型三大特性：</p><ol><li><p><strong>原子性：</strong>由java内存模型来直接保证原子性变量的操作，read,load use store assign 大致可以r认为。基本数据类型的访问式原子的。如若需要更大范围的原子性，需要synchorized关键字约束。（即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行）</p></li><li><p><strong>可见性：</strong>可见性指的式当一个线程修改了共享变量的值，其他线程能够立刻得知这个修改。volatile,synchronized,final三个关键字可以实现可见性。</p></li><li><p><strong>有序性：</strong>如果在本线程内观察所有操作都是有序的，若在线程外观察另一个线程所有操作都是无序的。前半句是指“线程内表现为串行”，后半句是指“指令重拍”和“工作内存与主内存同步延迟现象”。</p><p>tips:<strong>这里的有序性指的是，逻辑上的有序</strong>，即保证执行结果最总不改变，操作先后次序改变不影响最终结果就称有序性。</p></li></ol><p>   JVM具备先天的有序性，即无须通过任何手段都能够保证有序性，称为JVM的happen-before原则，若两个操作的次序无法从happen-bvefore中推导出来，则无法保证其有序性，JVM可以随意对其进行重排序。</p><h3 id="happens-before-先行发生原则"><a href="#happens-before-先行发生原则" class="headerlink" title="happens-before(先行发生原则)"></a>happens-before(先行发生原则)</h3><ul><li><p><strong>程序次序规则：</strong>一个线程内，按照代码顺序，<strong>书写在前面的操作 </strong> 先发生子于 <strong>书写在后面</strong>的操作</p></li><li><p><strong>锁定规则：</strong>一个<strong>unlock操作先行</strong> 发生于 后面<strong>对同一个锁的lock操作</strong></p></li><li><p><strong>volatile变量规则：</strong>对一个变量的<strong>写擦操作</strong> 先发生于 <strong>后面对这个变量的读操作</strong></p></li><li><p><strong>传递规则：</strong>如果操作A 先生于 操作B,而操作B又 先发生于 操作c,则可以得出<strong>操作A</strong> 先发生于 <strong>操作C</strong></p></li><li><p><strong>线程启动规则：</strong>Thread对象的<strong>start()方法调用</strong> 先行发生于 <strong>被中断的代码检测到中断事件的发生</strong>。</p></li><li><p><strong>线程中断规则：</strong>对线程<strong>interrupt()方法调用</strong> 先发生于 <strong>被中断线程的代码检测到中断事件的发生。</strong></p></li><li><p><strong>线程终结规则</strong> ：<strong>线程中所有的操作都</strong>先发生于<strong>线程的终止检测</strong>，我们可以通过Thread.join()方法结束，Thread.isAlive()的返回值手段检测到线程已经终止执行。</p></li><li><p><strong>对象终结规则：</strong>一个<strong>对象的初始化完成</strong>先行发生于它的<strong>finalize()方法的开始</strong>。</p></li></ul><p>  也就是说，要向并发程序正确的执行，必须要保证原子性，可见性，以及有序性。只要一个没有被保证，就有可能导致程序运行不正常。</p><h2 id="7-3volatile型变量的特殊规则"><a href="#7-3volatile型变量的特殊规则" class="headerlink" title="7.3volatile型变量的特殊规则"></a>7.3volatile型变量的特殊规则</h2><p>关键字volatile可以说是JVM提供的最轻量级的同步机制，JVM内存模型对volatile专门定义了一些特殊访问规则。</p><p>当一个变量被定义为volatile之后，它具备两种特性。可见性和有序性</p><p>两层语义：</p><ul><li><strong>第一层语义：</strong>内存可见–可见性</li><li><strong>第二层语义：</strong>禁止指令重排–有序性</li></ul><p><strong>可见性：</strong>当一个线程修改了这个变量的值，新值能被其他线程可以立刻得到，而普通变量做不到这一点，普通变量的值在线程之间传递需要通过主内存来完成。</p><p>具体来说，volatile的作用是：<strong>在本CPU对变量的修改直写入主内存中，同时这个写操作使得其他CPU中对应的变量的缓存行无效</strong>，<strong>这样其他线程在读取这个变量时候必须从主内存中读取，所以读取得到的是最新的</strong>，这就是上面说的能被立即“看到”。</p><p>volatile修饰的变量仅仅只拥有这两个性质，<strong>并不拥有原子性，volatile变量的运算在并发下是不安全的，原因java里面的运算并非原子操作。</strong></p><p>由于volatile只保证了可见习性和，有序性。子在不符合以下两条规则的运算场景中，我们仍然需要<strong>通过加锁(synchronized或lock)来保证原子性</strong></p><ol><li>运算结果并不依赖变量的当前值，或者能够确保只有单一线程修改变量的值</li><li>变量不需要与其他的状态变量共同参与不变约束</li></ol><p><strong>并发场景下对于类似++操作如何保证原子性</strong></p><ul><li><strong>加锁，结合synchronized或者lock体系</strong></li><li><strong>使用原子类（java.util.current.atomic包下的所有类-内部使用CAS保证原子性）</strong></li></ul><p><strong>有序性：volatile可以禁止指令重排</strong> 。volatile在其汇编代码中有一个lock操作，这个操作相当一个<strong>内存屏障</strong>，<strong>指令重排不能越过内存屏障</strong>，具体来</p><ul><li><strong>说在执行volatile变量时，内存屏障之前的语句一定被执行过了且结果对后面执行的语句时已知的，而内存屏障后面的语句一定还没有执行到</strong>；</li><li>在进行指令优化时，<strong>在volatile变量之前的语句不能能被重排其之后，相反的其后的语句也必能被重排到之前。</strong></li></ul><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略&quot;&gt;&lt;a href=&quot;#区域划分-gt-判断对象是否存活-gt-垃圾回收器-gt-对象分配回收策略&quot; class=&quot;headerlink&quot; title=&quot;区域划分-&amp;gt;判断对象是否存活-&amp;gt;垃圾回收器-&amp;gt;对象分配回收策略&quot;&gt;&lt;/a&gt;区域划分-&amp;gt;判断对象是否存活-&amp;gt;垃圾回收器-&amp;gt;对象分配回收策略&lt;/h1&gt;&lt;h2 id=&quot;重点&quot;&gt;&lt;a href=&quot;#重点&quot; class=&quot;headerlink&quot; title=&quot;重点&quot;&gt;&lt;/a&gt;重点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JVM简介&lt;/li&gt;
&lt;li&gt;Java内存区域与内存溢出异常 &lt;/li&gt;
&lt;li&gt;垃圾回收器与内存分配策略 &lt;/li&gt;
&lt;li&gt;常用JVM性能监控与故障处理工具 &lt;/li&gt;
&lt;li&gt;Java内存模型&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;一、JVM简介&quot;&gt;&lt;a href=&quot;#一、JVM简介&quot; class=&quot;headerlink&quot; title=&quot;一、JVM简介&quot;&gt;&lt;/a&gt;一、JVM简介&lt;/h1&gt;&lt;p&gt;1）&lt;strong&gt;虚拟机简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM(java Virtual Machine简称。意味java虚拟机){&lt;/p&gt;
&lt;p&gt;虚拟机：指通过软件模拟的具有完整的硬件功能的、运行再一个完全隔离的环境中的完整计算机系统。&lt;/p&gt;
&lt;p&gt;常见虚拟机：JVM，VMware,Vitual BOX&lt;/p&gt;
&lt;p&gt;2）:JVM和其他两个虚拟机的区别：a.VMware与virtualBox【是通过软件模拟物理CPU的指令集物理系统中会有很多的寄存器&lt;/p&gt;
&lt;p&gt;2）：&lt;strong&gt;JVM是通过软件模拟java字节码的指令集，JVM中只保留了PC寄存器，其他寄存器都进行了剪裁，JVM是一台被定制过的现实当中不存在的计算机&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVASE" scheme="https://soyanga.github.io/categories/JAVASE/"/>
    
    
      <category term="JavaSE基础" scheme="https://soyanga.github.io/tags/JavaSE%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java学习笔记" scheme="https://soyanga.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JVM" scheme="https://soyanga.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>再识Java-02面向对象</title>
    <link href="https://soyanga.github.io/2019/01/28/%E5%86%8D%E8%AF%86Java-02%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://soyanga.github.io/2019/01/28/再识Java-02面向对象/</id>
    <published>2019-01-28T04:57:28.000Z</published>
    <updated>2019-02-01T06:06:01.422Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向过程编程缺少了可重用性设计</p><p>面向对象三大特征：</p><blockquote><ol><li><p>封装性：所谓封装性，就是把客观事物封装成了抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对于不可信的进行信息隐藏。简而言之就是，<strong>内部操作对外部而言不可见（保护性）</strong></p></li><li><p>继承性：继承是指这样的一种能力：它可以<strong>使现有类的所有功能</strong>，<strong>并在无需重信编写原来类的情况下对这些功能进行扩展</strong></p></li><li><p>多态性（*）：所谓多态就是指一个类实例的<strong>相同方法再不同的情形下有不同的表现形式</strong>。多态的机制使具有不同内部结构的对象可以共享相同的外部接口</p><p>利用多态可以得到良好的设计-&gt;</p></li></ol></blockquote><p>面向对象的最大特征：可以进行生活的抽象</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;p&gt;面向过程编程缺少了可重用性设计&lt;/p&gt;
&lt;p&gt;面向对象三大特征：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;封装性：所谓封装性，就是把客观事物封装成了抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对于不可信的进行信息隐藏。简而言之就是，&lt;strong&gt;内部操作对外部而言不可见（保护性）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承性：继承是指这样的一种能力：它可以&lt;strong&gt;使现有类的所有功能&lt;/strong&gt;，&lt;strong&gt;并在无需重信编写原来类的情况下对这些功能进行扩展&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多态性（*）：所谓多态就是指一个类实例的&lt;strong&gt;相同方法再不同的情形下有不同的表现形式&lt;/strong&gt;。多态的机制使具有不同内部结构的对象可以共享相同的外部接口&lt;/p&gt;
&lt;p&gt;利用多态可以得到良好的设计-&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;面向对象的最大特征：可以进行生活的抽象&lt;/p&gt;
    
    </summary>
    
      <category term="JAVASE" scheme="https://soyanga.github.io/categories/JAVASE/"/>
    
    
      <category term="JavaSE基础" scheme="https://soyanga.github.io/tags/JavaSE%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java学习笔记" scheme="https://soyanga.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OOP" scheme="https://soyanga.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>再识java-01</title>
    <link href="https://soyanga.github.io/2019/01/27/%E5%86%8D%E8%AF%86java-01/"/>
    <id>https://soyanga.github.io/2019/01/27/再识java-01/</id>
    <published>2019-01-27T13:40:41.000Z</published>
    <updated>2019-01-30T15:50:32.794Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="java再识"><a href="#java再识" class="headerlink" title="java再识"></a>java再识</h1><p>初始一见倾心，再识亦如初始。</p><p>​                                                        -java再识有感~</p><p><img src="/2019/01/27/再识java-01/图片\感悟.png" alt="感悟"></p><a id="more"></a><h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><p>变量，常量，函数，语句块</p><ul><li>标识符由字母，数字，下划线，$所组成，其中不能以数字开头，不能用Java中的保留字（关键字）</li><li>标识符采用有意义的简单命名</li><li>“$”不要在代码里出现</li></ul><p>对于类名和变量名，java的标准命名规范为<strong>“驼峰命名法”</strong> :camel:</p><p>对于类名，类名是以大写字母开头的名词：如果类名由多个单词组成，则每个单词的首字母大写。且源文件的文件名必须和公共类的名称相同</p><p>对于变量，如果只含有一个单词，则全部小写；如果变量名由多个单词组成，则从第二个单词开始，每个单词的首字母大写</p><p><strong>阿里编码规范：</strong></p><blockquote><ol><li>代码中的命名均不能以下划线或美元符号开始，也不能以下划线和美元结束。</li><li>代码命名严谨使用拼音与英文混合的方式，更不允许直接使用中文。</li><li><strong>类</strong>名使用<strong>UpperCamelCase风格</strong>，<strong>方法名，参数名，成员变量</strong>，<strong>局部变量</strong>统一采用<strong>lowerCamelCase风格</strong>。</li><li><strong>常量</strong>命名<strong>全部大写</strong>，<strong>单词间用下划线隔开</strong>。</li></ol></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>大数据类型转换小数据类型，必须强转，但有时会有丢失内容</p><blockquote><ol><li>范围小的数据可以自动转变为数据范围大的数据类型（数学计算时）</li><li>数据范围大的数据类型只有强制转换时才能转换类型下的数据类型</li></ol></blockquote><p>关于数据的默认值，默认值在主方法中无效</p><h2 id="方法的定义与使用"><a href="#方法的定义与使用" class="headerlink" title="方法的定义与使用"></a>方法的定义与使用</h2><h3 id="2-1方法重载（重要）"><a href="#2-1方法重载（重要）" class="headerlink" title="2.1方法重载（重要）            ~~"></a>2.1方法重载（重要）            ~~</h3><p>定义：方法名称相同，参数类型或个数不同</p><p>方法的签名：指的是方法名与参数，<strong>返回类型不是签名的一部分</strong></p><p><strong>（im） 不能由两个名字相同，参数类型也相同却返回不同类型值得方法</strong></p><p>范例：重载方法实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        System.out.println(add(<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">        System.out.println(add(<span class="number">5</span>,<span class="number">5</span>,<span class="number">55</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y+z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开发原则：在进行方法重载得时候。要求：方法的返回值一定相同</strong></p><h2 id="2-2方法覆写（重要）"><a href="#2-2方法覆写（重要）" class="headerlink" title="2.2方法覆写（重要）"></a>2.2方法覆写（重要）</h2><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p>数组时引用类型，由内存分配问题：</p><h2 id="3-1数组的动态开辟"><a href="#3-1数组的动态开辟" class="headerlink" title="3.1数组的动态开辟"></a>3.1数组的动态开辟</h2><blockquote><ul><li>数组的动态初始化（声明并开辟数组）</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组类型[] 数组名称 = <span class="keyword">new</span> 数据类型[长度]</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当采用动态数组初始化开辟空间后，数组的每个元素都是该数据类型的默认值；</li><li>数组本身是一个有序的集合操作，所以对于数组的内容操作往往采用循环的模式完成。（数组是一个有限的集合，采用for循环）</li></ol><h2 id="3-2数组的静态开辟"><a href="#3-2数组的静态开辟" class="headerlink" title="3.2数组的静态开辟"></a>3.2数组的静态开辟</h2><p>如果希望数组在定义的同时可以设置内容，那么就采用静态初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[]数组名称 = <span class="keyword">new</span> 数据类型[]&#123;值，值，值...&#125;</span><br></pre></td></tr></table></figure><h2 id="4-对象数组"><a href="#4-对象数组" class="headerlink" title="4.对象数组"></a>4.对象数组</h2><p>对象数组往往是以引用数据类型为住的定义，例如：类，接口</p><p><strong>4.1对象数组的动态初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称[]对象数组名称 = <span class="keyword">new</span> 类名称[长度]</span><br></pre></td></tr></table></figure><p>动态初始化如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    </span><br><span class="line"><span class="keyword">private</span> String name ;     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age ;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;       </span><br><span class="line"><span class="keyword">this</span>.name = name ;         </span><br><span class="line"><span class="keyword">this</span>.age = age ;     </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name+<span class="string">",年龄："</span>+<span class="keyword">this</span>.age) ;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person[<span class="number">3</span>];<span class="comment">//动态对象数组初始化，每个元素都是其对应数据类型的默认值</span></span><br><span class="line">per[<span class="number">0</span>] = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>);</span><br><span class="line">per[<span class="number">1</span>] = <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">2</span>)；</span><br><span class="line">Per[<span class="number">2</span>] = <span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x= <span class="number">0</span> ;x&lt;per.length;x++)&#123;</span><br><span class="line">    per[x].getInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.2对象数组的静态初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名"</span>+<span class="keyword">this</span>.name+<span class="string">"年龄："</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Test&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    Person[]per = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">       <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>),</span><br><span class="line">       <span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">2</span>),</span><br><span class="line">       Person(<span class="string">"王五"</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;;<span class="comment">//对象数组静态初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x= <span class="number">0</span> ;x&lt;per.length;x++)&#123;</span><br><span class="line">    per[x].getInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Java对数组的常用操作"><a href="#5-Java对数组的常用操作" class="headerlink" title="5.Java对数组的常用操作"></a>5.Java对数组的常用操作</h2><ul><li><p>数组排序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Arrays.sort(数组名称)</span><br></pre></td></tr></table></figure><p>只要是基本数据类型的数组，sort都可以进行排序处理（升序处理）</p><p><strong>内部使用的是双轴快速排序</strong></p></li><li><p>数组的部分拷贝：指的是将一个数组的部分内容替换掉另一个数组的部分内容（连续的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(源数组名称，源数组的开始点，目标数组名称，目标数组的开始点，拷贝长度)；  </span><br><span class="line">拷贝长度：单位是元素个数</span><br></pre></td></tr></table></figure></li><li><p>数组的拷贝：返回值是一个  新数组（新开辟的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Arrays.copyOf(源数组的名称，新数组的长度)</span><br></pre></td></tr></table></figure><p><strong>Java类集框架（动态数组）就采用此方法来动态扩容</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;java再识&quot;&gt;&lt;a href=&quot;#java再识&quot; class=&quot;headerlink&quot; title=&quot;java再识&quot;&gt;&lt;/a&gt;java再识&lt;/h1&gt;&lt;p&gt;初始一见倾心，再识亦如初始。&lt;/p&gt;
&lt;p&gt;​                                                        -java再识有感~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/27/再识java-01/图片\感悟.png&quot; alt=&quot;感悟&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVASE" scheme="https://soyanga.github.io/categories/JAVASE/"/>
    
    
      <category term="JavaSE基础" scheme="https://soyanga.github.io/tags/JavaSE%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java学习笔记" scheme="https://soyanga.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Maven初识</title>
    <link href="https://soyanga.github.io/2019/01/25/Maven%E5%88%9D%E8%AF%86/"/>
    <id>https://soyanga.github.io/2019/01/25/Maven初识/</id>
    <published>2019-01-24T16:09:18.000Z</published>
    <updated>2019-01-26T12:54:25.869Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Maven简介和安装"><a href="#Maven简介和安装" class="headerlink" title="Maven简介和安装"></a>Maven简介和安装</h1><p>了解Maven是什么，作什么、且安装</p><p><a href="http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。" target="_blank" rel="noopener">http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。</a></p><p>提供了开发人员构建一个完整的生命周期框架。开发团队可以<strong>自动</strong>完成项目的基础工具建设，<strong>Maven使用标准的目录结构</strong>和<strong>默认构建生命周期</strong>（编译规则）。</p><p>在多人开发团队环境时，Maven可以设置按标标准在非常短的时间里完成配置工作。由于大部分项目的设置都非常检查，并且可以重复使用，Maven让开发人员更加轻松，同时创建报表，检查，构建和测试自动化设置。</p><p>Maven提供了开发人员的方式来管理：</p><ul><li>Builds（创建）</li><li>Documentation（文档）API文档</li><li>Reporting（报告）</li><li>Dependencies (依赖)   </li><li>SCM（软件配置管理）</li><li>Releases (发布) 版本号 Maven的中央仓库</li><li>Distribution (分布)</li><li>mailing list (邮件列表)</li></ul><p>概括来说，Maven<strong>简化和标准化项目建设过程</strong>。<strong>处理编译，分配，文档</strong>，<strong>团队协作和其他任务的无缝衔接。</strong>Maven增加可重用性并负责建立相关的任务。</p><a id="more"></a><p>学习Maven得理由是非常多</p><ul><li>主流IDE(Eclipse,IDEA,Netbean)够内置了Maven</li><li>SpringFramework已经不再提供jar得下载，直接通过Maven进行依赖下载</li><li>在github,开源社区几乎所有流行得java项目都是通过Maven进行构建管理</li><li>主流软件公司也在使用Maven</li></ul><h1 id="2安装"><a href="#2安装" class="headerlink" title="2安装"></a>2安装</h1><p>完成</p><p>mvn package 打包</p><p>mvn clean 删除target临时文件</p><p>java打包:命令    java -jar</p><p>usage: mvn[options] [&lt;goal(s)] [&lt;phase(s)</p><table><thead><tr><th>Options:</th><th></th></tr></thead><tbody><tr><td>-D , –define <arg></arg></td><td>定义系统属性</td></tr><tr><td>-f,–file <arg></arg></td><td>强制指定pom.xml文件，默认为当前目录下的pom.xml</td></tr><tr><td>-h,–help</td><td>显示帮助信息</td></tr><tr><td>-P,–activate-profiles<arg></arg></td><td>逗号分隔活动的profiles列表</td></tr><tr><td>-q,–quiet</td><td>静默退出，只输出错误信息</td></tr><tr><td>-s,–setting <arg></arg></td><td>修改用户的setting.xml文件 读取顺序是 参数指定-&gt;用户目录/.m2/settings.xml-&gt;M3_HOME/conf/settings/xml</td></tr><tr><td>-v,–version</td><td>显示版本信息</td></tr><tr><td>-X,–debug</td><td>DEBUG模式输出处理日志</td></tr></tbody></table><h1 id="Maven实战"><a href="#Maven实战" class="headerlink" title="Maven实战"></a>Maven实战</h1><blockquote><ul><li>掌握Maven项目创建</li><li>掌握使用Maven构建java项目，Web项目</li></ul></blockquote><p>1.Maven创建java普通项目</p><p>mvn -B archetype:generate </p><p>-DarchetypeGroupID=org.apache.maven.archetypes</p><p>-DarchetypeArtifactID=maven-archetype-quicksrart （模名）</p><p>-DarchetypeVersion=1.1（模板版本号） （以上为一个快速的模板） -DgroupId=com.bittech.hello  (组织ID)</p><p>-DartifactId=hello-app (项目名)   -Deversion=1.0.0 （项目版本号）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>版本号 ：主版本号.次版本号.小版本号</p><p>小版本号：修改BUG改动后的版本号。</p><p>次版本号：添加，修改功能。</p><p>次版本号：添加功能，修改功能</p><p>大版本号：产品发生很大的变化。</p><p>(项目名)artifactId.version(版本号).packaging(jar)</p><p>指令：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p>发布到中央仓库</p><p>​    申请中央仓库 search.maven.org</p><p>​    settings文件里配置仓库服务认证信息</p><p>​    pom。xml:设置发布仓库地址</p><p>​    申请发布到中央仓库。</p><p>​    申请通过后，进行构架发布</p><p>公司私服</p><p>​    申请公司私服账号</p><p>​    settings中配置仓库服务的认证信息</p><p>​    pom.xml 设置发布仓库地址</p><p>​    发布构建</p><ul><li>配置操作<ul><li>pom.xml中配置信息</li><li>settings.xml中配置信息</li></ul></li></ul><p>发布构件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><h1 id="构建可执行jar"><a href="#构建可执行jar" class="headerlink" title="构建可执行jar"></a>构建可执行jar</h1><p>可执行的jar构建是指的通过java命令来执行运行jar构建，类似windows下的exe,Linux下的sh</p><p>在我们打包输出的hello-app-1.0.0 jar通过执行java -jar hello-app-1.0.0.jar输出信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;encoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//构建可执行jar</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span> //归档 java里面的</span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.soyanga.HelloApp3<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addExtensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addExtensions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                                $&#123;project.name&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Title</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                                $&#123;project.version&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Version</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                                $&#123;project.groupId&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">Implementation-Vendor_Id</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行打包命令，然后通过jave命令执行jar</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line">java -jar target\hello-app<span class="number">-1.0</span><span class="number">.0</span>.jar</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>从上面的输出信息可以看出，我们打包输出的jar现在可以通过jave命令执行了。</p><p>2.Maven创 java Web项目</p><p>maven创建web项目和应用项目不同的是web项目的打包类型通常是war,以及web项目的目录中有webapp目录用来归档web页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.0 -DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0</span><br></pre></td></tr></table></figure><p>2.2目录信息</p><h2 id="1-Maven管理目标"><a href="#1-Maven管理目标" class="headerlink" title="1.Maven管理目标"></a>1.Maven管理目标</h2><p>Maven的管理目标是工程，它是一个软件工程管理工具。对于maven来说，一个软件工程的唯一标识是由<strong>（标识项目写者）组标号（groupId）构件【项目】编号（artifadtId）,版本信息（version）</strong>共同决定的。每个工程都有一个<strong>打包类型</strong>(packaging)，可以是<strong>jar,war,ear或者pom</strong>.<strong>打包类型决定了工程最终产物的类型</strong>，其中<strong>pom类</strong>型用于构建<strong>多模块工程</strong>。工程之间由两种关系：<strong>继承和聚合</strong></p><h2 id="1-1工程依赖关系"><a href="#1-1工程依赖关系" class="headerlink" title="1.1工程依赖关系"></a>1.1工程依赖关系</h2><p>依赖关系的管理是maven最精髓的地方。一个工程可以依赖多个其他工程，通过过工程的唯一标识</p><p>（groupId+artifactId+version）可以明确指明依赖的库及版本，而且能够处理依关系的传递。maven可以指定依赖的作用范围（scope），包括以下几种：</p><table><thead><tr><th>scope</th><th>编译阶段</th><th>测试阶段</th><th>运行</th><th>备注</th></tr></thead><tbody><tr><td>compile</td><td>v</td><td>v</td><td>v</td><td>默认scope</td></tr><tr><td>test</td><td></td><td>v</td><td></td><td>只在测试期依赖，如junit包</td></tr><tr><td>provided</td><td>v</td><td>v</td><td></td><td>运行期由服务器提供，如servlet-api包</td></tr><tr><td>runtime</td><td></td><td>v</td><td>v</td><td>编译器件不需要直接引用</td></tr><tr><td>system</td><td>v</td><td>v</td><td></td><td>编译和测试时由本机环境提供</td></tr></tbody></table><p>maven的依赖关系管理解决了一下重要问腿：</p><ul><li>工程依赖的版本管理</li><li>工程依赖种同一个工程的多版本依赖的冲突问题 -优先高版本</li><li>提供了标准的依赖关系的定义 </li></ul><h2 id="1-2工程聚合与继承"><a href="#1-2工程聚合与继承" class="headerlink" title="1.2工程聚合与继承"></a>1.2工程聚合与继承</h2><p>聚合：pom类型的工程用于构建多模块的工程，这体现了project之间的一种聚合关系：将一系列小的模块聚合成整个产品。通过聚合后的工程可以同时管理每个模块的构建、清理、文档等工作。</p><p>继承：上文提到的pom类型的工程同样可以定义多模块的工程配置信息，其中作为模块的工程的父模块被多模块继承，此时多模块就是该pom类型的工程的子工程，子工程可以复用父工程的配置信息。</p><h1 id="2-Mave核心概念"><a href="#2-Mave核心概念" class="headerlink" title="2.Mave核心概念"></a>2.Mave核心概念</h1><h1 id="2-1Pom"><a href="#2-1Pom" class="headerlink" title="2.1Pom"></a>2.1Pom</h1><p>POM是指<code>porject object Model</code>。pom是一个xml，是maven工作的基础，在执行goal时，maven会去项目的根目录下读取pom.xml获得需要得<strong>配置信息.pom</strong>文件中包含了<strong>项目得信息</strong>和m<strong>aven build项目所需的配置信息</strong>，通常有<strong>项目信息（如版本，成员）</strong>，<strong>项目的依赖</strong>，<strong>插件和goal</strong>，<strong>bulid选项等</strong>等pom是<strong>可以继承</strong>的，通常对于一个大型项目或是多个module情况，<strong>子模块的pom需要指定父模块的pom</strong>。</p><blockquote><p>通过实际操作来讲述POM组成</p></blockquote><h2 id="2-2构件（artifact）"><a href="#2-2构件（artifact）" class="headerlink" title="2.2构件（artifact）"></a>2.2构件（artifact）</h2><p>构件就是一个项目将要产生的文件，可以是jar文件，源文件，二进制文件，war文件，甚至是pom文件。每个artifact都是由<strong>groupId:artifactId:version</strong>组成的标识符唯一识别。需要被使用（依赖）的artifact都放在仓库中。</p><p>artifact的标识也成为构件的坐标，<strong>groupId通常使用创建构件的组织名称或者域名的反转</strong>（比如 org.springframework）;<strong>artifactId是构件的名称</strong>，通常在一个组织创建的构件中是唯一的（比如：spring-4.0.9.RELEASE）</p><p>同一个构件的不同版本：</p><h2 id="2-3仓库"><a href="#2-3仓库" class="headerlink" title="2.3仓库"></a>2.3仓库</h2><p>仓库主要用于获取工程依赖的其他工程的生成物，也可以来部署（deploy）maven工程的生成物。生成物包括各种打包的生成物以及pom文件。如果有必要，一个工程可以部署多个仓库</p><p>仓库可以分为本地库(local)和远程仓库(remote)。本地库通常用于本机的~/.m2/repository文件夹（可以通过settings.xml中的localRepository进行修改），远程库最常见的是maven中央库，此外也会有一些私服库用于企业内部</p><p>常用的仓库列表：</p><ul><li>Maven在线检索：<a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></li><li>中央仓库：<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>阿里：<a href="http://maven.aliyun.com/nexus/cotent/groups/public" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/cotent/groups/public</a></li><li>开源中国：<a href="http://maven.oschina.net/content/groups/public" target="_blank" rel="noopener">http://maven.oschina.net/content/groups/public</a></li><li>Spring社区：<a href="http://maven.spingframework.org/relese" target="_blank" rel="noopener">http://maven.spingframework.org/relese</a></li></ul><h2 id="2-4构件生命周期（Bulid-Liftcycle）"><a href="#2-4构件生命周期（Bulid-Liftcycle）" class="headerlink" title="2.4构件生命周期（Bulid Liftcycle）"></a>2.4构件生命周期（Bulid Liftcycle）</h2><p>maven将工程的构键过程理解为<strong>不同的生命周期和阶段</strong>。在工程的构建过程中，<strong>存在着不同的生命周期，这些生命周期互相独立，之间也没有一定的顺序关系。在每个生命周期又划分为不同的阶段。阶段之间又明确的顺序关系，同一个生命周期内的阶段必须按顺序依次执行。</strong></p><p>maven内置了三个生命周期，并为每个生命周期内置了一些阶段。下面列举出maven内置的生命周期及主要的阶段</p><p>default</p><p>clean</p><p>site</p><h2 id="2-5目标（goal）和插件（plugin）"><a href="#2-5目标（goal）和插件（plugin）" class="headerlink" title="2.5目标（goal）和插件（plugin）"></a>2.5目标（goal）和插件（plugin）</h2><p>Maven中定义的工程中定义了工程周期和阶段是抽象概念，不涉及具体的功能。具体的功能由插件（Plugin）实现目标代表了特定的任务，一个插件可以实现多个目标(Goal)</p><p>为了解插件的功能和共工程阶段，实现高度的可配置性，maven规定插件只是实现目标功能，通过配置来决定在那个阶段执行(Execution)那些目标操作。甚至把一个Goal绑定到多个Phase，以实现复用。</p><p>maven内置可一些默认的插件，并根据不同的工程<strong>packing类型</strong>在各个<strong>phase中默认绑定一些goal</strong>。下表列出default生命周期中各个阶段默认绑定的goal，其中goal按照惯例使用pluguname:goalname的方式标记。</p><p><strong>maven的插件是一种packaging</strong>类型为<strong>maven-plugin的特殊类型工程</strong>，它和普通的<strong>maven工程在使用maven的方法和特性一样的</strong>，不同之处是它<strong>服务与maven工具</strong>，可以通过<strong>常见maven插件</strong>来完成<strong>定制化的工程构件</strong>，<strong>管理的功</strong>能。</p><h1 id="3-Maven常用操作"><a href="#3-Maven常用操作" class="headerlink" title="3.Maven常用操作"></a>3.Maven常用操作</h1><ul><li>mvn clean 清理构件目录 target目录清除</li><li>mvn compile 编译源代码</li><li>mvn test-compile编译测试代码</li><li>mvn test 运行单元测试</li><li>mvn package运行打包</li><li>mvn install 运行安装，生成构建存储都本地仓库</li><li>mvn clean package 清理然后打包</li><li>mvn clean package -Dmaven.test.skip=true清理然后打包，但是跳过测试阶段</li><li>mvn site生成项目站点   3.3 /3.7有bug  使用2.2 或者3.7.1 或者使用以下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--site生成项目网站--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span>  <span class="comment">&lt;!--中文形式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- site3.3 3.7 使用一下方法site 原因这个插件更新后的的bug--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">locales</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">locales</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;Maven简介和安装&quot;&gt;&lt;a href=&quot;#Maven简介和安装&quot; class=&quot;headerlink&quot; title=&quot;Maven简介和安装&quot;&gt;&lt;/a&gt;Maven简介和安装&lt;/h1&gt;&lt;p&gt;了解Maven是什么，作什么、且安装&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://maven.apache.org/是一个综合的项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片（pom.xml）管理和项目构建，报告和文件。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提供了开发人员构建一个完整的生命周期框架。开发团队可以&lt;strong&gt;自动&lt;/strong&gt;完成项目的基础工具建设，&lt;strong&gt;Maven使用标准的目录结构&lt;/strong&gt;和&lt;strong&gt;默认构建生命周期&lt;/strong&gt;（编译规则）。&lt;/p&gt;
&lt;p&gt;在多人开发团队环境时，Maven可以设置按标标准在非常短的时间里完成配置工作。由于大部分项目的设置都非常检查，并且可以重复使用，Maven让开发人员更加轻松，同时创建报表，检查，构建和测试自动化设置。&lt;/p&gt;
&lt;p&gt;Maven提供了开发人员的方式来管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Builds（创建）&lt;/li&gt;
&lt;li&gt;Documentation（文档）API文档&lt;/li&gt;
&lt;li&gt;Reporting（报告）&lt;/li&gt;
&lt;li&gt;Dependencies (依赖)   &lt;/li&gt;
&lt;li&gt;SCM（软件配置管理）&lt;/li&gt;
&lt;li&gt;Releases (发布) 版本号 Maven的中央仓库&lt;/li&gt;
&lt;li&gt;Distribution (分布)&lt;/li&gt;
&lt;li&gt;mailing list (邮件列表)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概括来说，Maven&lt;strong&gt;简化和标准化项目建设过程&lt;/strong&gt;。&lt;strong&gt;处理编译，分配，文档&lt;/strong&gt;，&lt;strong&gt;团队协作和其他任务的无缝衔接。&lt;/strong&gt;Maven增加可重用性并负责建立相关的任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Java EE" scheme="https://soyanga.github.io/categories/Java-EE/"/>
    
    
      <category term="Maven" scheme="https://soyanga.github.io/tags/Maven/"/>
    
      <category term="代码管理工具" scheme="https://soyanga.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>网络-各种协议报头图</title>
    <link href="https://soyanga.github.io/2019/01/23/%E7%BD%91%E7%BB%9C-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4%E5%9B%BE/"/>
    <id>https://soyanga.github.io/2019/01/23/网络-各种协议报头图/</id>
    <published>2019-01-23T09:54:24.000Z</published>
    <updated>2019-01-23T10:28:29.306Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络模型（OSI-TCP-IP分层结构）"><a href="#网络模型（OSI-TCP-IP分层结构）" class="headerlink" title="网络模型（OSI/TCP/IP分层结构）"></a>网络模型（OSI/TCP/IP分层结构）</h1><p><img src="/2019/01/23/网络-各种协议报头图/OSI、TCP_IP参考模型.png" alt="OSI、TCP_IP参考模型"></p><a id="more"></a><h1 id="数据报的封装和解包分用"><a href="#数据报的封装和解包分用" class="headerlink" title="数据报的封装和解包分用"></a>数据报的封装和解包分用</h1><p><img src="/2019/01/23/网络-各种协议报头图/封装解包分用.png" alt="封装解包分用"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="DHCP-UDP-长度超过512字节使用TCP"><a href="#DHCP-UDP-长度超过512字节使用TCP" class="headerlink" title="DHCP-(UDP/长度超过512字节使用TCP)"></a>DHCP-(UDP/长度超过512字节使用TCP)</h2><p><strong>动态主机配置协议</strong></p><p>一、为主机申请IP:DHCP态主机配置协议</p><ol><li><p>假设主机最开始并没有连接网络，所以主机需要获取IP地址以及其他信息，那么就需要先使用DHCP来获取。</p></li><li><p>主机生成一个<strong>DHCP请求报文</strong>，并将这个报文放入具有<strong>目的的端口号67</strong>和<strong>源端口号68</strong>的<strong>UDP报文中。</strong></p></li><li><p>该报文文段被放入在一个具有<strong>广播IP目的地址（255.255.255.255）</strong>和<strong>源IP地址（0.0.0.0</strong>）的<strong>IP数据报中</strong></p></li><li><p>包含DHCP请求报文的IP据报则被放置在<strong>MAC帧</strong>中。这个以太网帧具有<strong>目的地址MAC地址FF.FF.FF.FF.FF.F</strong>F使该帧将广播到交换机连接的所有设备</p></li></ol><p>   <strong>以上过程就是将DHCP请求报文一层一层做封装（添加了UDP报头，IP报头字段，数据帧报头字段）</strong> </p><ol start="5"><li><p>连接在<strong>交换机的DHCP服务器</strong>收到广播帧之后，不断向上分解得到<strong>IP数据报</strong>，<strong>UDP数据段，DHCP请求报文</strong> ，之后DHCP服务器生成DHCP,ACK报文。DHCP服务器能够以<strong>CIDR块</strong>的形式（服务器IP子 按位与 服务器子网掩码获取子网地址的范围，并取地址分配给<strong>主机IP地址</strong>）</p><blockquote><p>该报文包含以下信息：</p><ul><li><p><strong>IP地址</strong></p></li><li><p><strong>DNS服务器得IP地址</strong></p></li><li><strong>默认网关路由器的IP地址（第一跳的IP地址）</strong></li><li><strong>子网块==子网掩码</strong></li></ul></blockquote></li></ol><ol start="6"><li>将ACK报文向下进行依次封装成UDP报文段，IP报文，MAC帧,这个以太网帧中<strong>目的地址为主机MAC地址</strong>，<strong>源地址为路由器中的DHCP服务器地址</strong>。</li></ol><p>   <strong>得到的MAC帧进行解包，分用处理，然后应用程DHCP服务器给出响应ACK报文再次向下封装发送回个主机，其中包含的内容如上。</strong> </p><ol start="7"><li><p>包含DHCP ACK报文的<strong>MAC帧</strong>由路由器发送给交换机。交换机是自学习的，并且先前从主机收到的包含DHCP请求的MAC帧，所以交换机知交换机表中查询到，该向那个接口发送该MAC帧。</p></li><li><p>主机接收到包含DHCP的MAC帧，从连路层层层向上解包分用，IP报文，UDP报文段，从UDP报文段中抽取DHCP ACK报文。此时主机的DHCP客户端记录其中的IP地址和DNS服务器的IP地址，在主机的<strong>IP转发表(路由表)</strong>中安装默认网关地址。此时，主机已经初始化所有网络组件，并且准备开始处理web页面的获取。</p></li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h2 id="HTTP报头"><a href="#HTTP报头" class="headerlink" title="HTTP报头"></a>HTTP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><ul><li></li><li>URL</li></ul><p><img src="/2019/01/23/网络-各种协议报头图/URL-网址.png" alt="URL-网址"></p><h1 id="传出层"><a href="#传出层" class="headerlink" title="传出层"></a>传出层</h1><h2 id="UDP报头"><a href="#UDP报头" class="headerlink" title="UDP报头"></a>UDP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/UDP报文图.png" alt="UDP报文图"></p><h2 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/TCP协议格式.png" alt="TCP协议格式"></p><ul><li>面向连接过程中为什么要3次握手？</li></ul><ul><li>断开连接时要四次挥手为什么要四次挥手？</li></ul><ul><li>4次挥手主动断开的一方要进入TIME_WAIT为什么要进入TIME_WAIT</li></ul><blockquote><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态</li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值</li></ul></li></ul></blockquote><ul><li>TCP异常问题的解答，客户端进程结束，机器重启，机器断电/网络断开 1</li></ul><blockquote><p>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p></blockquote><blockquote><p>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p></blockquote><ul><li><p>收发数据时，对方接收缓冲区已经满了，我们无法发送数据。那么此时我们什么时候发？此时怎么知道对方的接收窗口已经有数据更新了？</p><blockquote><p> 如果接收端缓冲区满了, 就会将窗⼝大小置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</p></blockquote></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP报头"><a href="#IP报头" class="headerlink" title="IP报头"></a>IP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/IP协议头格式.png" alt="IP协议头格式"></p><ul><li>IP分片，重组</li></ul><ul><li>解决IP地址数量限制</li></ul><ul><li>路由</li></ul><h2 id="ICMP报头"><a href="#ICMP报头" class="headerlink" title="ICMP报头"></a>ICMP报头</h2><p><img src="/2019/01/23/网络-各种协议报头图/ICMP报文格式.png" alt="ICMP报文格式"></p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><img src="/2019/01/23/网络-各种协议报头图/ARP数据报格式.png" alt="ARP数据报格式"></p><h2 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h2><p><img src="/2019/01/23/网络-各种协议报头图/以太网网络帧格式.png" alt="以太网网络帧格式"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;网络模型（OSI-TCP-IP分层结构）&quot;&gt;&lt;a href=&quot;#网络模型（OSI-TCP-IP分层结构）&quot; class=&quot;headerlink&quot; title=&quot;网络模型（OSI/TCP/IP分层结构）&quot;&gt;&lt;/a&gt;网络模型（OSI/TCP/IP分层结构）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/网络-各种协议报头图/OSI、TCP_IP参考模型.png&quot; alt=&quot;OSI、TCP_IP参考模型&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="图解协议报头" scheme="https://soyanga.github.io/tags/%E5%9B%BE%E8%A7%A3%E5%8D%8F%E8%AE%AE%E6%8A%A5%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>网络重点知识总结</title>
    <link href="https://soyanga.github.io/2019/01/23/%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://soyanga.github.io/2019/01/23/网络重点知识总结/</id>
    <published>2019-01-23T09:41:22.000Z</published>
    <updated>2019-01-23T09:42:56.128Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;h2 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据&lt;/li&gt;
&lt;li&gt;以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；&lt;/li&gt;
&lt;li&gt;以太网帧格式&lt;/li&gt;
&lt;li&gt;理解MAC地址&lt;/li&gt;
&lt;li&gt;理解ARP协议&lt;/li&gt;
&lt;li&gt;理解MTU&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;网络层的作用：在复杂的网络环境中确定一个合适的路径&lt;/li&gt;
&lt;li&gt;理解IP地址，理解IP地址和MAC地址的区别&lt;/li&gt;
&lt;li&gt;理解IP协议格式&lt;/li&gt;
&lt;li&gt;了解网段划分方法&lt;/li&gt;
&lt;li&gt;理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP&lt;/li&gt;
&lt;li&gt;理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地&lt;/li&gt;
&lt;li&gt;理解IP数据包分包原因&lt;/li&gt;
&lt;li&gt;了解ICMP协议&lt;/li&gt;
&lt;li&gt;了解NAT设备的工作原理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;传输层的作用：负责数据能够从发送断传输接收端&lt;/li&gt;
&lt;li&gt;理解端口号的概念&lt;/li&gt;
&lt;li&gt;认识UDP协议，了解UDP协议的特点&lt;/li&gt;
&lt;li&gt;认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变&lt;/li&gt;
&lt;li&gt;掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性&lt;/li&gt;
&lt;li&gt;理解TCP面向字节流，理解粘包问题和解决方案&lt;/li&gt;
&lt;li&gt;能够基于UDP实现可靠传输&lt;/li&gt;
&lt;li&gt;理解MTU对UDP/TCP的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;应用层的作用：满足我们日常需求的网络程序，都是再应用层&lt;/li&gt;
&lt;li&gt;能够根据自己得需求，设计应用层协议&lt;/li&gt;
&lt;li&gt;了解HTTP协议&lt;/li&gt;
&lt;li&gt;理解DNS的原理和工作流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络-网络层ICMP协议</title>
    <link href="https://soyanga.github.io/2019/01/22/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82ICMP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://soyanga.github.io/2019/01/22/网络-网络层ICMP协议/</id>
    <published>2019-01-22T08:55:59.000Z</published>
    <updated>2019-01-23T09:43:54.167Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p><strong>网络层协议！！！！</strong></p><p>适用于：一个新搭建的好的网络，往往需要先进行一个简单的测试，来验证网络是否畅通；但是IP协议并不提供可靠传输。如果丢包了，IP协议并不能通知传输层是否丢包以及丢包的原因。</p><h2 id="ICMP功能"><a href="#ICMP功能" class="headerlink" title="ICMP功能"></a>ICMP功能</h2><p>ICMP正是提供这种功能的协议；ICMP协议主要功能如下：</p><blockquote><ul><li>确认IP包是否成功到达目标地址</li><li>通知在发送过程中IP包被丢弃的原因</li><li>ICMP也是基于IP协议工作的。但是他并不是提供传输层的功能，所以ICMP协议是网络层协议</li><li>ICMP只能搭载IPv4使用，如果是IPb6的情况要使用的是ICMPv6;</li></ul></blockquote><h2 id="ICMP工作流程"><a href="#ICMP工作流程" class="headerlink" title="ICMP工作流程"></a>ICMP工作流程</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP工作流程.png" alt="ICMP工作流程"></p><h2 id="ICMP报文格式"><a href="#ICMP报文格式" class="headerlink" title="ICMP报文格式"></a>ICMP报文格式</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ICMP报文格式.png" alt="ICMP报文格式"></p><a id="more"></a><p>ICMP大概分为两类报文：</p><blockquote><ul><li>一类是通知出错原因</li><li>一类是用于诊断查询</li></ul></blockquote><h3 id="ICMP报文类型字段"><a href="#ICMP报文类型字段" class="headerlink" title="ICMP报文类型字段"></a>ICMP报文类型字段</h3><table><thead><tr><th>类型（十进制）</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>回送应答</td></tr><tr><td>3</td><td>目标不可达</td></tr><tr><td>4</td><td>原点抑制</td></tr><tr><td>5</td><td>重定向或改变路由</td></tr><tr><td>8</td><td>回送请求</td></tr><tr><td>9</td><td>路由器公告</td></tr><tr><td>10</td><td>路由器请求</td></tr><tr><td>11</td><td>超时</td></tr><tr><td>17</td><td>地址子网请求</td></tr><tr><td>18</td><td>地址子网应答</td></tr></tbody></table><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/ping实际操作.png" alt="ping实际操作"></p><blockquote><ul><li>此处的ping连接的是一个域名，而不是一个url，一个域名可以通过DNS解析成IP地址</li><li>ping命令不光校验网络的连通性，同时也会统计响应时间和TTL（IP包中的Time TO Live,生存周周期（IP层跳跳次数））</li><li>ping命令会先发送一个ICMP回送请求给对端，即报文的类型填写的是8</li><li>‘对端接收后会返回一个ICMP 回送应答。</li></ul></blockquote><p>ping命令基于ICMP协议是是实现， 是在网络层. 而端口号, 是传输层的内容. 在ICMP中根本就不关注端口号这样的信息。</p><h2 id="traceroute命令"><a href="#traceroute命令" class="headerlink" title="traceroute命令"></a>traceroute命令</h2><p><img src="/2019/01/22/网络-网络层ICMP协议/traceroute实际操作.png" alt="traceroute实际操作"></p><p>能够打印出可执行程序主机，一直到目标主机之前经历了多少路由器。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h1 id=&quot;ICMP协议&quot;&gt;&lt;a href=&quot;#ICMP协议&quot; class=&quot;headerlink&quot; title=&quot;ICMP协议&quot;&gt;&lt;/a&gt;ICMP协议&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;网络层协议！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;适用于：一个新搭建的好的网络，往往需要先进行一个简单的测试，来验证网络是否畅通；但是IP协议并不提供可靠传输。如果丢包了，IP协议并不能通知传输层是否丢包以及丢包的原因。&lt;/p&gt;
&lt;h2 id=&quot;ICMP功能&quot;&gt;&lt;a href=&quot;#ICMP功能&quot; class=&quot;headerlink&quot; title=&quot;ICMP功能&quot;&gt;&lt;/a&gt;ICMP功能&lt;/h2&gt;&lt;p&gt;ICMP正是提供这种功能的协议；ICMP协议主要功能如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;确认IP包是否成功到达目标地址&lt;/li&gt;
&lt;li&gt;通知在发送过程中IP包被丢弃的原因&lt;/li&gt;
&lt;li&gt;ICMP也是基于IP协议工作的。但是他并不是提供传输层的功能，所以ICMP协议是网络层协议&lt;/li&gt;
&lt;li&gt;ICMP只能搭载IPv4使用，如果是IPb6的情况要使用的是ICMPv6;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ICMP工作流程&quot;&gt;&lt;a href=&quot;#ICMP工作流程&quot; class=&quot;headerlink&quot; title=&quot;ICMP工作流程&quot;&gt;&lt;/a&gt;ICMP工作流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/网络-网络层ICMP协议/ICMP工作流程.png&quot; alt=&quot;ICMP工作流程&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ICMP报文格式&quot;&gt;&lt;a href=&quot;#ICMP报文格式&quot; class=&quot;headerlink&quot; title=&quot;ICMP报文格式&quot;&gt;&lt;/a&gt;ICMP报文格式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/网络-网络层ICMP协议/ICMP报文格式.png&quot; alt=&quot;ICMP报文格式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ICMP协议" scheme="https://soyanga.github.io/tags/ICMP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>其他重要协议和技术</title>
    <link href="https://soyanga.github.io/2019/01/22/%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8A%80%E6%9C%AF/"/>
    <id>https://soyanga.github.io/2019/01/22/其他重要协议和技术/</id>
    <published>2019-01-21T16:20:17.000Z</published>
    <updated>2019-01-21T16:23:49.299Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h1><p>应用层协议-DNS是一整套从域名映射到IP的系统</p><h2 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h2><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h2 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h2><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><a id="more"></a><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后，发生的事情"><a href="#浏览器中输入URL之后，发生的事情" class="headerlink" title="浏览器中输入URL之后，发生的事情"></a>浏览器中输入URL之后，发生的事情</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li>DNS域名解析</li><li>所以就要先建立连接（三次握手）</li><li>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h2 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h2><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h2 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h2><p>欠一张转换图</p><p>NAPT</p><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h2 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h2><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在热备, 所有的TCP连接也都会断开</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;DNS-Domain-Name-System&quot;&gt;&lt;a href=&quot;#DNS-Domain-Name-System&quot; class=&quot;headerlink&quot; title=&quot;DNS(Domain Name System)&quot;&gt;&lt;/a&gt;DNS(Domain Name System)&lt;/h1&gt;&lt;p&gt;应用层协议-DNS是一整套从域名映射到IP的系统&lt;/p&gt;
&lt;h2 id=&quot;DNS背景&quot;&gt;&lt;a href=&quot;#DNS背景&quot; class=&quot;headerlink&quot; title=&quot;DNS背景&quot;&gt;&lt;/a&gt;DNS背景&lt;/h2&gt;&lt;p&gt;TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是&lt;strong&gt;IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hosts文件来描述主机名和IP地址的关系&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;DNS服务器&quot;&gt;&lt;a href=&quot;#DNS服务器&quot; class=&quot;headerlink&quot; title=&quot;DNS服务器&quot;&gt;&lt;/a&gt;DNS服务器&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.&lt;/li&gt;
&lt;li&gt;如果新计算机接入网络, 将这个信息注册到数据库中; &lt;/li&gt;
&lt;li&gt;⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;域名简介&quot;&gt;&lt;a href=&quot;#域名简介&quot; class=&quot;headerlink&quot; title=&quot;域名简介&quot;&gt;&lt;/a&gt;域名简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;主域名&lt;/strong&gt;是用来&lt;strong&gt;识别主机名称和主机所属的组织机构的一种分层结构的名称&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;域名使用.连接&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. &lt;/li&gt;
&lt;li&gt;baidu: 二级域名, 公司名. &lt;/li&gt;
&lt;li&gt;www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/&lt;a href=&quot;http://www.xxx.xxx这样&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.xxx.xxx这样&lt;/a&gt; 的格式, 来表示主机支持的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="DNS协议" scheme="https://soyanga.github.io/tags/DNS%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="NAT技术" scheme="https://soyanga.github.io/tags/NAT%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络链路层ARP协议</title>
    <link href="https://soyanga.github.io/2019/01/22/%E7%BD%91%E7%BB%9C%E9%93%BE%E8%B7%AF%E5%B1%82ARP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://soyanga.github.io/2019/01/22/网络链路层ARP协议/</id>
    <published>2019-01-21T16:09:52.000Z</published>
    <updated>2019-01-21T16:12:28.302Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/22/网络链路层ARP协议/ARP缓存表.png" alt="ARP缓存表"></p><a id="more"></a><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/22/网络链路层ARP协议/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;ARP协议&quot;&gt;&lt;a href=&quot;#ARP协议&quot; class=&quot;headerlink&quot; title=&quot;ARP协议&quot;&gt;&lt;/a&gt;ARP协议&lt;/h2&gt;&lt;p&gt;虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！&lt;strong&gt;而是一个介于数据链路层和网络层之间的协议；地址解析协议&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;ARP协议的作用&quot;&gt;&lt;a href=&quot;#ARP协议的作用&quot; class=&quot;headerlink&quot; title=&quot;ARP协议的作用&quot;&gt;&lt;/a&gt;ARP协议的作用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ARP协议建立了主机IP地址和MAC地址的映射关系。&lt;/strong&gt; :couple_with_heart:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；&lt;/li&gt;
&lt;li&gt;数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;因此在通讯前必须获得目的主机的硬件地址；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ARP协议的工作流程&quot;&gt;&lt;a href=&quot;#ARP协议的工作流程&quot; class=&quot;headerlink&quot; title=&quot;ARP协议的工作流程&quot;&gt;&lt;/a&gt;ARP协议的工作流程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/网络链路层ARP协议/ARP通信流程.png&quot; alt=&quot;ARP通信流程&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段&lt;strong&gt;(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;&lt;/li&gt;
&lt;li&gt;每台主机都&lt;strong&gt;维护一个ARP缓存表&lt;/strong&gt;,可以用&lt;code&gt;arp -a&lt;/code&gt;命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/22/网络链路层ARP协议/ARP缓存表.png&quot; alt=&quot;ARP缓存表&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ARP协议" scheme="https://soyanga.github.io/tags/ARP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>网络-数据链路层以太网协议</title>
    <link href="https://soyanga.github.io/2019/01/22/%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
    <id>https://soyanga.github.io/2019/01/22/网络-数据链路层以太网协议/</id>
    <published>2019-01-21T16:00:43.000Z</published>
    <updated>2019-01-21T16:03:15.252Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]</p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h4 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h4><p><img src="/2019/01/22/网络-数据链路层以太网协议/以太网网络帧格式.png" alt="以太网网络帧格式"></p><a id="more"></a><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比地址和ip地址的"><a href="#对比地址和ip地址的" class="headerlink" title="对比地址和ip地址的"></a>对比地址和ip地址的</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP</p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</li><li>TCP在建立连接的过程中, 通信双方会进行MSS协商. </li><li>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </li><li><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></li></ul><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p><ul><li>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h1&gt;&lt;p&gt;用于两个设备（同一种数据节点）之间进行传递&lt;/p&gt;
&lt;h3 id=&quot;对比理解“数据链路层”和“网络层”&quot;&gt;&lt;a href=&quot;#对比理解“数据链路层”和“网络层”&quot; class=&quot;headerlink&quot; title=&quot;对比理解“数据链路层”和“网络层”&quot;&gt;&lt;/a&gt;对比理解“数据链路层”和“网络层”&lt;/h3&gt;&lt;p&gt;[唐僧例子之白龙马]&lt;/p&gt;
&lt;h2 id=&quot;以太网&quot;&gt;&lt;a href=&quot;#以太网&quot; class=&quot;headerlink&quot; title=&quot;以太网&quot;&gt;&lt;/a&gt;以太网&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图&lt;/li&gt;
&lt;li&gt;例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；&lt;/li&gt;
&lt;li&gt;以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;以太网帧格式&quot;&gt;&lt;a href=&quot;#以太网帧格式&quot; class=&quot;headerlink&quot; title=&quot;以太网帧格式&quot;&gt;&lt;/a&gt;以太网帧格式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/22/网络-数据链路层以太网协议/以太网网络帧格式.png&quot; alt=&quot;以太网网络帧格式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="以太网协议" scheme="https://soyanga.github.io/tags/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>网络-网络层IP协议</title>
    <link href="https://soyanga.github.io/2019/01/21/%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82IP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://soyanga.github.io/2019/01/21/网络-网络层IP协议/</id>
    <published>2019-01-21T15:51:46.000Z</published>
    <updated>2019-01-22T11:33:02.701Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/21/网络-网络层IP协议/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/21/网络-网络层IP协议/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</li><li><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做<strong>DHCP</strong>，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/21/网络-网络层IP协议/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;在复杂的网络环境中&lt;strong&gt;确定一个合适的路径&lt;/strong&gt;，路径选择能力。&lt;/p&gt;
&lt;h2 id=&quot;IP协议&quot;&gt;&lt;a href=&quot;#IP协议&quot; class=&quot;headerlink&quot; title=&quot;IP协议&quot;&gt;&lt;/a&gt;IP协议&lt;/h2&gt;&lt;p&gt;IP地址是&lt;strong&gt;路由选择的作用&lt;/strong&gt;，怎么走就是下层协议决定。&lt;/p&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;主机：配有IP地址，但是不进行路由控制的设备；&lt;/p&gt;
&lt;p&gt;路由器：配有IP地址，又能进行路由控制；&lt;/p&gt;
&lt;p&gt;节点：主机和路由器的统称。&lt;/p&gt;
&lt;h3 id=&quot;IP协议头格式&quot;&gt;&lt;a href=&quot;#IP协议头格式&quot; class=&quot;headerlink&quot; title=&quot;IP协议头格式&quot;&gt;&lt;/a&gt;IP协议头格式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/21/网络-网络层IP协议/IP协议头格式.png&quot; alt=&quot;IP协议头格式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4位版本号（version）：&lt;/strong&gt;只当IP协议的版本，对于IPv4来说就是4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4位头部长度（hearer length）:&lt;/strong&gt;以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8位服务类型(Type Of Servier):&lt;/strong&gt; 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位总长度（total length）:I&lt;/strong&gt;P数据报整体占多少个字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位标识（id）:&lt;/strong&gt;唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3位标志位字段：&lt;/strong&gt;第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过&lt;strong&gt;MTU&lt;/strong&gt;, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;13位分片偏移(framegament offset):&lt;/strong&gt; 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8位生存时间(Time To Live, TTL):&lt;/strong&gt; 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8位协议:&lt;/strong&gt; 表示上层协议的类型 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位头部校验和:&lt;/strong&gt; 使用CRC进行校验, 来鉴别头部是否损坏.。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;32位源地址和32位目标地址:&lt;/strong&gt; 表示发送端和接收端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选项字段(不定⻓长, 最多40字节):&lt;/strong&gt; 略 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="IP协议" scheme="https://soyanga.github.io/tags/IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>网络-TCP扩展</title>
    <link href="https://soyanga.github.io/2019/01/20/%E7%BD%91%E7%BB%9C-TCP%E6%89%A9%E5%B1%95/"/>
    <id>https://soyanga.github.io/2019/01/20/网络-TCP扩展/</id>
    <published>2019-01-20T15:35:13.000Z</published>
    <updated>2019-01-20T15:55:58.876Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h2><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><a id="more"></a><h2 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h2><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区⾥等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><p>粘包问题</p><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h2 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h2><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;用UDP实现可靠传输（经典面试题）&quot;&gt;&lt;a href=&quot;#用UDP实现可靠传输（经典面试题）&quot; class=&quot;headerlink&quot; title=&quot;用UDP实现可靠传输（经典面试题）&quot;&gt;&lt;/a&gt;用UDP实现可靠传输（经典面试题）&lt;/h2&gt;&lt;p&gt;参考TCP的可靠性机制，在应用层实现类似的逻辑&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;引入确认应答，确保对端收到数据（可靠性）&lt;/li&gt;
&lt;li&gt;引入序列号，保证顺序顺序&lt;/li&gt;
&lt;li&gt;引入超时重传，如果隔一段时间没有应答，就重发数据；&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP/UDP" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/TCP-UDP/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP" scheme="https://soyanga.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>网络-传输层TCP协议(2)</title>
    <link href="https://soyanga.github.io/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(2)/"/>
    <id>https://soyanga.github.io/2019/01/20/网络-传输层TCP协议(2)/</id>
    <published>2019-01-20T15:34:43.000Z</published>
    <updated>2019-01-20T15:57:16.868Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h1><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/TCP连接流程图.png" alt="TCP连接流程图"></p><h2 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h2><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><a id="more"></a><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h2 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h2><p><strong>在什么状态干什么事</strong></p><h3 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h3><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h3 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h3><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很⼤数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><p>确认应答机制（ACK）机制详解</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h3 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h3><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太端，就可能影响整提的重传效率</p><p><strong>TCP为了保证无论在任何环境下都能⽐较⾼性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li><em>如果仍然得不到应答, 等待 4</em>500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h3 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h3><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/20/网络-传输层TCP协议(2)/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和特高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，超时重传虽然慢了点，但是可以确保有效性，可靠性。</p><p>流量控制（Flow Control）</p><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/20/网络-传输层TCP协议(2)/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，谈谈接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/20/网络-传输层TCP协议(2)/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增⻓长的那么快, 因此不能使拥塞窗⼝口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, ⽽而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h1 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h1><h2 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h2><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><p>提高性能</p><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h2 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h2><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h2 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h2><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;连接管理机制&quot;&gt;&lt;a href=&quot;#连接管理机制&quot; class=&quot;headerlink&quot; title=&quot;连接管理机制&quot;&gt;&lt;/a&gt;连接管理机制&lt;/h1&gt;&lt;p&gt;正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/20/网络-传输层TCP协议(2)/TCP连接流程图.png&quot; alt=&quot;TCP连接流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TCP连接断开中服务器与客户端状态变化&quot;&gt;&lt;a href=&quot;#TCP连接断开中服务器与客户端状态变化&quot; class=&quot;headerlink&quot; title=&quot;TCP连接断开中服务器与客户端状态变化&quot;&gt;&lt;/a&gt;TCP连接断开中服务器与客户端状态变化&lt;/h2&gt;&lt;p&gt;服务端状态转变：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;strong&gt;CLOSED-&amp;gt;LISTEN&lt;/strong&gt;】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;LISTEN -&amp;gt; SYN_RCVD&lt;/strong&gt;] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;SYN_RCVD -&amp;gt; ESTABLISHED&lt;/strong&gt;] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,&lt;br&gt;可以进⾏读写数据了 。&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;ESTABLISHED -&amp;gt; CLOSE_WAIT&lt;/strong&gt;] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,&lt;br&gt;服务器返回确认报⽂段并进⼊CLOSE_WAIT 。&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;CLOSE_WAIT -&amp;gt; LAST_ACK&lt;/strong&gt;] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的&lt;br&gt;数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,&lt;br&gt;等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;LAST_ACK -&amp;gt; CLOSED&lt;/strong&gt;] 服务器收到了对FIN的ACK, 彻底关闭连接 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端状态转变：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;strong&gt;CLOSED -&amp;gt; SYN_SENT&lt;/strong&gt;] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;SYN_SENT -&amp;gt; ESTABLISHED&lt;/strong&gt;] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 &lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;ESTABLISHED -&amp;gt; FIN_WAIT_1&lt;/strong&gt;] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; &lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;FIN_WAIT_1 -&amp;gt; FIN_WAIT_2&lt;/strong&gt;] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始&lt;br&gt;等待服务器的结束报⽂段 ;&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;FIN_WAIT_2 -&amp;gt; TIME_WAIT&lt;/strong&gt;] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出&lt;br&gt;LAST_ACK ;&lt;/li&gt;
&lt;li&gt;[&lt;strong&gt;TIME_WAIT -&amp;gt; CLOSED&lt;/strong&gt;] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP/UDP" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/TCP-UDP/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP" scheme="https://soyanga.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>网络-传输层TCP协议(1)</title>
    <link href="https://soyanga.github.io/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82TCP%E5%8D%8F%E8%AE%AE(1)/"/>
    <id>https://soyanga.github.io/2019/01/20/网络-传输层TCP协议(1)/</id>
    <published>2019-01-20T06:49:07.000Z</published>
    <updated>2019-01-20T10:23:04.717Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/20/网络-传输层TCP协议(1)/TCP协议格式.png" alt="TCP协议格式"></p><a id="more"></a><ul><li>源/目的端口号：表示数据从那个进程来，到那个进程去</li><li>32位序号/32位确认号：如下详谈超时重插，去重，数据的顺序到达</li><li>4位TCP报头长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li>6位标志位<ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li>16位窗口大小：：如下详谈流量控制</li><li>16位校验和: 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li>16位紧急指针: 标识哪部分数据是<strong>紧急数据</strong>;</li><li>40字节头部选项: 暂时忽略; </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经建立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;TCP协议&quot;&gt;&lt;a href=&quot;#TCP协议&quot; class=&quot;headerlink&quot; title=&quot;TCP协议&quot;&gt;&lt;/a&gt;TCP协议&lt;/h2&gt;&lt;p&gt;TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/20/网络-传输层TCP协议(1)/TCP协议格式.png&quot; alt=&quot;TCP协议格式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP协议" scheme="https://soyanga.github.io/tags/TCP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>‘网络-传输层UDP协议协议‘</title>
    <link href="https://soyanga.github.io/2019/01/20/%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82UDP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://soyanga.github.io/2019/01/20/网络-传输层UDP协议/</id>
    <published>2019-01-20T06:48:48.000Z</published>
    <updated>2019-01-20T06:55:53.017Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><p>UDP协议端格式:</p><p><img src="/2019/01/20/网络-传输层UDP协议/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h2 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h2><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h2 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h2><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h2 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h2><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h2 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h2><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li>DNS: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;UDP协议&quot;&gt;&lt;a href=&quot;#UDP协议&quot; class=&quot;headerlink&quot; title=&quot;UDP协议&quot;&gt;&lt;/a&gt;UDP协议&lt;/h1&gt;&lt;p&gt;UDP协议端格式:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/20/网络-传输层UDP协议/UDP报文图.png&quot; alt=&quot;UDP报文图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; &lt;/li&gt;
&lt;li&gt;如果校验和出错, 就会直接丢弃;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
      <category term="UDP协议" scheme="https://soyanga.github.io/tags/UDP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>网络基础(2)</title>
    <link href="https://soyanga.github.io/2019/01/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-2/"/>
    <id>https://soyanga.github.io/2019/01/18/网络基础-2/</id>
    <published>2019-01-18T14:59:19.000Z</published>
    <updated>2019-01-23T09:33:03.567Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络基础2"><a href="#网络基础2" class="headerlink" title="网络基础2"></a>网络基础2</h1><ul><li><p>理解应⽤用层的作用, 初识HTTP协议 </p></li><li><p>理解传输层的作用, 深入理解TCP的各项特性和机制 </p></li><li><p>理解网络层的作用, 深入理解IP协议的基本原理 </p></li><li><p>理解数据链路层的作⽤用, 了解ARP协议 </p></li><li><p>对整个TCP/IP协议有系统的理解 </p></li><li><p>对TCP/IP协议体系下的其他重要协议和技术有一定的了解 </p></li><li><p>学会使⽤用一些分析网络问题的工具和方法</p><p>注意!! 注意!! 注意!! </p></li><li><p>网络编程的理论基础. </p></li><li><p>是一个服务器开发程序员的重要基本功.</p></li></ul><p>  自顶向下讲解：</p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>我们写一个解决我们实际问题, 满足我们日常需求的网络程序, 都是在应用层。</p><h2 id="再谈“协议”"><a href="#再谈“协议”" class="headerlink" title="再谈“协议”"></a>再谈“协议”</h2><p>协议是一种 “约定”. socket api的接口, 在读写数据时, 都是按 “字符串” 的方式来发送接收的。我们约定客户端先发送，服务器先接收。是一种客户端与服务器之间的约定。</p><h2 id="网络版计算器"><a href="#网络版计算器" class="headerlink" title="网络版计算器"></a>网络版计算器</h2><p>我们需要实现⼀个服务器版的加法器. 我们需要客户端把要计算的两个加数发过去, 然后由服务器进行计算, 最后再把结果返回给客户端. </p><p>约定方案一：<strong>约定指定格式 </strong> </p><ul><li>客户端发送一个形如”1+1”的字符串;</li><li>这个字符串中有两个操作数, 都是整形; </li><li>两个数字之间会有一个字符是运算符, 运算符只能是 + ; </li><li>数字和运算符之间没有空格;</li></ul><p>约定方案二：<strong>TCP:面向字节流</strong>  :raising_hand_man:</p><ul><li>定义结构体来表⽰示我们需要交互的信息; </li><li>发送数据时将这个结构体按照一个规则转换成字符串, 接收到数据的时候再按照相同的规则把字符串转化回结构体; </li><li>这个过程叫做 “序列化” 和 “反序列化”</li></ul><p>序列化反序列化：JOSN /XML  </p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>HTTP（超文本传输协议）</p><p>认识URL–网址</p><p><img src="/2019/01/18/网络基础-2/URL-网址.png" alt="URL-网址"></p><h2 id="urlencode和urldecode"><a href="#urlencode和urldecode" class="headerlink" title="urlencode和urldecode"></a>urlencode和urldecode</h2><p>象/？：等这样的字符在URL中是特殊意义理解，因此该字符不能随意出现。假如要出现必须对带有这些特殊字符进行转义。</p><p>转义规则如下：</p><p>讲需要转码的字符串为16进制，然后从右象左，取4位（不足4位直接处理），每2位做一位，前面加上%，编码最后变成 <code>%XY</code>格式</p><p>例如：</p><p><img src="/2019/01/18/网络基础-2/1547866578248.png" alt="1547866578248"></p><p>？后面的参数将我搜索的内容”<code>C++</code>“中的”<code>+</code>“转变为了”<code>%2B</code>“</p><p>urldecode就是 urlencode的逆过程；可以进行反转义    </p><p><a href="http://tool.chinaz.com/Tools/urlencode.aspx" target="_blank" rel="noopener">URL解码工具</a></p><a id="more"></a><h2 id="HTTP协议格式"><a href="#HTTP协议格式" class="headerlink" title="HTTP协议格式"></a>HTTP协议格式</h2><p>HTTP请求</p><p><img src="/2019/01/18/网络基础-2/HTTP请求响应的过程.png" alt="HTTP请求响应的过程"></p><blockquote><ul><li>首行：[方法]+[URL]+[版本]</li><li>Header:请求的属性，冒号分割的键值对；每组属性之间使用\n分割，遇到空行表示Header部分结束</li><li>Body:空行后面的内容都是Body，Body允许为空字符串，如果Body存在，则则在Header中会有一个 <code>Content-Length</code>属性来标识<strong>Body的长度</strong>;  非GET方法正文部分是可以忽略的。</li></ul></blockquote><p>HTTP是基于<strong>请求响应式</strong>：</p><ul><li>短连接：客户端一请求，服务器一响应，服务器随即断开连接。</li><li>长连接：HTTP1.1优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接</li></ul><p>打开一个网页的过程（简要过程）</p><p>一张网页上有多个元素组成，一次次http请求只能上传一个元素的化（短连接），要看到一个·完整的网页。我们可能要经历多次请求，网页，显示过程-[文字，图片，样式，渲染…….]，效率太低。HTTP1.1以后对其进行了优化，基于一条连接可以把报文全部取过来，Contention: keep-Alive 支持长连接。</p><p>HTTP协议底层是基于TCP协议的：HTTP协议不用关心丢包乱序问题。（应用层）</p><p>实践</p><p>Linux下使用telent工具：远程登陆某一台主机上的一个服务。</p><p>请求：</p><p><img src="/2019/01/18/网络基础-2/HTTP请求实践.png" alt="请求"></p><p>响应：</p><p><img src="/2019/01/18/网络基础-2/HTTP响应实践.png" alt="HTTP响应实践"></p><h2 id="HTTP常见方法"><a href="#HTTP常见方法" class="headerlink" title="HTTP常见方法"></a>HTTP常见方法</h2><table><thead><tr><th>方法</th><th>说明</th><th>支持HTTP协议版本</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>1.0 、1.1</td></tr><tr><td>POST</td><td>传输实体主体</td><td>1.0 、1.1</td></tr><tr><td>PUT</td><td>传输文件</td><td>1.0 、1.1</td></tr><tr><td>HEAD</td><td>获得报文首部</td><td>1.0 、1.1</td></tr><tr><td>DELETE</td><td>删除文件</td><td>1.0 、1.1</td></tr><tr><td>OPTIONS</td><td>询问支持的方法</td><td>1.1</td></tr><tr><td>TRACE</td><td>追踪路径</td><td>1.1</td></tr><tr><td>CONNECT</td><td>要求用隧道协议连接代理</td><td>1.1</td></tr><tr><td>LINK</td><td>建立和资源之间的联系</td><td>1.0</td></tr><tr><td>UNLINK</td><td>断开连接关系</td><td>1.0</td></tr></tbody></table><p>注：<strong>最常用的方法就是GET和POST方法。</strong> </p><p>某些版本没有某些方法是因为该版本处于安全考虑，不支持一些不安全方法。</p><h2 id="HTTP的状态码"><a href="#HTTP的状态码" class="headerlink" title="HTTP的状态码"></a>HTTP的状态码</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>informational(信息状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success(成功状态吗)</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirectio(重定向状态码)</td><td>需要进行附加操作已完成请求</td></tr><tr><td>4XX</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>最常⻅见的状态码, ⽐比如 200(OK), 404(Not Found), 403(Forbidden), 302(Redirect, 重定向), 504(Bad Gateway)</p><h4 id="重定向详解："><a href="#重定向详解：" class="headerlink" title="重定向详解："></a>重定向详解：</h4><p>3XX—Redirectio(重定向状态码)—重定向：</p><p>包头当中会响应一个叫location的字段，一旦浏览器收到这个报文，浏览器会二次发起一次请求。（页面跳转）</p><p><strong>重定向分为：</strong></p><ul><li>临时性重定向​ ​ 饭店临时搬家，贴一张告示临时迁至XXX，过一段时间就回来。先去东门后去西门，过一段时间回来东门:man_cook:  （每次吃饭要先去东门（源网站处，没搬回来），然后再去西门（临时性重定向处））</li><li>永久性重定向  饭店永久搬家，直接从东门搬至西门 :running_man:  ，以后直接去西门（永久性重定向）。</li></ul><p><strong>老板贴的告示：就如同服务器响应的报头中的location字段，（永久性，临时性由状态码体现3XX）</strong></p><h2 id="HTTP常见Header"><a href="#HTTP常见Header" class="headerlink" title="HTTP常见Header"></a>HTTP常见Header</h2><blockquote><ul><li>Content-Type: 正文数据类型(text/html等) HTTP服务器与客户端通信类型。</li><li>Content-Length: Body的长度 </li><li>Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上; </li><li>User-Agent: 声明用户的操作系统和浏览器版本信息; </li><li><strong>referer</strong>: 当前页⾯面是<strong>从哪个页面跳转过来的</strong>;</li><li><strong>location</strong>: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问; </li><li><strong>Cookie:</strong>  用于在客户端存储少量信息. 通常用于实现会话(session)的功能；</li></ul></blockquote><h2 id="实践简单HTTP服务器（Web服务器）"><a href="#实践简单HTTP服务器（Web服务器）" class="headerlink" title="实践简单HTTP服务器（Web服务器）"></a>实践简单HTTP服务器（Web服务器）</h2><p>实现一个最简单的HTTP服务器, 只在网页上输出 “hello world”; 只要我们按照HTTP协议的要求构造数据, 就很容易能做到；</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>传输层往下的网络层，链路层。都是在内核中的，操作系统实现的</p><p>负责数据能够从发送端传输接收端</p><h2 id="再谈端口号"><a href="#再谈端口号" class="headerlink" title="再谈端口号"></a>再谈端口号</h2><p>端口号（Port）标识了一个主机进行通信的不同应用程序；</p><p>在TCP/IP协议中，用<strong>”源IP“，”源端口号“，”目的IP“，”目的端口号“，”协议号“这样一个五组元素</strong>来通信标识（可以通过netstat - n查看）；</p><p>端口号是16位的整数</p><p>端口号的范围划分 </p><blockquote><ul><li>0-1023:知名端口号，HTTP,FTP,SSH等这些广为使用的应用层协议，他们的端口号都是固定的。</li><li>1024-65535：操作系统动态分配的端口号，客户端程序的端口号，就是由操作系统从这个范围分配的。</li></ul></blockquote><p>知名端口号（Well-know Port Number）</p><p>有些服务器是非常常用，为了使用方便，人们约定一些常用的服务器，都是以下这些固定的端口号：</p><blockquote><ul><li>ssh服务器，使用22端口号</li><li>ftp服务器，使用21端口号</li><li>telnet服务器，使用23端口号</li><li>http服务器，使用80端口号</li><li>https服务器，使用443端口号</li></ul></blockquote><p>查看知名端口号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat/etc/services</span><br></pre></td></tr></table></figure><p>一个进程可以绑定（bind）多个端口号,一个端口号不能被多个进程绑定</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>查看网络状态的重要工具</p><p>语法：netstat[选项]</p><p>功能：查看网络状态</p><p>常用选项：</p><blockquote><ul><li>n 拒绝显⽰示别名，能显⽰示数字的全部转化成数字</li><li>l 仅列出有在 Listen (监听) 的服務状态 </li><li>p 显⽰示建⽴立相关链接的程序名 </li><li>t (tcp)仅显⽰示tcp相关选项 </li><li>u (udp)仅显⽰示udp相关选项 </li><li>a (all)显⽰示所有选项，默认不显⽰示LISTEN相关</li></ul></blockquote><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>查看服务器的进程id</p><p>语法：pidof[进程名]</p><p>功能：通过进程名，查看进程id</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>UDP协议端格式</p><p><img src="/2019/01/18/网络基础-2/UDP报文图.png" alt="UDP报文图"></p><blockquote><ul><li>16位UDP长度, 表示整个数据报(UDP⾸首部+UDP数据)的最大长度; </li><li>如果校验和出错, 就会直接丢弃;</li></ul></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>UDP如何做到：报头有效载荷分离</p><p>UDP报头长度是固定的8字节，直接可以分离报头和有效载荷</p></li><li><p>UDP把报文（有效载荷）交到上层的哪一个协议</p><p>UDP根据报头中目的端口号交付给上层协议</p></li></ul><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><p>UDP传输的过程类似为寄信</p><blockquote><ul><li><strong>无连接</strong>：知道对端的IP端和端口号就直接进行传输，不需要建立连接</li><li><strong>不可靠</strong>，没有确认机制，没有重传机制；如果因为网络故障该段⽆法发到对⽅, UDP协议层也不会给应⽤层返回任何错误信息; </li><li><strong>⾯向数据报:</strong> 不能够灵活的控制读写数据的次数和数量 ；</li></ul></blockquote><h4 id="面向数据报"><a href="#面向数据报" class="headerlink" title="面向数据报"></a>面向数据报</h4><p>应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并；</p><p>用UDP传输100字节的数据</p><blockquote><ul><li>如果发送端调⽤⼀次sendto, 发送100个字节, 那么接收端也必须调⽤对应的⼀次recvfrom, 接收100个字节; ⽽不能循环调⽤10次recvfrom, 每次接收10个字节 ;</li></ul></blockquote><h3 id="UDP缓冲区"><a href="#UDP缓冲区" class="headerlink" title="UDP缓冲区"></a>UDP缓冲区</h3><blockquote><ul><li><strong>UDP没有真正意义上的 发送缓冲区</strong>. 调⽤sendto会直接交给内核, 由内核将数据传给网络层协议进⾏后续的传输动作 </li><li><strong>UDP具有数据接收缓冲区</strong>，但这个接收缓冲区无法保证接收到的UDP报文顺序和发送UDP报的顺序一致；如果缓冲区满了，再到达的UDP数据就会被丢弃；</li></ul></blockquote><p>UDP的socket既可以读也可以写-全双工。</p><h3 id="UDP使用注意事项"><a href="#UDP使用注意事项" class="headerlink" title="UDP使用注意事项"></a>UDP使用注意事项</h3><p>UDP协议首部中有一个16字节的最大位数，也就是说一个UDP能传输的数据最大长度是2^16 字节=64k（包含UDP首部）然而64k在当今的互联网环境中，是一个非常小的数字。如果我们需要传输的数据超过64k，<strong>就需要再应用层手动的分包，多次发送，并在接收端手动拼装。</strong>  </p><p>基于UDP的协议（应用层协议）</p><ul><li>NFS: 网络络⽂件系统</li><li>TFTP: 简单⽂件传输协议</li><li><strong>DHCP</strong> : 动态主机配置协议</li><li>BOOTP: 启动协议(⽤于⽆盘设备启动)</li><li><strong>DNS</strong>: 域名解析协议 </li></ul><p>自定义UDP程序的应用层协议；<br>自动IP地址获取的能力：DHCP，这个自动获取的IP是从网络获取的，DHCP是一个服务，通常是路由器有这个服务，DHCP是集成在路由器当中的，路由器分配局域网IP给电脑。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP全称为 “传输控制协议(Transmission Control Protocol”). 人如其名, 要对数据的传输进⾏⼀个详细的控制; </p><p><img src="/2019/01/18/网络基础-2/TCP协议格式.png" alt="TCP协议格式"></p><ul><li><strong>源/目的端口号</strong>：表示数据从那个进程来，到那个进程去</li><li><strong>32位序号/32位确认号</strong>：如下详谈超时重查，去重，数据的顺序到达</li><li><strong>4位TCP报头长度</strong>：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节</li><li><strong>6位标志位</strong><ul><li>URG：紧急指针是否有效</li><li>ACK：确认号是否有效</li><li>PSH：提⽰接收端应⽤程序⽴刻从TCP缓冲区把数据读⾛ </li><li>RST：对⽅要求重新建⽴连接; 我们把携带RST标识的称为复位报⽂段 </li><li>SYN：请求建⽴连接; 我们把携带SYN标识的称为同步报⽂段 </li><li>FIN：通知对⽅, 本端要关闭了, 我们称携带FIN标识的为结束报⽂段 </li><li>详解</li></ul></li><li><strong>16位窗口大小</strong>：：如下详谈流量控制（接收者的接收缓冲区）</li><li><strong>16位校验和:</strong> 发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分.</li><li><strong>16位紧急指针</strong>: 标识哪部分数据是<strong>紧急数据</strong>;</li><li><strong>40字节头部选项</strong>: 暂时忽略; </li></ul><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>TCP如何做到报头和有效载荷分离</li></ul><p>报头：4位TCP报头长度，确定TCP头部大小（字节）</p><p>有效载荷：TCP是面向字节流的，有效载荷大小不需要知道。</p><ul><li>TCP把报文（有效载荷）交到上层的哪一个协议</li></ul><p>TCP包头中含有目的端口号，根据目的端口号交付给上层协议</p><h3 id="TCP保证数据可靠性"><a href="#TCP保证数据可靠性" class="headerlink" title="TCP保证数据可靠性"></a>TCP保证数据可靠性</h3><ul><li><strong>确认应答机制</strong></li></ul><p>最后最新的报文，永远没有应答。互联网中没有百分百可靠的协议，但是我们，假如客户端服务器收到数据报且确认，我们可以确定在此之前的信息是可靠的，已经被接收到的。局部安全性。</p><ul><li><p><strong>32位序号和32位确认序号</strong>保障TCP的<strong>数据到达的顺序性、超时重查、去重</strong>。</p><ul><li><p><strong>数据的按序到达</strong></p><p>数据按序到达才可以保证数据的可靠性。</p></li><li><p>超时重查</p><p>服务器在收到报文后按照报文序号进行重新检查，查看报文是否有丢失。</p></li><li><p><strong>去重</strong></p><p>服务器在收到报文后按照报文序号进行查重操作，查看报文是否有重复。</p></li></ul></li></ul><ul><li><p><strong>16位校验和</strong> </p><p>发送端填充, CRC校验. 接收端校验不通过, 则认为数据有问题. 此处的检验和不光包含TCP⾸部, 也包含TCP数据部分。</p></li></ul><ul><li><p><strong>16位窗口大小-流量控制:</strong> </p><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度。</p></li></ul><h4 id="序号和确认序号详解："><a href="#序号和确认序号详解：" class="headerlink" title="序号和确认序号详解："></a>序号和确认序号详解：</h4><p><strong>确认序号是双向的，服务器跟客户端各自有个各自的序号和确认序号，序号用于标记发送的报文，</strong></p><p><strong>确认序号用于标记收到的报文。</strong> </p><p>客户端给发送的报文按发送的顺序编号，（1，2，3，4，5，…10,….）</p><p>服务器接收一条报文后回应给客户端，发送ACK（收到1号报文后，给客户端回应的ACK=2（表示客户端需要发第2好报文，2之前的报文已经收到了），在收到所有报文并回应11时，客户端就知道前10个报文已经收到了，最后服务器讲收到的报文排序并<strong>超时重查</strong>  、<strong>去重</strong> ，并查看报文序列是否在中间有丢失的。</p><h5 id="超时重查："><a href="#超时重查：" class="headerlink" title="超时重查："></a>超时重查：</h5><p>假如6号报文丢失了，服务器就给客户端发送一个6。客户端，本身已经发送到10了，又接收到6就，客户端就知道6号报文丢失，随即重新发送6号报文给服务器。服务器收到后回应（ACK=11）,客户端就知道前10个报文已经确认收到了。</p><h5 id="去重："><a href="#去重：" class="headerlink" title="去重："></a>去重：</h5><p>假如发送的一个报文中6号报文在传输途中在其中路由器中挂起了（阻塞了），服务器认为报文传输途中丢失了，进行上述超时重查功能。但是在重发报文收到了，之前在路由器上的报文被唤醒了，此时也传过来了。导致服务器中收到的报文重复了。此时服务器会进行查重操作，根据报文序号进行查重，剔除重复序号的报文。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p><strong>TCP具有发送，接收缓冲区，</strong> 超时查重机制的基本。</p><h3 id="16位窗口大小-流量控制"><a href="#16位窗口大小-流量控制" class="headerlink" title="16位窗口大小-流量控制"></a>16位窗口大小-流量控制</h3><p>根据接收方的接收缓冲区剩余空间的大小（接收能力），来给发送方反馈当前接收缓冲区剩余空间的大小，进而控制发送速度，<strong>流量控制根本原因是保证可靠性</strong>。-<strong>不流量控制</strong>-发送过快，导致溢出；过慢，影响性能。</p><p>报头类按照柔性数组来设计，位段，类比快递的快递单号。</p><h3 id="首部长度"><a href="#首部长度" class="headerlink" title="首部长度"></a>首部长度</h3><p>4位TCP首部长度：表示该TCP头部有多少个32位bit(有多少个<strong>4字节</strong>); 所以TCP头部最大长度是<strong>15 * 4 =60</strong> 字节    首部长度 = 报头+选项  又因为报头标准长度是20字节，所以选项长度应该是40字节。</p><h3 id="6位标志位"><a href="#6位标志位" class="headerlink" title="6位标志位"></a>6位标志位</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN:"></a>SYN:</h4><p><strong>请求建立连接; 我们把携带SYN标识的称为同步报⽂段</strong> </p><p>当发送的报文是<strong>连接请求报文</strong>时：SYN置为1；</p><p>当发送的报文是<strong>正常普通报文</strong>时：SYN置为0；</p><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK:"></a>ACK:</h4><p><strong>ACK确认号是否有效</strong> </p><p>当发送的报文是<strong>请求报文</strong>时：ACK置为0</p><p>当发送的报文是<strong>确认响应报文</strong>时：ACK置为1</p><h4 id="FIN"><a href="#FIN" class="headerlink" title="FIN:"></a>FIN:</h4><p>通知对⽅, 本端要关闭了, 我们称携带FIN标识的为<strong>结束报文段</strong> </p><p><strong>操作系统会把连接管理起来</strong>（<strong>其中连接用五元组标识</strong>），当一方发送一个结束报文的时候其中包含了</p><p>通过五元组来，既可以确定要端断开那个连接。</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST:"></a>RST:</h4><p><strong>重置连接</strong> </p><p><strong>对方要求重新建立连接; 我们把携带RST标识的称为复位报文段</strong>  </p><p>三次握手最后一次客户端响应服务器收到连接建立的请求，在发送中途丢失。客户端认为连接已经立，服务器没有收到这个报文，任务连接并没有建立。此时客户端给服务器发送数据，TCP服务器是面向连接的，发现此时收的数据的客户端并没有跟服务器建立连接。就给客户端响应一个RST报文。客户收到这个连接的时候就发现自己并没有建立起连接。客户端把当前建立的连接断开，重新建立连接，或者不建立连接。</p><h4 id="URG："><a href="#URG：" class="headerlink" title="URG："></a>URG：</h4><p><strong>as:救护车，警车。</strong> </p><p><strong>带外数据：高优先级报文处理，让报文优先处理。：能够标志的资源有限。</strong> </p><p>TCP面向字节流的，16位紧急指针解决的是数据偏移量的问题。（下来了解一下）</p><h4 id="PSH"><a href="#PSH" class="headerlink" title="PSH:"></a>PSH:</h4><p>客户端提示接收端应⽤程序⽴刻从TCP缓冲区把数据读走</p><p>客户端发送带有PSH的标志位的报文。催促接收端尽快将数据进行交付。</p><h3 id="连接管理机制"><a href="#连接管理机制" class="headerlink" title="连接管理机制"></a>连接管理机制</h3><p>正常情况下，TCP要经过三次握手建立连接，四次挥手断开连接</p><p><img src="/2019/01/18/网络基础-2/TCP连接流程图.png" alt="TCP连接流程图"></p><h3 id="TCP连接断开中服务器与客户端状态变化"><a href="#TCP连接断开中服务器与客户端状态变化" class="headerlink" title="TCP连接断开中服务器与客户端状态变化"></a>TCP连接断开中服务器与客户端状态变化</h3><p>服务端状态转变：</p><blockquote><ul><li>[<strong>CLOSED-&gt;LISTEN</strong>】 服务器断掉调用listen后进⼊LISTEN状态, 等待客户端连接 ；</li><li>[<strong>LISTEN -&gt; SYN_RCVD</strong>] ⼀旦监听到连接请求(同步报⽂段), 就将该连接放⼊内核等待队列中, 并向客户端发送SYN确认报⽂ 。</li><li>[<strong>SYN_RCVD -&gt; ESTABLISHED</strong>] 服务端⼀旦收到客户端的确认报⽂, 就进⼊ESTABLISHED状态,<br>可以进⾏读写数据了 。</li><li>[<strong>ESTABLISHED -&gt; CLOSE_WAIT</strong>] 当客户端主动关闭连接(调⽤close), 服务器会收到结束报⽂段,<br>服务器返回确认报⽂段并进⼊CLOSE_WAIT 。</li><li>[<strong>CLOSE_WAIT -&gt; LAST_ACK</strong>] 进⼊CLOSE_WAIT后说明服务器准备关闭连接(需要处理完之前的<br>数据); 当服务器真正调⽤close关闭连接时, 会向客户端发送FIN, 此时服务器进⼊LAST_ACK状态,<br>等待最后⼀个ACK到来(这个ACK是客户端确认收到了FIN 。</li><li>[<strong>LAST_ACK -&gt; CLOSED</strong>] 服务器收到了对FIN的ACK, 彻底关闭连接 </li></ul></blockquote><p>客户端状态转变：</p><blockquote><ul><li>[<strong>CLOSED -&gt; SYN_SENT</strong>] 客户端调⽤connect, 发送同步报⽂段; （请求连接报文）</li><li>[<strong>SYN_SENT -&gt; ESTABLISHED</strong>] connect调⽤成功, 则进⼊ESTABLISHED状态, 开始读写数据 </li><li>[<strong>ESTABLISHED -&gt; FIN_WAIT_1</strong>] 客户端主动调⽤close时, 向服务器发送结束报⽂段, 同时进⼊FIN_WAIT_1; </li><li>[<strong>FIN_WAIT_1 -&gt; FIN_WAIT_2</strong>] 客户端收到服务器对结束报⽂段的确认, 则进⼊FIN_WAIT_2, 开始<br>等待服务器的结束报⽂段 ;</li><li>[<strong>FIN_WAIT_2 -&gt; TIME_WAIT</strong>] 客户端收到服务器发来的结束报⽂段, 进⼊TIME_WAIT, 并发出<br>LAST_ACK ;</li><li>[<strong>TIME_WAIT -&gt; CLOSED</strong>] 客户端要等待⼀个2MSL(Max Segment Life, 报⽂最⼤⽣存时间)的时间,才会进⼊CLOSED状态 。</li></ul></blockquote><p>欠一张状态流程图</p><p><strong>在建立连接和释放连接是基于状态基的。</strong>   </p><h3 id="状态机："><a href="#状态机：" class="headerlink" title="状态机："></a>状态机：</h3><p><strong>在什么状态干什么事</strong></p><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><ul><li><p><strong>TIME_WAIT:主动退出的一方要进入的状态</strong>，是需要等待一段时间的，让<strong>双方的连接安全释放</strong>。</p><ul><li><p><strong>保证迟到的报文尽快消散</strong>。</p><p>例子：</p><p>客户端A发出一个报文，有一个路由器比较卡，此时客户端A退出。退出后有建立了连接，此时报文才发过去。-迟到的报文。（解决迟到报文的状态）</p><ul><li>TCP协议规定,主动关闭连接的⼀⽅要处于TIME_ WAIT状态,等待两个MSL(maximum segment lifetime)的时间后才能回到CLOSED状态 </li><li>TIME_WAIT:等待的时间（MSL maximum segment lifetime ），单向的MSL时间一般是60秒，双向则就是120秒2分钟。</li><li>可以通过<code>cat /proc/sys/net/ipv4/tcp_fin_timeout</code>查看MSL的值 </li></ul></li></ul></li></ul><h4 id="解决TIME-WAIT状态引起的bind失败的方法"><a href="#解决TIME-WAIT状态引起的bind失败的方法" class="headerlink" title="解决TIME_WAIT状态引起的bind失败的方法"></a>解决TIME_WAIT状态引起的bind失败的方法</h4><p><strong>在server的TCP连接没有完全断开之前不允许重新监听, 某些情况下可能是不合理的</strong> </p><blockquote><ul><li>例如:</li><li>服务器需要处理⾮常⼤量的客户端的连接(每个连接的⽣存时间可能很短, 但是每秒都有很⼤数的客户端来请求).</li><li>这个时候如果由服务器端主动关闭连接(⽐如某些客户端不活跃, 就需要被服务器端主动清理掉), 就会产⽣⼤量TIME_WAIT连接. </li><li>由于我们的请求量很⼤, 就可能导致TIME_WAIT的连接数很多, 导致服务器的端⼝不够⽤, ⽆法处<br>理新的连接 </li></ul></blockquote><p>使⽤<code>setsockopt()</code>设置<code>socket描述符</code>的 选项<code>SO_REUSEADDR</code>为<code>1</code>, 表示允许创建端口号相同但IP地址不同的多个socket描述符<br>在server代码的socket()和bind()调⽤之间插⼊如下代码 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><ul><li>ESTABLISHED:连接成功-三次握手完成</li></ul><h3 id="确认应答机制（ACK）机制详解"><a href="#确认应答机制（ACK）机制详解" class="headerlink" title="确认应答机制（ACK）机制详解"></a>确认应答机制（ACK）机制详解</h3><p><img src="/2019/01/18/网络基础-2/确认应答.png" alt="确认应答"></p><p>TCP将每个字节的数据都进行了编号</p><p><img src="/2019/01/18/网络基础-2/确认应答详细流程.png" alt="确认应答详细流程"></p><p>每⼀个ACK都带有对应的确认序列号, 意思是告诉发送者, 我已经收到了哪些数据; 下⼀次你从哪⾥开始发 </p><h3 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h3><p><img src="/2019/01/18/网络基础-2/超时重传.png" alt="超时重传"></p><blockquote><ul><li>机A发送数据给B之后, 可能因为网络络拥堵等原因, 数据⽆法到达主机B;</li><li>如果主机A在⼀个<strong>特定时间间隔内没有收到B发来的确认应答</strong>, 就会进⾏重发 但是, 主机A未收到B发来的确认应答, 也可能是因为ACK丢失了; </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/超时重传-数据重复.png" alt="超时重传-数据重复"></p><blockquote><p>因此主机B会收到很多重复数据. 那么TCP协议需要能够识别出那些包是重复的包, 并且把重复的丢弃掉，这时候我们可以利⽤前⾯提到的序列号, 就可以很容易做到去重的效果 .</p></blockquote><h4 id="超时时间对传输的影响"><a href="#超时时间对传输的影响" class="headerlink" title="超时时间对传输的影响"></a>超时时间对传输的影响</h4><p>但是超时时间的太长，会影响整体传输效率，超时时间设置的太断，就可能频繁发送重复的包。</p><p><strong>TCP为了保证无论在任何环境下都能比较高性能的通信, 因此会动态计算这个最大超时时间</strong> </p><blockquote><ul><li>Linux中(BSD Unix和Windows也是如此), 超时以<strong>500ms</strong>为⼀个单位进⾏控制, 每次判定超时重发的超时时间都是500ms的整数倍。</li><li>如果重发⼀次之后, 仍然得不到应答, 等待 2*500ms 后再进⾏重传。</li><li>*如果仍然得不到应答, 等待 4**500ms 进⾏重传. 依次类推, 以指数形式递增。</li><li><strong>累计到⼀定的重传次数, TCP认为网络或者对端主机出现异常, 强制关闭连接</strong> 。</li></ul></blockquote><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>刚才我们讨论了确认应答策略, 对每⼀个发送的数据段, 都要给⼀个ACK确认应答. 收到ACK后再发送下⼀个数据段. 这样做有⼀个⽐较⼤的缺点, 就是性能较差. 尤其是数据往返的时间较⻓的时候 。</p><p>就像当串行执行的发送。这样会影响传传输效率问题，此次发送多条数据，就可以达大大提高性能（将多个端的等待时间叠加在一起）</p><p>滑动窗口的大小由= 接收方窗口大小+拥塞窗口决定</p><p><img src="/2019/01/18/网络基础-2/滑动窗口.png" alt="滑动窗口"></p><blockquote><ul><li>窗大小指的是⽆需等待确认应答⽽可以继续发送数据的最⼤值. 上图的窗⼝⼤⼩就是4000个字节(四个段).</li><li>发送前四个段的时候, 不需要等待任何ACK, 直接发送;</li><li>收到第⼀个ACK后, 滑动窗⼝向后移动, 继续发送第五个段的数据; 依次类推;</li><li>操作系统内核为了维护这个滑动窗⼝ , 需要<strong>开辟发送缓冲区来</strong>记录当前还有哪些数据没有应答; 只有确认应答过的数据, 才能从缓冲区删掉;</li><li>窗⼝越⼤, 则网络的吞吐率就越⾼ </li></ul></blockquote><h4 id="主机A的发送缓冲区"><a href="#主机A的发送缓冲区" class="headerlink" title="主机A的发送缓冲区"></a>主机A的发送缓冲区</h4><ul><li>窗口内的数据全部都会被发出去，窗口前的数据（已经发送出去的数据且已经发送的数据已经被接收方确认），窗口中的数据（已经发送的数据），窗口之后的数据（待发送的数据）。</li><li>滑动窗口的大小：传送方传输效率问题【发送方的发送缓冲区】。</li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口执行流程.png" alt="滑动窗口执行流程"></p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>如果出现丢包，要进行超时重传，这里分两种情况讨论</p><ul><li><p>情况一：数据包已经到达，ACK丢失了（引发重复发送问题）</p><p>这种情况下，只是服务器的确认报文丢了，实际上服务器已经接收到了客户端发送的数据了。</p><p>此时发送方继续发送即可，只要服务器中后续有一个确认报文(确认报文会确认的数据内容会向后增加)发送成功，则客户端就会让滑动窗口向后移动即可。</p></li></ul><p><img src="/2019/01/18/网络基础-2/滑动窗口ACK丢失问题.png" alt="滑动窗口ACK丢失问题"></p><p>​    前面并未确认的报文后续的ACK会进行一起确认。</p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ul><li>情况二：数据包直接丢了</li></ul><blockquote><ul><li>当某⼀段报⽂段丢失之后, 发送端会⼀直收到 1001 这样的ACK, 就像是在提醒发送端 “我想要的是1001” ⼀样;</li><li>如果发送端主机连续三次收到了同样⼀个 “1001” 这样的应答, 就会将对应的数据 1001 - 2000 重新发送;</li><li>这个时候接收端收到了 1001 之后, 再次返回的ACK就是7001了(因为2001 - 7000)接收端其实之前就已经收到了, 被放到了接收端操作系统内核的接收缓冲区中 。</li></ul></blockquote><p>这种机制被称为“<strong>高速重发控制”（也叫“快重传”</strong> ）。<strong>根本目的解决了可靠性和提高效率。</strong></p><p>快重传无法解决单个传输的数据丢失问题，<strong>超时重传虽然慢了点</strong>，但是可以确<strong>保有效性，可靠性</strong>。</p><h3 id="流量控制（Flow-Control）"><a href="#流量控制（Flow-Control）" class="headerlink" title="流量控制（Flow Control）"></a>流量控制（Flow Control）</h3><p>接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区被打满, 这个时候如果发送端继续发送, 就会造成丢包, 继⽽引起丢包重传等等⼀系列连锁反应 。</p><p>因此TCP⽀持根据接收端的处理能⼒, 来决定发送端的发送速度. 这个机制就叫做流量控制(Flow Control); </p><blockquote><ul><li>接收端将⾃⼰可以接收的缓冲区⼤⼩放⼊ TCP ⾸部中的 “窗⼝⼤小” 字段, 通过ACK端通知发端;</li><li>窗⼝⼤⼩字段越⼤, 说明网络的吞吐量越⾼;</li><li>接收端⼀旦发现⾃⼰的缓冲区快满了, 就会将窗⼝大小设置成⼀个更小的值通知给发送端;（当前接收方的接收缓冲区的大小）</li><li>发送端接受到这个窗⼝之后, 就会减慢自己的发送速度;</li><li>如果接收端缓冲区满了, 就会将窗⼝置为0; 这时发送⽅不再发送数据, 但是发送端需要定期发送⼀个窗⼝ 探测数据段，使接收端把装口大小告诉发送端。</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/流量控制细节流程.png" alt="流量控制细节流程"></p><p>接收端如何把窗口大小告诉发送端呢? 回忆我们的TCP⾸首部中, 有一个16位窗口字段, 就是存放了窗口大小信息; </p><p>那么问题来了, 16位比特位最大表示65535, 那么TCP窗口最大就是65535字节么? 实际上, T<strong>CP首部40字节选项中还包含了一个窗口扩大因子M,</strong> 实际窗口大小是窗口大小字段的值左移 M 位; </p><p>实际窗口大小=16位窗口大小&lt;&lt;(扩大因子)M=(2^16-1)*(2^M)</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>虽然TCP有了滑动窗口这个高效方式，能够高效可靠的发送大量的数据。但是如果在刚开始阶段就发送大量的数据，任然可能引发问题。</p><p>因为网络上有很多计算机，可能当前的网络状态就已经比较拥堵了，在清楚当前网络状态下，贸然发送大量的数据，是很有可能引发更大的问题。</p><p><strong>TCP引入，慢启动，先发送少量的数据，探探接收方的窗口大小。接收方成功接收返回的响应的报文会包含他的窗口大小。然后再决定按照多大的速度传输数据；</strong></p><blockquote><ul><li>此处引⼊入一个概念程为拥塞窗口</li><li>发送开始的时候, 定义拥塞窗口大小为1; </li><li>每次收到一个ACK应答, 拥塞窗口加1倍; </li><li>每次发送数据包的时候, 将<strong>拥塞窗口</strong>和接收端主机反馈的<strong>窗口大小</strong>做比较,<strong>取较小的值作为实际发 送的窗口大小;</strong></li></ul></blockquote><p>像上⾯面这样的拥塞窗口增⻓长速度, 是指数级别的. “<strong>慢启动” 只是指初使时慢,</strong> 但是<strong>增长速度非常快</strong>。</p><p>上述as:高利贷，开始利息小，后面滚雪球式增长。</p><p>慢启动+阈值控制：</p><p><img src="/2019/01/18/网络基础-2/拥塞控制算法曲线图.png" alt="拥塞控制算法曲线图"></p><blockquote><ul><li>为了不增长的那么快, 因此不能使拥塞窗口单纯的加倍. </li><li>此处引入一个叫做慢启动的阈值 当拥塞窗口超过这个阈值的时候, 不再按照指数方式增长, 而是按照线性方式增。</li><li>当TCP开始启动的时候, 慢启动阈值等于窗口最大值; </li><li>在每次<strong>超时重发</strong>（丢包）的时候, 慢启动阈值会变成原来的一半, 同时拥塞窗口置回1; </li></ul></blockquote><p><strong>少量的丢包, 我们仅仅是触发超时重传;</strong>  </p><p><strong>大量的丢包, 我们就认为网络拥塞;</strong>  </p><p><strong>当TCP通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降; 拥塞控制</strong>。</p><p>归根结底是TCP协议想尽可能<strong>快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.</strong>  </p><p>TCP拥塞控制这样的过程, 就好像热恋的感觉</p><p><strong>流量控制，拥塞控制，滑动窗口。</strong> </p><p>滑动窗口：发送数据的效率问题</p><p>流量控制：解决发送数据的总量问题</p><p>拥塞控制：解决发送数据的故障问题</p><p><strong>发送数据要考虑的（体现在滑动窗口的大小上）=对方接收能力/流量控制（窗口大小）+网络状况（拥塞窗口）</strong></p><h3 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h3><p>如果接收数据的主机立刻返回ACK应答，这时候返回的窗口可能性比较小</p><blockquote><ul><li>假设接收的缓冲区为1M，一次收到500k的数据；如果立刻应答，返回的窗口就是500k;</li><li>但实际上可能处理端处理的速度很快，10ms之内就把500k数据从缓冲区消费掉了</li><li>在这种情况下，接收端处理还远没有达到自己的极限，即使窗口再放大一些，也能处理的过来</li><li>如果接收端稍微等一下再应答，比如等待200ms再应带，那么这个时候返回的窗口就是1M；</li></ul></blockquote><p>一<strong>定要记得，窗口越大，网络吞吐量就越高。我们的目标是保证网络不拥堵的情况下尽量提高传输效率；</strong> </p><p>那么所有的包都可以延迟应答么？肯定也不是：</p><blockquote><ul><li>数量限制：每隔N个包就应答一次</li><li>时间限制：超过最大延迟时间就应答一次；</li></ul></blockquote><p>具体的数量和超时时间，依照操作系统也有不同差异；一般取2N，超时时间取200ms；</p><h3 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h3><p>在延迟应答的基础上，我们发现，很多情况下，客户端服务器在应用层也是“一发一收的”的，意为着客户端给服务器都说了“How are you”,服务也给客户端回一个“Fine ,think you”;</p><p>那么这个时候ACK就可以搭春风车了，和服务器回应的“Fine ,think you”一起回给客户端</p><h2 id="TCP小结："><a href="#TCP小结：" class="headerlink" title="TCP小结："></a>TCP小结：</h2><h4 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h4><blockquote><ul><li>校验和</li><li>面向来链接</li><li>确认应答机制</li><li>序列号（32为序号应32确认序号）</li><li>超时重发，去重</li><li>连接管理</li><li>流量控制（窗口大小）</li><li>拥塞控制</li></ul></blockquote><h4 id="提高性能"><a href="#提高性能" class="headerlink" title="提高性能"></a>提高性能</h4><blockquote><ul><li>滑动窗口</li><li>快速重传</li><li>延迟应答</li><li>捎带应答</li></ul></blockquote><p>其他：</p><blockquote><ul><li>定时器（超时重传定时器，保证定时器，TIME_WAIT定时器）</li></ul></blockquote><h4 id="基于TCP应用层协议"><a href="#基于TCP应用层协议" class="headerlink" title="基于TCP应用层协议"></a>基于TCP应用层协议</h4><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telnet</li><li>FTP</li><li>SMTP</li></ul><h3 id="TCP-UDP区别"><a href="#TCP-UDP区别" class="headerlink" title="TCP/UDP区别"></a>TCP/UDP区别</h3><blockquote><ul><li>TCP用于可靠传输情况，应用于文件传输，重要状态更新等场景</li><li>UDP用于高速传输和实时性要求叫较高的通信领域，例如：早期的QQ, 视频传输等. 另外UDP可以⽤于广播 </li></ul></blockquote><p>具体场景，具体分析去判断。</p><h3 id="用UDP实现可靠传输（经典面试题）"><a href="#用UDP实现可靠传输（经典面试题）" class="headerlink" title="用UDP实现可靠传输（经典面试题）"></a>用UDP实现可靠传输（经典面试题）</h3><p>参考TCP的可靠性机制，在应用层实现类似的逻辑</p><p>例如：</p><blockquote><ul><li>引入确认应答，确保对端收到数据（可靠性）</li><li>引入序列号，保证顺序顺序</li><li>引入超时重传，如果隔一段时间没有应答，就重发数据；</li><li>….</li></ul></blockquote><h3 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h3><p>创建一个TCP的socket，同时在内核中创建一个发送缓冲区和一个接收缓冲区；</p><blockquote><ul><li>调用write时，数据先回发送到缓冲区中</li><li>如果发送的字节数<strong>太⻓</strong>, <strong>会被拆分成多个TCP的数据包发出</strong> </li><li>如果发送的字节数<strong>太短</strong>, <strong>就会先在缓冲区里等待, 等到缓冲区长度差不多了, 或者其他合适的时机发送出去</strong> </li><li><strong>接收数据的时候, 数据也是从网络卡驱动程序到达内核的接收缓冲区</strong> </li><li>然后应用程序可以掉调用read从接收缓冲区拿到数据；</li><li>另一个方面，TCP的一个连接，既然有发送缓冲区，也有接收缓冲区，那么对于这一个连接，既可以读数据也可以写数据，这个概念叫做<strong>全双工</strong> </li></ul></blockquote><p>由于缓冲区的存在，TCP程序的读和写不需要一一匹配，例如：</p><blockquote><ul><li>写100个字节数据时, 可以调⽤⼀次write写100个字节, 也可以调⽤100次write, 每次写⼀个字节;</li><li>读100个字节数据时, 也完全不需要考虑写的时候是怎么写的, 既可以⼀次read 100个字节, 也可以<br>⼀次read⼀个字节, 重复100次; </li></ul></blockquote><p>例子：</p><p>TCP:自来水公司供水的例子，例如TCP的传输，水被用于做什么，怎么接的。自来水公司（TCP）不关心。完全由商铺，饭店，奶茶店，养猪厂（等上层应用决定）。</p><p>UDP：饮水机的送水，一桶一桶的。</p><h3 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h3><p>[八戒吃馒头例子]</p><blockquote><ul><li>首先要明确，粘包问题中的包“包”，是指的应用等的数据包</li><li>在TCP的协议中，没有如图UDP一样的“报文长度”这样的字段，但是有一个序号这样的字段。</li><li>站在传输层的角度，TCP是一个一个报文过来的，按照序号排好在缓冲区中。</li><li>站在应用层的角度，看到的只是一串连续的字节数组</li><li>那么应用层看到了这么一连串的字节数据，就不知道从哪个部分开始到哪个部分，是一个完整的应用层结构。</li></ul></blockquote><p>解决粘包问腿，明确每个报文的边界</p><blockquote><ul><li>对于定长的包，保证每次都按固定大小读取即可；例如上面的Request结构，是固定大小的，那么从缓冲区从头开始按sizeof(Request)一次读取即可；</li><li>对于变长的包，可以在包头位置，约定一个总包文长度的字段，从而就知道了包的结束位置；</li><li>对于变长的包，还可以在包和包之间使用明确的分割符（应用协议是程序猿⾃⼰来定的, 只要保证分隔符不和正⽂冲突即可) ；</li></ul></blockquote><p>UDP报头，报文是定长的，且报头有一个16位的UDP长度。就可以明确每个报文的边界。</p><p>且站在应用层的角度上在使用UDP发送数据报的时候数据报一定是完整的或者数据包丢失，不会出现“半个”报文的情况。</p><h3 id="TCP异常情况"><a href="#TCP异常情况" class="headerlink" title="TCP异常情况"></a>TCP异常情况</h3><p><strong>进程终止：</strong>进程终止会释放文件描述符，任然可以发送FIN，和正常关闭没有什么区别。</p><p>会被操作系统底层正常关闭，操作系统底层会帮你进行4挥手，正常关闭。</p><p><strong>机器重启:</strong> 和进程终止的情况相同 。</p><p><strong>机器断电/网络断开：</strong>接收端认为连接还在，一旦接收端有写⼊操作, 接收端发现连接已经不在了, <strong>就会进行reset</strong>发送含有RST. 即使没有写⼊操作, TCP⾃⼰也内置了⼀个保活定时器, 会定期询问对⽅是否还在. 如果对⽅不在, 也会把连接释放 。</p><p>另外, 应⽤层的某些协议, 也有⼀些这样的检测机制. 例如HTTP长连接中, 也会定期检测对⽅的状态. 例如QQ,在QQ断线之后, 也会定期尝试重新连接 。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在复杂的网络环境中<strong>确定一个合适的路径</strong>，路径选择能力。</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP地址是<strong>路由选择的作用</strong>，怎么走就是下层协议决定。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>主机：配有IP地址，但是不进行路由控制的设备；</p><p>路由器：配有IP地址，又能进行路由控制；</p><p>节点：主机和路由器的统称。</p><h3 id="IP协议头格式"><a href="#IP协议头格式" class="headerlink" title="IP协议头格式"></a>IP协议头格式</h3><p><img src="/2019/01/18/网络基础-2/IP协议头格式.png" alt="IP协议头格式"></p><ul><li><strong>4位版本号（version）：</strong>只当IP协议的版本，对于IPv4来说就是4</li><li><strong>4位头部长度（hearer length）:</strong>以4字节（一行）为单位，4位头部长度能表示的最大数字是15，即IP头部最大长度是15*4 = 60字节。</li><li><strong>8位服务类型(Type Of Servier):</strong> 3位优先权字段（已经弃用了），4位TOS字段，和一位保留字段（必须置为0），4为TOS分别表示，最小延时，最大吞吐量，最高可靠性，最小成本，这四者互相冲突，只能选择一个，对于ssh/telnet这样的应用程序，最小延迟比较重要，对于ftp这样的程序，最大吞吐量比较重要。</li><li><strong>16位总长度（total length）:I</strong>P数据报整体占多少个字节。</li><li><strong>16位标识（id）:</strong>唯一的标识住居发送的报文，如果IP报文在数据链路层被分片了，那么每一个片里面的这个id都是相同的。</li><li><strong>3位标志位字段：</strong>第一位保留（保留的意思就是现在不用，但是还没想好说不定以后要用到），第二位置为1标识禁止分片，这时候如果报文长度超过<strong>MTU</strong>, IP模块就会丢弃报文。第三位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. 类似于一个结束标记. </li><li><strong>13位分片偏移(framegament offset):</strong> 是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</li><li><strong>8位生存时间(Time To Live, TTL):</strong> 数据报到达目的地的最大报文跳数. 一般是64. 每次经过一个路由, TTL -= 1, 一直减到0还没到达, 那么就丢弃了. 这个字段主要是用来防止出现路由循环 。</li><li><strong>8位协议:</strong> 表示上层协议的类型 。</li><li><strong>16位头部校验和:</strong> 使用CRC进行校验, 来鉴别头部是否损坏.。</li><li><strong>32位源地址和32位目标地址:</strong> 表示发送端和接收端。</li><li><strong>选项字段(不定⻓长, 最多40字节):</strong> 略 </li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li><p><strong>IP报文有效载荷和包头分离</strong></p><p>4位的首部长度，16位的总长度</p></li><li><p><strong>如何给上层交付</strong></p><p><strong>8位协议</strong></p></li></ul><h4 id="IP层第二行整体是用来分片与组装的"><a href="#IP层第二行整体是用来分片与组装的" class="headerlink" title="IP层第二行整体是用来分片与组装的"></a>IP层第二行整体是用来分片与组装的</h4><p>例如：发快递一个快递发不下，拆分成个包裹快递发送。接收方也得把这个10个包裹组装起来。</p><p>链路层一次最大发送报文的大小位MTU：一般的大小为1500字节</p><p>在同层分片，就应该在同层组装。</p><p><img src="/2019/01/18/网络基础-2/IP报头的分片行.png" alt="IP报头的分片行"></p><ul><li><p><strong>16位标志是分片报文的序号</strong>，同一个IP报文的值是一样的。（甄别分片报文和正常报文）。</p></li><li><p><strong>13位片移量解决报文的先后顺序</strong>，是分片相对于原始IP报文开始处的偏移. 其实就是在表示当前 分片在原报文中处在哪个位置. 实际偏移的字节数是这个值 * 8 得到的. 因此, 除了最后一个报文之 外, 其他报文的长度必须是8的整数倍(否则报⽂文就不连续了)。</p></li><li><p>3位标志位表示”更多分片”, 如果分片了的话, 最后一个分片置为1, 其他是0. <strong>类似于一个结束标记</strong>。</p></li><li>如果报文不完整，则就将不完整的报文丢弃（发送失败），触发TCP超时重发。</li></ul><p>分片并不好，会大大增加丢包概率。解决这个问题，要从上层入手（TCP）。传输时候，TCP也会尽量减少这种情况，让TCP发送小于1460字节（MSS）的报文，因为标准TCP报头为20字节，IP表准报头也为20字节。分片还要花费时间</p><p>MSS:最大段尺寸1460字节。（MUT）决定IP分片，TCP最好的发送报文的大小。</p><h3 id="网段划分"><a href="#网段划分" class="headerlink" title="网段划分"></a>网段划分</h3><p>IP地址分为两个部分，网络号和主机号</p><blockquote><ul><li><strong>网络号</strong>：保证相连接的两个网段具有不同的标识</li><li><strong>主机号</strong>：同一网段，主机之间具有相同的网络号，但是必须有不同的主机号。</li></ul></blockquote><p>路由前期一直在进行目标网络的查找</p><blockquote><ul><li>同一局域网内他们的网络号绝对一样，主机号绝对不一样。</li><li>不同局域网内他们的网络号不一样，主机号可以一样。</li></ul></blockquote><p>合理设置主机号和网络号，可以保证相互连接在网络中，每台主机的IP地址都不相同。</p><p>手动管理子网内的IP，是一个相当麻烦的事情。</p><blockquote><ul><li>有一种技术叫做DHCP，能够自动的给子网内新增主机节点分配IP地址，避免了手动管理IP的不方便。</li><li>一般路由器都带有DHCP功能，因此路由器也可以看作成一个DHCP服务。</li></ul></blockquote><p>早期划分子网，用的是分类方案，把所有IP地址分为5类</p><blockquote><ul><li>A类 0.0.0.0到127.255.255.255 </li><li>B类 128.0.0.0到191.255.255.255</li><li>C类 192.0.0.0到223.255.255.255 </li><li>D类 224.0.0.0到239.255.255.255 </li><li>E类 240.0.0.0到247.255.255.255 </li></ul></blockquote><p>加入申请的是B类地址，主机号有16位<strong>2^16</strong> -2=65534 能够用的主机IP地址，这种方式浪费太大了，针对这种情况提出了新的方案吗，称为<strong>CIDR(Classless Interdomain Routing):</strong> <strong>子网掩码</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><blockquote><ul><li>引入一个额外的子网掩码(subnet mask)来区分网络号和主机号; </li><li>⼦网掩码也是一个32位的正整数. 通常用一串 “0” 来结尾; </li><li>将IP地址和子网掩码进⾏行 <strong>“按位与”</strong> 操作, 得到的结果就是网络号; </li><li>网络号和主机号的划分与这个IP地址是A类、B类还是C类无关; </li></ul></blockquote><p>主机号可以有2^4 = 16的台数，第一台主机编号为全0的主机不用，最后一台主机编号为全1的主机也不用，经过子网掩码计算后，的主机台数也是16台，子网地址范围就是在计算出子网掩码后+16。可以使用的有14台主机（掐头去尾）</p><p>可⻅见,IP地址与⼦网掩码做与运算可以得<strong>到网络号</strong>, 主机号从全0到全1就是子网的地址范围; IP地址和子网掩码还有一种更<strong>简洁的表示方法</strong>,<strong>例如140.252.20.68/24,表示IP地址为140.252.20.68, 子网掩码的高24位是1,也就255.255.255.0</strong></p><h3 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h3><blockquote><ul><li><strong>将IP地址中的主机地址全部设为0，就成为了网络号，代表这个局域网；</strong> </li><li><strong>将IP地址中的主机地址全部设为1，就成为了广播地址，用于给同一个用于给同一个链路中相互连接的所有主机发送数据包;</strong> </li><li>127.*的IP地址用于本地环回(loop back)测试,通常是127.0.0.1</li></ul></blockquote><h4 id="IP地址的数量限制"><a href="#IP地址的数量限制" class="headerlink" title="IP地址的数量限制"></a>IP地址的数量限制</h4><p>IP地址是一个4字节32位整数，那么一共只有2的32次方个IP地址，大概43亿左右，而TCP/IP协议规定，每个主机都需要有一个IP地址。</p><p>这意味着，一共只有43亿台主机能接入网络？</p><p>实际上，由于一些实际上, 由于一些特殊的IP地址的存在, 数量远不⾜足43亿; 另外IP地址并非是按照主机台数来配置的, 而是每一 个网卡都需要配置一个或多个IP地址. <strong>CIDR</strong>在一定程度上缓解了IP地址不够用的问题(提⾼高了利用率, 减少了浪费, 但是IP地址的绝对上限并没有增加), 仍然不是很够用. 这时候有三种⽅方式来解决:</p><blockquote><ul><li><strong>DHCP</strong>动态分配IP地址: 只给接网络的设备分配IP地址. 因此同一个MAC地址的设备, 每次接入互联网中，得到的IP地址不一定是相同的；</li><li>NAT技术； </li><li>IPv6: IPv6并不是IPv4的简单升级版. 这是互不相干的两个协议, 彼此并不兼容; IPv6⽤用16字节128位 来表示一个IP地址; 但是目前IPv6还没有普及;</li></ul></blockquote><h3 id="私有IP地址和公网IP地址"><a href="#私有IP地址和公网IP地址" class="headerlink" title="私有IP地址和公网IP地址"></a>私有IP地址和公网IP地址</h3><p>一个组织内部组建局域网，IP地址只用于局域网内的通信，而不直接连到Internet上，理论上使用任意的IP地址都可以，但是RFC 1918规定了用于组建局域网的私有IP地址</p><blockquote><ul><li>10.*,前8位是网络号,共16,777,216个地址 </li><li>172.16. 到 172.31.,前12位是网络号,共1,048,576个地址 </li><li>192.168.*,前16位是网络号,共65,536个地址,包含在这个范围中的, 都成为<strong>私有IP</strong>, <strong>其余的则称为全局IP(或公网IP);</strong> </li></ul></blockquote><p>不同局域网内的IP有可能重复。</p><blockquote><ul><li>一个路由器可以配置两个IP地址, 一个是<strong>WAN口IP</strong>, 一个是<strong>LAN口IP</strong>(<strong>子网IP</strong>).</li><li>路由器LAN口连接的主机, 都从属于当前这个路由器的子网中. 不同的路由器, 子网IP其实都是一样的(通常都是192.168.1.1). <strong>子网内的主机IP地址不能重复. 但是子网之间的IP地址就可以重复了.</strong>  </li><li>每一个家用路由器, 其实又作为运营商路由器的子网中的一个节点. 这样的运营商路由器可能会有 很多级, 最外层的运营商路由器, <strong>WAN口IP就是一个公网IP</strong> 。</li><li><strong>子网内的主机需要和外网进行通信时</strong> , 路由器将<strong>IP首部中的IP地址</strong>进行替换(<strong>替换成WAN口IP</strong> ), 这样<strong>逐级替换</strong> , 最终数据包中的IP地址成为一个网IP. 这种技术称为<strong>NAT(Network Address Translation，网络地址转换).</strong>  </li><li>如果希望我们自己实现的服务器程序, 能够在公网上被访问到, 就需要把程序部署在一台具有外网IP 的服务器上. 这样的服务器可以在阿⾥里云/腾讯云上进行购买。</li></ul></blockquote><p>NAT 解决IP地址不足。</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在复杂的网络结构中，找出一条通往目的IP有效路径的路线的过程；</p><p>[唐僧取经问路例子1]</p><p>路由的过程，就是（Hop by Hop）一跳一跳“问路”的过程。跳一下，就是数据链路层的一个区间。具体在以太网上指源MAC地址到目的MAC地址之间的帧出传输区间。</p><p>IP数据包的传输过程也跟问路是一样的。</p><blockquote><ul><li>当IP数据包, 到达路由器时, 路由器会先查看目的IP; </li><li>路由器决定这个数据包是能直接发送给目标主机, 还是需要发送给下一个路由器; </li><li>依次反复, 一直到达目标IP地址; </li></ul></blockquote><p>那么如<strong>何判定当前这个数据包应该发送到哪里</strong>？<strong>这个就依靠每个节点内部维护一个路由表</strong>；</p><p>[唐僧取经问路例子2]</p><blockquote><ul><li>路由表可以使⽤用route命令查看 </li><li>如果目的IP命中了路由表, 就直接转发即可; </li><li>路由表中的最后一行,主要由<strong>下一跳地址和发送接口两部分</strong>组成,当目的地址与路由表中其它行都不匹配时,就按缺省路由条目规定的接口发送到下一跳地址。 </li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/路由表.png" alt="路由表"></p><blockquote><ul><li>这台主机一个网络接口，连接到192.168.245.0/24 网络。</li><li>路由表的Destination是目的网络地址，default:默认网关</li><li>Genmask是子网掩码，</li><li>Gateway是下一跳地址， *：代表局域网和路由器直接相连，不用跳到其他路由器</li><li>Iface是发送接口，</li><li>Flags中的U标志表示此条目有效（可以禁用某些条目），G标志标志此条目的下一条地址是某个路由器的地址，没有G标识的条目表示目的网络地址是与本机接口直接相连的网络，不必经过路由器转发；</li></ul></blockquote><p>例1：如果要发送的地址是192.168.245.3</p><blockquote><ul><li>跟第一行子网掩码进行按位与运算得到192.168.245.0，与第一行的目的网络地址相符。</li><li>假如不符合再跟第二行子网掩码进行按位与运算，看是否与第二行的目的网络地址相符。</li><li>由于192.168.245.0/24正是与eth0接口直接相连的网络，且Flags被没有G标识，因此可以直接发到目的主机，不需要经路由器转发。</li></ul></blockquote><p>例2：如果要发送的数据包的目的地址是202.10.1.2 </p><blockquote><ul><li>依次和路由表前几行进行子网掩码进行按位与运算，得到的网络号进行对比发现都不匹配</li><li>按缺省路由条目，从eth0发送出去，发往192.168.245.2路由器</li><li>由192.168.245.2路由器根据它的路由表决定下一跳的地址；</li></ul></blockquote><h3 id="路由表生成算法"><a href="#路由表生成算法" class="headerlink" title="路由表生成算法"></a>路由表生成算法</h3><ul><li><strong>距离向量算法</strong></li><li><strong>LS算法</strong></li><li><strong>Dijkstra算法</strong></li></ul><p>、</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>用于两个设备（同一种数据节点）之间进行传递</p><h3 id="对比理解“数据链路层”和“网络层”"><a href="#对比理解“数据链路层”和“网络层”" class="headerlink" title="对比理解“数据链路层”和“网络层”"></a>对比理解“数据链路层”和“网络层”</h3><p>[唐僧例子之白龙马]  </p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><ul><li>“以太网”不是一种具体的网络，而是一种技术标准，即包含了数据链路层的内容，也包含了一些物理层的内容。例如：规定了网络拓扑图</li><li>例如以太网中的网线必须使用双绞线；传输速率有10M,100M，1000M等；</li><li>以太网是当前应用最广发的局域网技术；和以太网并列的还有令牌环，无线LAN等；</li></ul></blockquote><h3 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h3><p><img src="/2019/01/18/网络基础-2/以太网网络帧格式.png" alt="以太网网络帧格式"></p><blockquote><ul><li>源地址和目的地址：网卡的硬件地址（MAC）地址，长度是48位，是在网卡出厂时固化的；</li><li>协议类型字段有三种值，分别对应IP、ARP、RARP</li><li>帧末尾是CRC校验码</li></ul></blockquote><h3 id="认识MAC地址"><a href="#认识MAC地址" class="headerlink" title="认识MAC地址"></a>认识MAC地址</h3><blockquote><ul><li>MAC地址用来识别数据链路层中相连的节点；</li><li>长度为48位, 及6个字节. ⼀般⽤用16进制数字加上冒号的形式来表⽰(例如: 08:00:27:03:fb:19) </li><li>在网卡出厂时就确定了, 不能修改. mac地址通常是唯一的(虚拟机中的mac地址不是真实的mac地 址, 可能会冲突; 也有些网卡支持用户配置mac地址）。</li><li>CRC：校验方式</li></ul></blockquote><h4 id="对比MAC地址和ip地址"><a href="#对比MAC地址和ip地址" class="headerlink" title="对比MAC地址和ip地址"></a>对比MAC地址和ip地址</h4><ul><li>IP地址描述的是路途起点到终点</li><li>MAC地址描述的是路途上的每一个区间的起点和终点；</li></ul><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><ul><li>MAC帧协议如何分离有效载荷和分离问题</li></ul><p>MAC的报头的长度是固定的，就可以进行拆分。</p><ul><li>MAC协议如何向上交付</li></ul><p>帧类型字段可以确定交付给的上层，0800–IP 、0806—RP、8035-RARP </p><h3 id="认识MTU"><a href="#认识MTU" class="headerlink" title="认识MTU"></a>认识MTU</h3><blockquote><ul><li>以太网帧帧中的数据长度规定最小46字节，最大1500字节，ARP数据包的长度不够46字节，要在后面补充位；</li><li>最大值1500称为以太网的最大传输单元（MTU）,不同网络类型有不同的MTU;</li><li>如果一个数据包从以太网由到拨号链路上,数据包长度大于拨号链路的MTU了,则需要对数据包进行分片(fragmentation); </li><li>不同的数据链路层标准的MTU是不同的；</li></ul></blockquote><h3 id="MUT对IP协议的影响"><a href="#MUT对IP协议的影响" class="headerlink" title="MUT对IP协议的影响"></a>MUT对IP协议的影响</h3><p>由于数据链路层MTU的限制，对于较大的IP数据包包进行分包。</p><blockquote><ul><li>将较⼤大的IP包分成多个小包, 并给每个小包打上标签; </li><li>每个小包IP协议头的16位标识（id）都是相同的；</li><li>每个小包的IP协议头的3位标志位字段中，第2位为0，表示允许分片，第三位来表示结束标记（为1为结束包）</li><li>到达对端（IP网络层）时再将这些小包，会顺序重组，拼装到一起返回给传输层；</li><li>一旦些报文中的任意一个小包丢失了，接收端的重组就失败，但是IP层不会负责重新传输数据，TCP会进行超时重传。</li></ul></blockquote><h3 id="MTU对UDP协议的影响"><a href="#MTU对UDP协议的影响" class="headerlink" title="MTU对UDP协议的影响"></a>MTU对UDP协议的影响</h3><blockquote><ul><li>一旦UDP携带的数据超过1472（1500-20(IP首部)-8(UDP首部)），那么就会在网络层分成多个IP数据报。</li><li>这多个IP数据报有任何一个丢失了，都会引起接收端网络重组失败，那么就意味着，如果UDP数据包报在网络层被分片，整个数据被丢失的概率就会大大增加。</li></ul></blockquote><h3 id="MTU对于TCP协议的影响"><a href="#MTU对于TCP协议的影响" class="headerlink" title="MTU对于TCP协议的影响"></a>MTU对于TCP协议的影响</h3><blockquote><ul><li><p>TCP的一个数据也不能无限大，也要受制于MTU，TCP的单个TCP的单个数据报的最大消息长度, 称为 MSS(Max Segment Size)=1460 （1500-20(IP首部)-20(TCP首部)）</p></li><li><p>TCP在建立连接的过程中, 通信双方会进行MSS协商. </p></li><li><p>最理想的情况下, MSS的值正好是在IP不会被分片处理的最大长度(这个长度仍然是受制于数据链路层的MTU). </p></li><li><p><strong>双方在发送SYN的时候会在TCP的头部写入字节能支持的MSS值</strong></p><p>然会双发得知对方的MSS值后，选择较小的值作为最终MSS</p></li><li><p>MSS的值就是在TCP首部的40字节变长选项中（kind=2);</p></li></ul></blockquote><h3 id="MSS和MTU的关系"><a href="#MSS和MTU的关系" class="headerlink" title="MSS和MTU的关系"></a>MSS和MTU的关系</h3><p>MSS是针对传输层而言的，MTU是针对数据链路层而言的。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>虽然我们在这里介绍ARP协议，但是ARP不是一个单纯的数据链路层的协议！<strong>而是一个介于数据链路层和网络层之间的协议；地址解析协议</strong></p><h3 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h3><p><strong>ARP协议建立了主机IP地址和MAC地址的映射关系。</strong> :couple_with_heart:</p><blockquote><ul><li>在网络通讯时，源主机的应用程序知道目的主机的IP地址和端口号，却不知道目的主机的硬件地址；</li><li>数据包首先是被网卡接收到再去处理上层协议的，如果接收到的数据包的硬件地址与本机不符，则直接丢弃；</li><li><strong>因此在通讯前必须获得目的主机的硬件地址；</strong></li></ul></blockquote><h3 id="ARP协议的工作流程"><a href="#ARP协议的工作流程" class="headerlink" title="ARP协议的工作流程"></a>ARP协议的工作流程</h3><p><img src="/2019/01/18/网络基础-2/ARP通信流程.png" alt="ARP通信流程"></p><blockquote><ul><li>源主机发出ARP请求,询问“IP地址是192.168.0.1的主机的硬件地址是多少”, 并将这个请求广播到本地网段<strong>(以太网帧首部的硬件地址填FF:FF:FF:FF:FF:FF表示广播);</strong> </li><li>目的主机接收到广播的ARP请求,发现其中的IP地址与本机相符,则发送一个ARP应答数据包给源主机,将自己的硬件地址填写在应答包中;</li><li>每台主机都<strong>维护一个ARP缓存表</strong>,可以用<code>arp -a</code>命令查看。缓存表中的表项有过期时间(一般为20分钟),如果20分钟内没有再次使用某个表项,则该表项失效,下次还要发ARP请求来获得目的主机的硬件地址</li></ul></blockquote><p><img src="/2019/01/18/网络基础-2/ARP缓存表.png" alt="ARP缓存表"></p><h3 id="ARP数据报的格式"><a href="#ARP数据报的格式" class="headerlink" title="ARP数据报的格式"></a>ARP数据报的格式</h3><p><img src="/2019/01/18/网络基础-2/ARP数据报格式.png" alt="ARP数据报格式"></p><blockquote><ul><li>源MAC地址、目的MAC地址在以太网首部和ARP请求中个出现一次，对于链路层为以太网情况是多余的，但是链路层是其他类型的网络则有可能是必要的。</li><li><strong>硬件类型</strong>值链路层网络类型，1为以太网</li><li><strong>协议类型</strong>值要转换的地址类型，0X0800为IP地址</li><li><strong>硬件地址长度</strong>对于以太网地址为6字节; </li><li><strong>协议地址长度</strong>对于和IP地址为4字节; </li><li><strong>OP字段</strong>为1表示ARP<strong>请求,</strong>op字段为2表示ARP<strong>应答</strong>。</li><li><strong>发送端以太网地址</strong>：即以太网源地址</li><li><strong>发送端IP地址</strong>：172.20.1.1</li><li><strong>目的以太网地址</strong>：FF:FF:FF:FF:FF:FF（未知） 广播地址</li><li><strong>目的IP地址</strong>: 172.20.1.2</li></ul></blockquote><p>以太网首部</p><blockquote><ul><li><strong>以太网目的地址</strong>：FF:FF:FF:FF:FF:FF（未知）广播地址</li><li><strong>以太网源地址</strong>：即发送端以太网地址</li><li><strong>数据帧类型：</strong> 0806（ARP）</li></ul></blockquote><p>广播地址发送出去，所有局域网的主机都能接收到，数据帧的以太网地址是广播地址，所以都对数据帧进行解包分用，发现是一个ARP请求，向上交付到ARP层，</p><p>ARP对数据包解包分用查看是向那个IP发送ARP请求，看目标IP是否是自己，不是则丢弃。</p><p>是的就构建一个应答OP为2，  发送的应答将以太网首部的以太网目的地址变为发出请求的主机IP地址，局域网下的所有机器都收到了，但是查看数据帧中的目的以太网地址不是广播地址，则是只有发起ARP请求的主机收到了，其余主机则丢弃该响应。</p><p>发起ARP请求的主机收到ARP请求时，就对ARP进行解析,OP为2，为ARP响应，则提取出了想要发送数据的MAC地址。</p><p>此时将对ARP进行缓存（ARP表），MAC和IP的映射。该缓存有生命周期一般为20分钟。20分钟后操作系统得重新进行ARP缓存操作。</p><p>这是时主机A就知道主机B的MAC地址了，就将数据封装称以太网帧的形式发送个主机B。主机B就到了解包分用的过程。</p><h1 id="其他重要协议或技术"><a href="#其他重要协议或技术" class="headerlink" title="其他重要协议或技术"></a>其他重要协议或技术</h1><h2 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h2><p>DNS是一整套从域名映射到IP的系统</p><h3 id="DNS背景"><a href="#DNS背景" class="headerlink" title="DNS背景"></a>DNS背景</h3><p>TCP/IP中使用IP地址和端口号来确定网络上的一台主机的一个程序，但是<strong>IP地址不方便于是人们发明了一种叫主机名的东西, 是一个字符串, 并且使用hosts文件来描述主机名和IP地址的关系.</strong></p><p><strong>hosts文件来描述主机名和IP地址的关系</strong></p><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><blockquote><ul><li>一个组织的系统管理机构, 维护系统内的每个主机的IP和主机名的对应关系.</li><li>如果新计算机接入网络, 将这个信息注册到数据库中; </li><li>⽤用户输入域名的时候, 会自动查询DNS服务器, 由DNS服务器检索数据库, 得到对应的IP地址.</li></ul></blockquote><h3 id="域名简介"><a href="#域名简介" class="headerlink" title="域名简介"></a>域名简介</h3><p><strong>主域名</strong>是用来<strong>识别主机名称和主机所属的组织机构的一种分层结构的名称</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><p>域名使用.连接</p><blockquote><ul><li>com:一级域名，表示这是一个企业域名，同级的还有 “net”(网络提供商), “org”(非盈利组织) 等. </li><li>baidu: 二级域名, 公司名. </li><li>www: 只是一种习惯用法. 之前人们在使⽤用域名时, 往往命名成类似于ftp.xxx.xxx/<a href="http://www.xxx.xxx这样" target="_blank" rel="noopener">www.xxx.xxx这样</a> 的格式, 来表示主机支持的协议。</li></ul></blockquote><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>域名是分层结构，域名服务器也是对应的层级结构。</p><p>每个层的域名上都有自己的域名服务器. 最顶层的是根域名服务器</p><p>每一级域名服务器都知道下级域名服务器的IP地址 </p><p>为了容灾, 每一级至少设置两个或以上的域名服务器</p><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><ol><li>输入域名后，先查到<strong>自己对主机对应的域名服务器</strong></li><li>域名服务器先查找自己的数据库中的数据，如果没有，就向上级域名服务器进行查找，依次类推；</li><li>最多回溯到根域名服务器, 肯定能找到这个域名的IP地址</li><li>将查到的IP地址返回给客户端。</li><li>最后就可以进行通信。</li><li>域名服务器自身也会进行一些缓存. 把曾经访问过的域名和对应的IP地址缓存起来, 可以加速查找过 程.</li></ol><h1 id="浏览器中输入URL之后会发生什么"><a href="#浏览器中输入URL之后会发生什么" class="headerlink" title="浏览器中输入URL之后会发生什么"></a>浏览器中输入URL之后会发生什么</h1><p>越详细越好</p><p>Http服务器是基于TCP/IP的，</p><ul><li><p>DNS域名解析</p></li><li><p>所以就要先建立连接（三次握手）</p></li><li><p>然后发起HTTP请求，基于TCP连接基于应用底层向对方发数据，</p></li><li>构建HTTP报头(请求行，请求报头，空行，正文（无）)，通过TCP连接发送过去</li><li>不断向下进行封装交付，经过路由器路跳跳式由到对方路由器，（路由器对进行ARP请求）</li><li>对方路由器进行解包分用向上交付，应用层解析发现要请求的是首页，然后对主机进行其响应，</li><li>数据传输过程中会生TCP的分片重组，丢包，重复问题，缓冲区满了等问题</li></ul><p><strong>==下来单独写一篇博客==</strong> </p><h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1><h1 id="NAT技术背景"><a href="#NAT技术背景" class="headerlink" title="NAT技术背景"></a>NAT技术背景</h1><p>网路层协议</p><p><strong>IPv4协议中, IP地址数量不充足的问题 NAT技术当前解决IP地址不够用的主要手段, 是路由器的一个重要功能 ; </strong>  </p><blockquote><ul><li>NAT能够将私有IP对外通信时转为全局IP. 也就是就是一种<strong>将私有IP和全局IP相互转化的技术</strong></li><li>方法: 很多学校, 家庭, 公司内部采用<strong>每个终端设置私有IP</strong>, 而在<strong>路由器或必要的服务器</strong>上设置全局IP; </li><li><strong>全局IP要求唯一, 但是私有IP不需要; 在不同的局域网中出现相同的私有IP是完全不影响的;</strong></li></ul></blockquote><h3 id="NAT-IP转换过程"><a href="#NAT-IP转换过程" class="headerlink" title="NAT IP转换过程"></a>NAT IP转换过程</h3><p>欠一张转换图</p><h3 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h3><blockquote><ul><li>NAT路由器将源地址从10.0.0.10替换成全局的IP 202.244.174.37; </li><li>NAT路由器收到外部的数据时, 又会把目标IP从202.244.174.37替换回10.0.0.10; </li><li>在NAT路由器内部, 有一张自动生成的, 用于地址转换的表; </li><li>当 10.0.0.10 第一次向 163.221.120.9 发送数据时就会生成表中的映射关系</li></ul></blockquote><p>那么问题来了, 如果局域网内, 有多个主机都访问同一个外网服务器, 那么对于服务器返回的数据中, 目的IP都 是相同的. 那么NAT路由器如何判定将这个数据包转发给哪个局域网的主机? </p><p>NAPT来解决这个问题了. 使⽤用IP+port来建立这个关联关系</p><p>全局IP地址+端口号（建立了一条双项信道）</p><p>这种关联关系是由NAT路由器自动维护的，例如在TCP的情况下，建立连接时，就会产生这个一个源地址，全局IP地址的表项；在断开连接后，就会删除这个表项</p><h3 id="NAT技术的缺陷"><a href="#NAT技术的缺陷" class="headerlink" title="NAT技术的缺陷"></a>NAT技术的缺陷</h3><p>由于NAT依赖这个转换表，所以有诸多限制</p><blockquote><ul><li>⽆法从NAT外部向内部服务器建立连接</li><li>装换表的生成和销毁都需要额外开销；</li><li>通信过程中一旦NAT设备异常, 即使存在设备, 所有的TCP连接也都会断</li></ul></blockquote><p>桥接模式：Linux,Windos 物理上一台机器，实际上路由器把这个Linux虚拟机看作另一台机器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ul><li>数据链路成的作用：两个设备（同一个数据连路节点）之间进行传递数据</li><li>以太网是一种技术标准，既包含了数据链路层的内容，也包含了一些物理层的内容，例如：规定了网络拓扑结构，访问控制方式，传输率等；</li><li>以太网帧格式</li><li>理解MAC地址</li><li>理解ARP协议</li><li>理解MTU</li></ul></blockquote><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ul><li>网络层的作用：在复杂的网络环境中确定一个合适的路径</li><li>理解IP地址，理解IP地址和MAC地址的区别</li><li>理解IP协议格式</li><li>了解网段划分方法</li><li>理解如何解决IP数目不足的问题，掌握网段划分的两种方案，理解私有IP和公网IP</li><li>理解网络层的IP地址路由过程。理解一个数据包如何跨越网段到达最终目的地</li><li>理解IP数据包分包原因</li><li>了解ICMP协议</li><li>了解NAT设备的工作原理</li></ul></blockquote><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ul><li>传输层的作用：负责数据能够从发送断传输接收端</li><li>理解端口号的概念</li><li>认识UDP协议，了解UDP协议的特点</li><li>认识TCP协议，理解TCP协议的可靠性，理解TCP协议的状态转变</li><li>掌握TCP的连接管理，确认应答，超市重传，滑动窗口，流量控制，拥塞控制，延迟应答，捎带应答特性</li><li>理解TCP面向字节流，理解粘包问题和解决方案</li><li>能够基于UDP实现可靠传输</li><li>理解MTU对UDP/TCP的影响</li></ul></blockquote><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><blockquote><ul><li>应用层的作用：满足我们日常需求的网络程序，都是再应用层</li><li>能够根据自己得需求，设计应用层协议</li><li>了解HTTP协议</li><li>理解DNS的原理和工作流程</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;网络基础2&quot;&gt;&lt;a href=&quot;#网络基础2&quot; class=&quot;headerlink&quot; title=&quot;网络基础2&quot;&gt;&lt;/a&gt;网络基础2&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理解应⽤用层的作用, 初识HTTP协议 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;理解传输层的作用, 深入理解TCP的各项特性和机制 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;理解网络层的作用, 深入理解IP协议的基本原理 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;理解数据链路层的作⽤用, 了解ARP协议 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对整个TCP/IP协议有系统的理解 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对TCP/IP协议体系下的其他重要协议和技术有一定的了解 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使⽤用一些分析网络问题的工具和方法&lt;/p&gt;
&lt;p&gt;注意!! 注意!! 注意!! &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络编程的理论基础. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是一个服务器开发程序员的重要基本功.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  自顶向下讲解：&lt;/p&gt;
&lt;h1 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h1&gt;&lt;p&gt;我们写一个解决我们实际问题, 满足我们日常需求的网络程序, 都是在应用层。&lt;/p&gt;
&lt;h2 id=&quot;再谈“协议”&quot;&gt;&lt;a href=&quot;#再谈“协议”&quot; class=&quot;headerlink&quot; title=&quot;再谈“协议”&quot;&gt;&lt;/a&gt;再谈“协议”&lt;/h2&gt;&lt;p&gt;协议是一种 “约定”. socket api的接口, 在读写数据时, 都是按 “字符串” 的方式来发送接收的。我们约定客户端先发送，服务器先接收。是一种客户端与服务器之间的约定。&lt;/p&gt;
&lt;h2 id=&quot;网络版计算器&quot;&gt;&lt;a href=&quot;#网络版计算器&quot; class=&quot;headerlink&quot; title=&quot;网络版计算器&quot;&gt;&lt;/a&gt;网络版计算器&lt;/h2&gt;&lt;p&gt;我们需要实现⼀个服务器版的加法器. 我们需要客户端把要计算的两个加数发过去, 然后由服务器进行计算, 最后再把结果返回给客户端. &lt;/p&gt;
&lt;p&gt;约定方案一：&lt;strong&gt;约定指定格式 &lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送一个形如”1+1”的字符串;&lt;/li&gt;
&lt;li&gt;这个字符串中有两个操作数, 都是整形; &lt;/li&gt;
&lt;li&gt;两个数字之间会有一个字符是运算符, 运算符只能是 + ; &lt;/li&gt;
&lt;li&gt;数字和运算符之间没有空格;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约定方案二：&lt;strong&gt;TCP:面向字节流&lt;/strong&gt;  :raising_hand_man:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义结构体来表⽰示我们需要交互的信息; &lt;/li&gt;
&lt;li&gt;发送数据时将这个结构体按照一个规则转换成字符串, 接收到数据的时候再按照相同的规则把字符串转化回结构体; &lt;/li&gt;
&lt;li&gt;这个过程叫做 “序列化” 和 “反序列化”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;序列化反序列化：JOSN /XML  &lt;/p&gt;
&lt;h1 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h1&gt;&lt;p&gt;HTTP（超文本传输协议）&lt;/p&gt;
&lt;p&gt;认识URL–网址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/18/网络基础-2/URL-网址.png&quot; alt=&quot;URL-网址&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;urlencode和urldecode&quot;&gt;&lt;a href=&quot;#urlencode和urldecode&quot; class=&quot;headerlink&quot; title=&quot;urlencode和urldecode&quot;&gt;&lt;/a&gt;urlencode和urldecode&lt;/h2&gt;&lt;p&gt;象/？：等这样的字符在URL中是特殊意义理解，因此该字符不能随意出现。假如要出现必须对带有这些特殊字符进行转义。&lt;/p&gt;
&lt;p&gt;转义规则如下：&lt;/p&gt;
&lt;p&gt;讲需要转码的字符串为16进制，然后从右象左，取4位（不足4位直接处理），每2位做一位，前面加上%，编码最后变成 &lt;code&gt;%XY&lt;/code&gt;格式&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/18/网络基础-2/1547866578248.png&quot; alt=&quot;1547866578248&quot;&gt;&lt;/p&gt;
&lt;p&gt;？后面的参数将我搜索的内容”&lt;code&gt;C++&lt;/code&gt;“中的”&lt;code&gt;+&lt;/code&gt;“转变为了”&lt;code&gt;%2B&lt;/code&gt;“&lt;/p&gt;
&lt;p&gt;urldecode就是 urlencode的逆过程；可以进行反转义    &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tool.chinaz.com/Tools/urlencode.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;URL解码工具&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>TCP协议通讯流程</title>
    <link href="https://soyanga.github.io/2019/01/18/TCP%E5%8D%8F%E8%AE%AE%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B/"/>
    <id>https://soyanga.github.io/2019/01/18/TCP协议通讯流程/</id>
    <published>2019-01-18T12:39:25.000Z</published>
    <updated>2019-01-18T14:53:12.652Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="TCP协议通讯流程"><a href="#TCP协议通讯流程" class="headerlink" title="TCP协议通讯流程"></a>TCP协议通讯流程</h2><p><strong>TCP要建立链接，就需要三次握手</strong> </p><p><strong>TCP保证可靠性：确认应答机制。</strong> </p><p><strong>TCP断开链接，需要4次握手</strong> </p><p>维护链接是要有成本，TCP比UDP消耗更大，因为保证可靠性</p><h3 id="问题：三次握手为什么不是2次呢，不是4次呢？"><a href="#问题：三次握手为什么不是2次呢，不是4次呢？" class="headerlink" title="问题：三次握手为什么不是2次呢，不是4次呢？"></a>问题：三次握手为什么不是2次呢，不是4次呢？</h3><p>客户端发起链接<strong>请求（SYN）</strong>，服务器对其<strong>响应</strong>（<strong>SYN+ACK</strong>），客户端再紧接着<strong>确认</strong>(<strong>ACK)</strong>。</p><p>客户端发起链接<strong>请求</strong>，服务器对其<strong>响应</strong>，在网络中报文可能丢失，</p><h4 id="为什么不是2次"><a href="#为什么不是2次" class="headerlink" title="为什么不是2次"></a>为什么不是2次</h4><p>客户端发送的报文丢失，链接失败</p><p>但是客户端发送（<strong>请求</strong>）给服务器的报文没丢失，且服务器发送的报文（<strong>响应</strong>）发出后，服务器认为已经建立链接，但是客户端此时并能没有接收报文（报文在网络中传输），客户端认为并没有建立起链接。</p><p>服务器认为链接建立好了，服务器就要求维护这个链接，<strong>服务器需要花成本去维护</strong>。，但是这个链接并不是双方认可的链接。</p><p>如果服务器发送的<strong>响应报文</strong>，丢失了，客户端认为并没有链接，就会继续发送<strong>一个新的请求报文</strong>给服务器。此时服务器接收到<strong>请求报文</strong>，发送自己的<strong>响应报文</strong> 给客户端客户,服务器又认为链接已经建立，就又会<strong>花成本维护</strong>一个这个链接。</p><p><strong>所以长此以往，服务器上就会有众多的闲时链接，导致服务器资源不够，服务器瘫痪。</strong></p><p><strong>两次握手有着致命的缺陷。</strong></p><p>2次握手情况下，假如人利用这种方式攻击服务器，服务器就会瘫痪，但是3次握手情况下服务器不会产生故障，攻击者也会得逞只会自己主机上会产生众多闲时链接自作自受。</p><p><strong>三次握手前两次发送报文丢失了，服务器客户端不会认为链接已经建立。不会发生上述情况。</strong></p><p><strong>分析最后一次确认链接报文发送过程中丢失了</strong>，客户端认为链接成功，服务器认为报文丢失了链接失败了。</p><p>此时会发生以上的相反情况，客户端上就会有众多的闲时链接。</p><p>但是服务器永远是多个客户端链接的，一对多的。得保证服务器的安全，所以是三次。</p><h4 id="为什么不是4次-6-8"><a href="#为什么不是4次-6-8" class="headerlink" title="为什么不是4次 /6/8"></a><strong>为什么不是4次</strong> <strong>/6/8</strong></h4><p>这个就像是踢球一样，在谁的脚下发起最后的射门，谁就有责任对这个求负责。</p><p>最后一次链接谁发决定谁可能会产生闲时链接。</p><h4 id="为什么不是5次7次"><a href="#为什么不是5次7次" class="headerlink" title="为什么不是5次7次"></a>为什么不是5次7次</h4><p>没有必要这样，3次握手已经可以避免上述服务器瘫痪的操作，5次7次就很多余而且还会导致链接成功几率降低。</p><a id="more"></a><h2 id="如何理解："><a href="#如何理解：" class="headerlink" title="如何理解："></a>如何理解：</h2><p><strong>谈恋爱例子</strong></p><p>下面是基于TCP协议的客户端/服务器的一般流程：</p><p><strong>男方客户端</strong>  <strong>女方服务器</strong></p><p><strong>链接：</strong>  <strong>三次挥手</strong> </p><p>男方说咱们在一起吧（SYN）</p><p>女生说好的,什么时候(SYN+ACK)</p><p>男生说就现在（ACK）<strong>女生接受到后，此时才确认关系</strong> </p><p><strong>维护两个人的恋爱关系需要彼此双发都维护起来。彼此双方丢需要花费成本。</strong> </p><p><strong>断开链接：四次握手</strong>  </p><p>断开链接的过程是双发的过程。</p><p>男方一直打游戏不上进女生忍不下去了，要分手。</p><p>谁先提出分手都可以</p><p>女方该说的我都说了,我要和你分手（断开链接）（FIN）</p><p>男生说好的。（ACK）</p><p>男方说能做的我都做了，我也要和你分手（断开链接）（FIN）</p><p>女方说好的。（ACK）</p><p>三次握手（有了这个关系，才对我们保证可靠性提供前提条件）——&gt;TCP（可靠传输，面向链接）。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;h2 id=&quot;TCP协议通讯流程&quot;&gt;&lt;a href=&quot;#TCP协议通讯流程&quot; class=&quot;headerlink&quot; title=&quot;TCP协议通讯流程&quot;&gt;&lt;/a&gt;TCP协议通讯流程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;TCP要建立链接，就需要三次握手&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP保证可靠性：确认应答机制。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP断开链接，需要4次握手&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;维护链接是要有成本，TCP比UDP消耗更大，因为保证可靠性&lt;/p&gt;
&lt;h3 id=&quot;问题：三次握手为什么不是2次呢，不是4次呢？&quot;&gt;&lt;a href=&quot;#问题：三次握手为什么不是2次呢，不是4次呢？&quot; class=&quot;headerlink&quot; title=&quot;问题：三次握手为什么不是2次呢，不是4次呢？&quot;&gt;&lt;/a&gt;问题：三次握手为什么不是2次呢，不是4次呢？&lt;/h3&gt;&lt;p&gt;客户端发起链接&lt;strong&gt;请求（SYN）&lt;/strong&gt;，服务器对其&lt;strong&gt;响应&lt;/strong&gt;（&lt;strong&gt;SYN+ACK&lt;/strong&gt;），客户端再紧接着&lt;strong&gt;确认&lt;/strong&gt;(&lt;strong&gt;ACK)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;客户端发起链接&lt;strong&gt;请求&lt;/strong&gt;，服务器对其&lt;strong&gt;响应&lt;/strong&gt;，在网络中报文可能丢失，&lt;/p&gt;
&lt;h4 id=&quot;为什么不是2次&quot;&gt;&lt;a href=&quot;#为什么不是2次&quot; class=&quot;headerlink&quot; title=&quot;为什么不是2次&quot;&gt;&lt;/a&gt;为什么不是2次&lt;/h4&gt;&lt;p&gt;客户端发送的报文丢失，链接失败&lt;/p&gt;
&lt;p&gt;但是客户端发送（&lt;strong&gt;请求&lt;/strong&gt;）给服务器的报文没丢失，且服务器发送的报文（&lt;strong&gt;响应&lt;/strong&gt;）发出后，服务器认为已经建立链接，但是客户端此时并能没有接收报文（报文在网络中传输），客户端认为并没有建立起链接。&lt;/p&gt;
&lt;p&gt;服务器认为链接建立好了，服务器就要求维护这个链接，&lt;strong&gt;服务器需要花成本去维护&lt;/strong&gt;。，但是这个链接并不是双方认可的链接。&lt;/p&gt;
&lt;p&gt;如果服务器发送的&lt;strong&gt;响应报文&lt;/strong&gt;，丢失了，客户端认为并没有链接，就会继续发送&lt;strong&gt;一个新的请求报文&lt;/strong&gt;给服务器。此时服务器接收到&lt;strong&gt;请求报文&lt;/strong&gt;，发送自己的&lt;strong&gt;响应报文&lt;/strong&gt; 给客户端客户,服务器又认为链接已经建立，就又会&lt;strong&gt;花成本维护&lt;/strong&gt;一个这个链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以长此以往，服务器上就会有众多的闲时链接，导致服务器资源不够，服务器瘫痪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两次握手有着致命的缺陷。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2次握手情况下，假如人利用这种方式攻击服务器，服务器就会瘫痪，但是3次握手情况下服务器不会产生故障，攻击者也会得逞只会自己主机上会产生众多闲时链接自作自受。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三次握手前两次发送报文丢失了，服务器客户端不会认为链接已经建立。不会发生上述情况。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析最后一次确认链接报文发送过程中丢失了&lt;/strong&gt;，客户端认为链接成功，服务器认为报文丢失了链接失败了。&lt;/p&gt;
&lt;p&gt;此时会发生以上的相反情况，客户端上就会有众多的闲时链接。&lt;/p&gt;
&lt;p&gt;但是服务器永远是多个客户端链接的，一对多的。得保证服务器的安全，所以是三次。&lt;/p&gt;
&lt;h4 id=&quot;为什么不是4次-6-8&quot;&gt;&lt;a href=&quot;#为什么不是4次-6-8&quot; class=&quot;headerlink&quot; title=&quot;为什么不是4次 /6/8&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么不是4次&lt;/strong&gt; &lt;strong&gt;/6/8&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这个就像是踢球一样，在谁的脚下发起最后的射门，谁就有责任对这个求负责。&lt;/p&gt;
&lt;p&gt;最后一次链接谁发决定谁可能会产生闲时链接。&lt;/p&gt;
&lt;h4 id=&quot;为什么不是5次7次&quot;&gt;&lt;a href=&quot;#为什么不是5次7次&quot; class=&quot;headerlink&quot; title=&quot;为什么不是5次7次&quot;&gt;&lt;/a&gt;为什么不是5次7次&lt;/h4&gt;&lt;p&gt;没有必要这样，3次握手已经可以避免上述服务器瘫痪的操作，5次7次就很多余而且还会导致链接成功几率降低。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络套接字</title>
    <link href="https://soyanga.github.io/2019/01/18/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <id>https://soyanga.github.io/2019/01/18/网络套接字/</id>
    <published>2019-01-17T17:09:38.000Z</published>
    <updated>2019-01-20T06:57:40.437Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="网络编程套接字"><a href="#网络编程套接字" class="headerlink" title="网络编程套接字"></a>网络编程套接字</h1><h2 id="学习要点："><a href="#学习要点：" class="headerlink" title="学习要点："></a>学习要点：</h2><ul><li>认识IP地址，端口号，网络字节序等网络编程中的基本概念；</li><li>学习socket api的基本用法；</li><li>能够实现一个简单的udp客户端/服务器；</li><li>能够实现一个简单的tcp客户端/服务器（单连接版本，多进程版本，多线程版本）；</li><li>理解tcp服务器建立连接，发送数据，断开连接的流程；</li></ul><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP协议有两个版本，IPv4和IPv6。我们整个的课程，凡是提到IP协议，没有特殊说明的，默认都是IPv4</p><ul><li>IP地址是IP协议中，用来标识网络中不同主机地址；</li><li>对于IPv4来说，IP地址是一个4字节，32位整数；</li><li>我们通常也常用也使用“点分十进制”的字符串表示IP地址，例如 198.168.0.1;用点分割的每一个数字表示一个字节，范围是0-255；</li></ul><h3 id="理解源IP地址和目的的IP地址"><a href="#理解源IP地址和目的的IP地址" class="headerlink" title="理解源IP地址和目的的IP地址"></a>理解<strong>源IP地址</strong>和目的的IP地址</h3><p>IP数据包头部中，有两个IP地址，分别叫做源IP地址，和目的IP地址。</p><p>网络通信信息，不止只用IP地址标识，不能标识主机中的那个应用发送接收的消息。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口号（port）是传输层协议内容</p><ul><li>端口号是一个2字节16位的整数</li><li>端口号是用来标识一个进程，告诉操作系统，当前的这个数据要交给那一个进程来处理</li><li>IP地址+端口号能够标识网络上的某一台主机的某个进程</li><li>一个端口号能被一个进程占用</li></ul><p><strong>IP地址+端口号称之为socket</strong>  </p><p>socket是进程通信（跨网络）</p><p><strong>一个进程可以绑定多个端口号；单一个端口号不能被多个进程绑定</strong></p><h3 id="理解源端口号和目的端口号"><a href="#理解源端口号和目的端口号" class="headerlink" title="理解源端口号和目的端口号"></a>理解源端口号和目的端口号</h3><p>传输层协议（TCP和 UDP ）的数据段中有两个端口号，分别叫做源端口号和目的端口号，就是在描述“数据是谁发的，要发个给是谁”。</p><a id="more"></a><h2 id="认识TCP协议"><a href="#认识TCP协议" class="headerlink" title="认识TCP协议"></a>认识TCP协议</h2><p>我们先对TCP（Transmission Control Protocol传输控制协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>有连接</li><li>可靠传输</li><li>面向字节流</li></ul></blockquote><p><strong>定义数据再传输过程中的一些标准和细节问题</strong> </p><h2 id="认识UDP协议"><a href="#认识UDP协议" class="headerlink" title="认识UDP协议"></a>认识UDP协议</h2><p>此处了解一下UDP（User Datagram Protocol 用户数据报协议）有一个直观的认识</p><blockquote><ul><li>传输层协议</li><li>无连接</li><li>不可靠传输</li><li>面向数据报</li></ul></blockquote><p><strong>两种协议区别：</strong></p><p>领导交给任务给下层员工例子。</p><ul><li><p>UDP一个交给别人做（无保证）-速度快</p></li><li><p>TCP一个自己认真做（有保证）-速度慢。</p></li></ul><p>自来水公司例子TCP，不关心数据的大小可调控数据传输大小，按字节流进行。——-面向字节流</p><p>送快递例子UDP，按完整的报文进行发送。——-面向数据报</p><h2 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h2><p>内存中的多字节数据相对于内存地址有大端和小端之分, 磁盘⽂文件中的多字节数据相对于⽂文件 中的偏移地址也有大端小端之分, <strong>网络数据流同样有大端小端之分</strong>. 那么<strong>如何定义网络数据流的地址</strong>呢? </p><blockquote><ul><li>发送主机通常将<strong>发送缓冲区中</strong>的数据按内存地址<strong>从低到⾼高的顺序</strong>发出; </li><li>接收主机把从网络上接到的字节依次保存在<strong>接收缓冲区</strong>中,也<strong>是按内存地址从低到高</strong>的顺序保存; </li><li>因此,网络数据流的地址应这样规定:<strong>先发出的数据是低地址,后发出的数据是高地址.</strong> </li><li>TCP/IP协议规定,网络数据流应采⽤用<strong>大端字节</strong>序,即<strong>低地址高字节</strong>.</li><li>不管这台主机是大端机还是小端机, 都<strong>会按照这个TCP/IP规定的网络字节序来发送/接收数据;</strong> </li><li>如果当前发送主机是<strong>小端, 就需要先将数据转成大端</strong>; 否则就忽略, 直接发送即可;</li></ul></blockquote><p>为了网路程序具有可以移植性，使同样的C代码在大端小端计算机上编译后都能正常运行，可以调用以下库函数<strong>做网络字节序和主机字节序的转换</strong></p><p><img src="/2019/01/18/网络套接字/C语言大端小段转换.png" alt="1547781909980"></p><ul><li>这些函数名很好记,h表⽰示host,n表⽰示network,l表⽰示32位⻓长整数,s表⽰示16位短整数。 </li><li>例如htonl表⽰示将32位的长整数从主机字节序转换为网络字节序,例如将IP地址转换后准备发送。</li><li>如果主机是小端字节序,这些函数将参数做相应的大小端转换然后返回; </li><li>如果主机是大端字节序,这些函数不做转换,将参数原封不动地返回。 </li></ul><h1 id="Socket编程接口"><a href="#Socket编程接口" class="headerlink" title="Socket编程接口"></a>Socket编程接口</h1><h2 id="Socket-API简介"><a href="#Socket-API简介" class="headerlink" title="Socket  API简介"></a>Socket  API简介</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>socket API是⼀一层抽象的网络编程接⼝口,适⽤用于各种底层网络协议,如IPv4、IPv6,以及后⾯面要讲的UNIX Domain Socket. 然⽽而, 各种网络协议的地址格式并不相同。</p><p>Sockaddr *指针 接收套接字，套接字有多种，所以我们用了不同的结构来表示不同的套接字。</p></blockquote><ul><li>IPv4和IPv6的地址格式定义在netinet/in.h中,IPv4地址⽤用sockaddr_in结构体表⽰示,包括16位地址类 型, 16位端⼝口号和32位IP地址. </li><li>IPv4、IPv6地址类型分别定义为常数AF_INET、AF_INET6. 这样,只要取得某种sockaddr结构体的 ⾸首地址,不需要知道具体是哪种类型的sockaddr结构体,就可以根据地址类型字段确定结构体中的内 容. </li><li>socket API可以都⽤用struct sockaddr *类型表⽰示, 在使⽤用的时候<strong>需要强制转化成sockaddr_in; 这样的 好处是程序的通⽤用性,</strong> 可<strong>以接收IPv4, IPv6, 以及UNIX Domain Socket各种类型的sockaddr结构体 指针做为参数;</strong> </li></ul><p><img src="/2019/01/18/网络套接字/不同套接字结构体.png" alt="不同套接字结构体"></p><h3 id="Sockaddr结构"><a href="#Sockaddr结构" class="headerlink" title="Sockaddr结构"></a>Sockaddr结构</h3><h3 id="Sckaddr-in结构"><a href="#Sckaddr-in结构" class="headerlink" title="Sckaddr_in结构"></a>Sckaddr_in结构</h3><blockquote><p>虽然socket api的接⼝口是sockaddr, 但是我们真正在基于IPv4编程时, 使⽤用的数据结构是sockaddr_in; 这个结构 ⾥里主要有三部分信息: <strong>地址类型, 端口号, IP地址.</strong></p></blockquote><h3 id="in-addr结构"><a href="#in-addr结构" class="headerlink" title="in_addr结构"></a>in_addr结构</h3><blockquote><p>in_addr⽤用来表⽰示⼀一个IPv4的IP地址. 其实就是⼀一个32位的整数;</p></blockquote><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>服务器端：</p><ul><li><p>创建 socket   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息 ,地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的IP地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机端口号序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理 // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接可以进行通信了</p></li><li><p>使⽤用sendto和recvfrom来进⾏行数据读写。</p></li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>先将网络序列转换为主机序列</li><li>socket的参数使⽤用SOCK_DGRAM表⽰示UDP </li><li>使用sendto和recvfrom来进⾏行数据读写</li></ul><h2 id="地址转换函数"><a href="#地址转换函数" class="headerlink" title="地址转换函数"></a>地址转换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><ul><li><p>创建 socket //返回一个文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>) <span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>创建失败处理</p></li><li><p>填充本地信息，地址转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure></li><li><p>绑定socket,绑定失败处理  // 绑定端口号 (TCP/UDP, 服务器)   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"bind"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要进行连接(监听) ，并进行失败处理//开始监听socket (TCP, 服务器) </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(listen(sock,<span class="number">10</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    perror(<span class="string">"listen"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他主机向服务器发起连接请求，请求连接客户端，客户端接收请求信息，进入事件循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="comment">//传入绑定监听的套接字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> socket, struct sockaddr* address,  <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"><span class="comment">//成功的话返回一个文件描述符（用于通信的文件描述符）</span></span><br></pre></td></tr></table></figure></li><li></li></ul><h2 id="Socket-API详解"><a href="#Socket-API详解" class="headerlink" title="Socket API详解"></a>Socket API详解</h2><p>下⾯面介绍程序中⽤用到的socket API,这些函数都在sys/socket.h中</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket():"></a>Socket():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 socket 文件描述符 (TCP/UDP, 客户端 + 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>socket()打开一个网络通讯端⼝口,如果成功的话,就像open()一样返回⼀一个⽂文件描述符; </li><li>应⽤用程序可以像读写文件一样⽤用read/write在网络上收发数据;利用socket的返回值；</li><li>如果socket()调⽤用出错则返回-1；</li><li>对于IPv4,domain参数指定位AF_INET;</li><li>对于TCP协议，type参数指定为SOCK_STREAM, 表⽰示⾯面向流的传输协议 ;对于UDP协议,type参数指定为SOCK_DGRAM 表⽰示⾯面向数据报的传输协议。</li><li>protocol参数不了解</li></ul></blockquote><h3 id="bind"><a href="#bind" class="headerlink" title="bind():"></a>bind():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定端口号 (TCP/UDP, 服务器)      </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr  ,<span class="keyword">socklen_t</span> addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>服务器程序所监听的网络地址和端口号通常是固定不变的,客户端程序得知服务器程序的地址和端 口号后就可以向服务器发起连接; 服务器需要调⽤用bind绑定一个固定的网络地址和端口号; </li><li>bind()成功返回0,失败返回-1。 </li><li>bind()的作⽤用是将参数sockfd和addr绑定在⼀一起, 使sockfd这个⽤用于网络通讯的文件描述符监听 addrs所描述的地址和端⼝口号; </li><li>前⾯面讲过,struct sockaddr *是⼀一个通⽤用指针类型,addr参数实际上可以接受多种协议的sockaddr 结构体,⽽而它们的⻓长度各不相同,所以需要第三个参数aaddresslen指定结构体的长度; 。不同套接字有不同的套接字结构体.</li></ul></blockquote><p>但是传入不同的套接字结构体后，我们要结构体中的结构IP体协议类型，IP地址和端口号由主机序列转变为网络序列（默认是大端）。</p><p>方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct sockaddr_in local;</span><br><span class="line">local.sin_family = AF_INET; IPV4</span><br><span class="line">local.sin_addr.s_addr = inte_addr(argv[<span class="number">1</span>]); /把字符串风格的Ip的地址转变为<span class="number">4</span>字节的点分十进制形式，并把主机序列转转变成网络序列</span><br><span class="line">local.sin_port = htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//把主机序列转转变成网络序列</span></span><br></pre></td></tr></table></figure><h4 id="客户端bind"><a href="#客户端bind" class="headerlink" title="客户端bind()"></a>客户端bind()</h4><p>由于客户端不需要固定的端⼝口号,因此不必调⽤用bind(),客户端的端⼝口号由内核⾃自动分配. </p><p>注意: </p><blockquote><ul><li>客户端不是不允许调⽤用bind(), 只是没有必要调⽤用bind()固定⼀一个端⼝口号. 否则如果在同⼀一台机器上 启动多个客户端, 就会出现端⼝口号被占⽤用导致不能正确建⽴立连接; </li><li>服务器也不是必须调⽤用bind(), 但如果服务器不调⽤用bind(), 内核会⾃自动给服务器分配监听端口, 每次 启动服务器时端⼝口号都不⼀一样, 客户端要连接服务器就会遇到⿇麻烦; </li></ul></blockquote><h3 id="listen"><a href="#listen" class="headerlink" title="listen():"></a>listen():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始监听socket (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>listen()声明sockfd处于监听状态, 并且最多允许有backlog个客户端处于连接等待状态, 如果接收到 更多的连接请求就忽略, 这⾥里设置不会太(一般是5), 具体细节同学们课后深⼊入研究; </li><li>listen()成功返回0,失败返回-1; </li></ul></blockquote><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>int listen(int sockfd, int backlog);中backlog：为什么一般会设为5。</p><p>保证服务器链接一直处于满载过程，利用率高。所以服务器要维护一个链接队列，连接队列维护也需要成本，所以链接队列也不能太长。</p><h3 id="accept"><a href="#accept" class="headerlink" title="accept():"></a>accept():</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收请求 (TCP, 服务器) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr* addr,  <span class="keyword">socklen_t</span>* addresslen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>三次握手完成后,服务器调用accept（）接收连接；</li><li>如果服务器调用accept（）时还没有客户端的连接请求,就阻塞等待直到有客户端连接上来; </li><li>addr是一个传入参数,accept()返回时传出客户端的地址和端⼝口号;</li><li>如果给addr参数传入传出参数（value-result argument），传入调用者提供的，缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度(有可能没有占满调⽤用者提供的缓冲区); </li></ul></blockquote><p>理解accept的返回值：</p><p><strong>Linux中一切皆文件</strong> </p><blockquote><p><strong>返回值为一个文件描述符，文件描述符对应的是进程中打开文件。其中进程（结构体）中的打开的文件，与文件描述符（结构体）之间用一个数组指针对应维护起来，所以accept（）返回的int类型是维护这两者关系的一个数组指针的下标。就可以找到这个进程对应打开的文件。</strong> </p><p>这个数组在Linuxz内核中对应的是一个叫fd_array的数组。</p></blockquote><p>例子衣服店门口的占的拉客的导购员。</p><blockquote><p><strong>socket返回的文件描述符：用于socket接收新的连接的。</strong></p><p><strong>accept:返回的文件描述符，用于输入输出流。</strong></p><p><strong>不断的socket链接交给accept返回不同的用于输入输出流的文件描述符。</strong> </p></blockquote><p>利用read write来进行数据的读写操作。</p><p>read的返回值如果为0，表示对端断开了链接。</p><h3 id="connect-客户端"><a href="#connect-客户端" class="headerlink" title="connect():客户端"></a>connect():客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立连接 (TCP, 客户端) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr,  <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>客户端需要调⽤用connect()连接服务器; </li><li>connect和bind的参数形式一致, 区别在于bind的参数是自己的地址, 而connect的参数是对⽅方的地址; </li><li>connect()成功返回0,出错返回-1;</li></ul></blockquote><h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><ul><li><p>netstat -nlup 查看UDP链接</p></li><li><p>netstat -nltp 查看TCP链接</p></li></ul><p>实验测得的现象</p><ul><li>打开文件的生命周期是随进程的。文件就会被关闭，链接就会关闭</li></ul><h2 id="多进程版"><a href="#多进程版" class="headerlink" title="多进程版"></a>多进程版</h2><h4 id="多进程版解决思路："><a href="#多进程版解决思路：" class="headerlink" title="多进程版解决思路："></a>多进程版解决思路：</h4><p>在服务器端的事件循环里添加子进程，子进程区处理IO操作，父进程继续获得新连接。</p><p>在获取子进程时，会继承父进程的监听文件描述符，子进程只需要进行处理IO只需要IO处理的文件描述符。所有子进程关闭监听文件描述符，子进程完成IO操作就退出exit(0)即可。</p><p>父进程不需要IO操作只需要进程监听操作，父进程关闭IO文件描述符即可。</p><h3 id="会引发僵尸进程"><a href="#会引发僵尸进程" class="headerlink" title="会引发僵尸进程"></a>会引发僵尸进程</h3><p>但是子进程退出后，父进程还在不断进行监听操作，子进程此时退出后，资源还没有被父进程回收，子进程就会进入僵尸状态，资源就会被一直浪费。</p><h4 id="解决：（孤儿进程处理法）"><a href="#解决：（孤儿进程处理法）" class="headerlink" title="解决：（孤儿进程处理法）"></a>解决：（孤儿进程处理法）</h4><ul><li>wait():不行，阻塞式会让父进程进入阻塞状态，还得等到子进程退回出后父进程才能再次监听。:</li></ul><ul><li><p>在子进程中继续调用frok（）并让子进程退出，让孙子进程去执行IO操作。</p></li><li><p>父进程waitpid(id,NULL,0);等待的是子进程。</p></li><li><p>但是孙子进程会成为孤儿进程，被1号进程所领养。孙子进程进行IO完毕后，就会被1进程回收。（将回收操作交给操作系统）。</p></li></ul><h2 id="多线程版"><a href="#多线程版" class="headerlink" title="多线程版"></a>多线程版</h2><p>多进程系统消耗太大，所系我们用轻量级进程-线程</p><p>创建线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_create(&amp;tid,<span class="literal">NULL</span>,service,(<span class="keyword">void</span>*)fa); <span class="comment">//传入IO的文件描述符</span></span><br></pre></td></tr></table></figure><p>将线程进行分离：主线程也是要等待创建出来的其他线程，阻塞式，所以不行</p><p>那么我们就进行线程分离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(tid);</span><br></pre></td></tr></table></figure><p>在分离的线程里面进行，IO完成关闭文件描述符，最后线程进行退出。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;网络编程套接字&quot;&gt;&lt;a href=&quot;#网络编程套接字&quot; class=&quot;headerlink&quot; title=&quot;网络编程套接字&quot;&gt;&lt;/a&gt;网络编程套接字&lt;/h1&gt;&lt;h2 id=&quot;学习要点：&quot;&gt;&lt;a href=&quot;#学习要点：&quot; class=&quot;headerlink&quot; title=&quot;学习要点：&quot;&gt;&lt;/a&gt;学习要点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;认识IP地址，端口号，网络字节序等网络编程中的基本概念；&lt;/li&gt;
&lt;li&gt;学习socket api的基本用法；&lt;/li&gt;
&lt;li&gt;能够实现一个简单的udp客户端/服务器；&lt;/li&gt;
&lt;li&gt;能够实现一个简单的tcp客户端/服务器（单连接版本，多进程版本，多线程版本）；&lt;/li&gt;
&lt;li&gt;理解tcp服务器建立连接，发送数据，断开连接的流程；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IP地址&quot;&gt;&lt;a href=&quot;#IP地址&quot; class=&quot;headerlink&quot; title=&quot;IP地址&quot;&gt;&lt;/a&gt;IP地址&lt;/h2&gt;&lt;p&gt;IP协议有两个版本，IPv4和IPv6。我们整个的课程，凡是提到IP协议，没有特殊说明的，默认都是IPv4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP地址是IP协议中，用来标识网络中不同主机地址；&lt;/li&gt;
&lt;li&gt;对于IPv4来说，IP地址是一个4字节，32位整数；&lt;/li&gt;
&lt;li&gt;我们通常也常用也使用“点分十进制”的字符串表示IP地址，例如 198.168.0.1;用点分割的每一个数字表示一个字节，范围是0-255；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;理解源IP地址和目的的IP地址&quot;&gt;&lt;a href=&quot;#理解源IP地址和目的的IP地址&quot; class=&quot;headerlink&quot; title=&quot;理解源IP地址和目的的IP地址&quot;&gt;&lt;/a&gt;理解&lt;strong&gt;源IP地址&lt;/strong&gt;和目的的IP地址&lt;/h3&gt;&lt;p&gt;IP数据包头部中，有两个IP地址，分别叫做源IP地址，和目的IP地址。&lt;/p&gt;
&lt;p&gt;网络通信信息，不止只用IP地址标识，不能标识主机中的那个应用发送接收的消息。&lt;/p&gt;
&lt;h2 id=&quot;端口号&quot;&gt;&lt;a href=&quot;#端口号&quot; class=&quot;headerlink&quot; title=&quot;端口号&quot;&gt;&lt;/a&gt;端口号&lt;/h2&gt;&lt;p&gt;端口号（port）是传输层协议内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口号是一个2字节16位的整数&lt;/li&gt;
&lt;li&gt;端口号是用来标识一个进程，告诉操作系统，当前的这个数据要交给那一个进程来处理&lt;/li&gt;
&lt;li&gt;IP地址+端口号能够标识网络上的某一台主机的某个进程&lt;/li&gt;
&lt;li&gt;一个端口号能被一个进程占用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IP地址+端口号称之为socket&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;socket是进程通信（跨网络）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个进程可以绑定多个端口号；单一个端口号不能被多个进程绑定&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;理解源端口号和目的端口号&quot;&gt;&lt;a href=&quot;#理解源端口号和目的端口号&quot; class=&quot;headerlink&quot; title=&quot;理解源端口号和目的端口号&quot;&gt;&lt;/a&gt;理解源端口号和目的端口号&lt;/h3&gt;&lt;p&gt;传输层协议（TCP和 UDP ）的数据段中有两个端口号，分别叫做源端口号和目的端口号，就是在描述“数据是谁发的，要发个给是谁”。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux网络" scheme="https://soyanga.github.io/categories/Linux%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux网络" scheme="https://soyanga.github.io/tags/Linux%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
